{\rtf1\ansi\ansicpg1252\deff0\deflang1046\deflangfe1046\deftab708{\fonttbl{\f0\fscript\fprq2\fcharset0 Comic Sans MS;}}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\sb100\sa100\f0\fs20 Heran\'e7a \line Objetivos \line\bullet  Ser capaz de criar novas classes por heran\'e7a de classes existentes. \line\bullet  Compreender como a heran\'e7a promove a reutiliza\'e7\'e3o de software. \line\bullet  Compreender as no\'e7\'f5es de classes base e classes derivadas. \line\bullet  Ser capaz de usar a heran\'e7a m\'faltipla para derivar uma classe a partir de v\'e1rias classes base. \line N\'e3o diga que voc\'ea conhece inteiramente uma pessoa at\'e9 dividir uma heran\'e7a com ela. \line Johann Kasper Lavater \line Esse m\'e9todo serve para definir como n\'famero de uma classe a classe de todas as classes similares \'e0 classe ftrnecida. Bertrand Russeli \line Uma pilha de cartas foi constru\'edda como a mais pura das hierarquias, com cada carta sendo mestre das que est\'e3o abaixo e lacaio das que est\'e3o acima. \line Ely Culbertson \line Melhor que herdar uma biblioteca \'e9 colecionar uma. \line Augustine Birrel \line Conserve autoridade base a partir dos livros dos outros. \line William Shakespeare, Love\rquote s Labours Lost \par
\pard\sb100\sa240 9 \par
564 C+\'f7 COMO PROGRAMAR \line\ul Vis\'e3o geral \ulnone\line 9.1 Introdu\'e7\'e3o \line 9.2 Heran\'e7a: classes base e classes derivadas \line 9.3 Membros protected \line 9.4 Fazendo coer\'e7\'e3o de ponteiros de classe base para ponteiros de classe derivada \line 9.5 Usando fun\'e7\'f5es membro \line 9.6 Sobrescrevendo membros da classe base em uma classe derivada \line 9.7 Heran\'e7a public, protected e private \line 9.8 Classes base diretas e classes base indiretas \line 9.9 Usando construtores e destruidores em classes derivadas \line 9.10 Convers\'e3o impl\'edcita de objeto de classe derivada para objeto de classe base \line 9.11 Engenharia de software com heran\'e7a \line 9.12 Composi\'e7\'e3o versus heran\'e7a \line 9.13 Relacionamentos \ldblquote usa um\rdblquote  e \ldblquote conhece um\rdblquote  \line 9.14 Estudo de caso: ponto, c\'edrculo e cilindro \line 9.15 Heran\'e7a m\'faltipla \line 9.16 (Estudo de caso opcional) Pensando em objetos: incorporando heran\'e7a \'e0 simula\'e7\'e3o do elevador. \line Resumo\bullet  Terminologia Erros comuns de programa\'e7\'e3o Boa pr\'e1tica de programa\'e7\'e3o Dicas de desempenho\bullet  Observa\'e7\'f5es de engenharia de software \bullet  Exerc\'edcios de auto-revis\'e3o \bullet  Respostas aos exerc\'edcios de auto-revis\'e3o \bullet  Exerc\'edcios \line 9.1 Introdu\'e7\'e3o1 \line Neste e no pr\'f3ximo cap\'edtulo, discutimos dois dos mais importantes recursos da programa\'e7\'e3o orientada a objetos - heran\'e7a e polimorfismo. A heran\'e7a \'e9 uma forma de reutiliza\'e7\'e3o de software na qual novas classes s\'e3o criadas a partir de classes existentes, pela absor\'e7\'e3o de seus atributos e comportamentos e redefinindo ou \ldblquote embelezando-as\rdblquote  com recursos que as novas classes requerem. A reutiliza\'e7\'e3o de software economiza tempo no desenvolvimento de programas. Ela encoraja o reaproveitamento de software de alta qualidade comprovado e depurado, reduzindo desta maneira os problemas ap\'f3s um sistema se tornar operacional. Estas s\'e3o possibilidades excitantes, O polimorfismo nos permite escrever programas de uma maneira gen\'e9rica, para tratar uma ampla variedade de classes existentes e classes relacionadas ainda n\'e3o especificadas. A heran\'e7a e o polimorfismo s\'e3o t\'e9cnicas efetivas para administrar a complexidade do software. \line Ao criar uma nova classe, em vez de escrever completamente novos membros de dados e novas fun\'e7\'f5es membro, o programador pode especificar que essas novas classes devem herdar os membros de dados e as fun\'e7\'f5es membro de uma classe base previamente definida. A nova classe \'e9 chamada uma classe derivada. Cada classe derivada se torna, ela pr\'f3pria, uma candidata a ser uma classe base para alguma futura classe derivada. Com a heran\'e7a simples, uma classe \'e9 derivada de uma classe base. Com a heran\'e7a m\'faltipla, uma classe derivada herda de m\'faltiplas classes base (possivelmente n\'e3o relacionadas). A heran\'e7a simples \'e9 direta - mostramos v\'e1rios exemplos que devem possibilitar ao leitor se tornar h\'e1bil rapidamente. A heran\'e7a m\'faltipla \'e9 complexa e sujeita a erros - \line Nota: Diversas das t\'e9cnicas descritas aqui e no Cap\'edtulo 10 est\'e3o mudando, \'e0 medida que a comunidade C++ gradualmente come\'e7a a adotar novas t\'e9cnicas especificadas no padr\'e3o C++. Discutimos as novas t\'e9cnicas, tal como a identifica\'e7\'e3o de tipo durante a execu\'e7\'e3o (RUI), no Cap\'edtulo 21. \par
\lang2070 CAP\'cdTULO 9 - HERAN\'c7A 565 \line mostramos somente um exemplo simples e fazemos uma forte advert\'eancia para que o leitor estude mais antes de usar este poderoso recurso. \line Uma classe derivada pode acrescentar membros de dados e fun\'e7\'f5es membro pr\'f3prios, de modo que uma classe derivada pode ser maior que sua classe base. Uma classe derivada \'e9 mais espec\'edfica que sua classe base e representa um grupo menor de objetos. Com heran\'e7a simples, a classe derivada come\'e7a essencialmente como a classe base. A verdadeira for\'e7a da heran\'e7a vem da habilidade de definir na classe derivada acr\'e9scimos, substitui\'e7\'f5es ou refinamentos \'e0s caracter\'edsticas e recursos herdados da classe base. \line C++ oferece tr\'eas esp\'e9cies de heran\'e7a - public, protected e private. Neste cap\'edtulo, concentramonos na heran\'e7a public e explicamos brevemente as outras duas esp\'e9cies. No Cap\'edtulo 15, mostramos como a heran\'e7a private pode ser usada como uma forma alternativa de composi\'e7\'e3o. A terceira fonna, heran\'e7a protected. \'e9 uma adi\'e7\'e3o relativamente recente a C++ e raramente \'e9 usada. Com a heran\'e7a private, todo objeto de uma classe derivada pode tamb\'e9m ser tratado como um objeto da classe base daquela classe derivada. Contudo, a rec\'edproca n\'e3o \'e9 verdadeira - objetos da classe base n\'e3o s\'e3o objetos das classes derivadas daquela classe base. Tiraremos partido deste relacionamento \ldblquote objeto da classe derivada \'e9 um objeto da classe base\rdblquote  para executar algumas manipula\'e7\'f5es interessantes. Por exemplo, podemos colocar uma ampla variedade de objetos diferentes, relacionados atrav\'e9s de heran\'e7a, em uma lista encadeada de objetos da classe base. Isto permite que uma variedade de objetos sejam processados de uma maneira gen\'e9rica. Como veremos no pr\'f3ximo cap\'edtulo, este recurso-chamado polimorfismo - \'e9 uma motiva\'e7\'e3o- chave para a programa\'e7\'e3o orientada a objetos. \line Neste cap\'edtulo, adicionaremos uma nova forma de controle de acesso a membros, qual seja o acesso \line protected. Classes derivadas e seus friends podem accessar membros protected da classe base, enquanto fun\'e7\'f5es membro n\'e3o friend e que n\'e3o s\'e3o da classe derivada n\'e3o podem. \line A experi\'eancia na constru\'e7\'e3o de sistemas de software indica que partes significativas do c\'f3digo lidam com casos especiais intimamente relacionados. Torna-se dif\'edcil, em tais sistemas, ter a \ldblquote vis\'e3o geral\rdblquote  porque o projetista e o programador ficam preocupados com os casos especiais. A programa\'e7\'e3o orientada a objetos oferece v\'e1rias maneiras de \ldblquote ver a floresta atrav\'e9s das \'e1rvores\rdblquote  - um processo chamado de abstra\'e7\'e3o. \line Se um programa est\'e1 carregado de casos especiais intimamente relacionados, ent\'e3o \'e9 comum se ver comandos switch para distinguir entre os casos especiais e fornecer a l\'f3gica de processamento para lidar com cada caso individualmente. No Cap\'edtulo 10, mostramos como usar heran\'e7a e polimorfismo para substituir tal l\'f3gica baseada no uso do comando switch por l\'f3gica mais simples. \line Distinguimos entre relacionamentos \ldblquote\'e9 um\rdblquote  e relacionamentos \ldblquote tem um \ldblquote . \ldblquote E um\rdblquote  \'e9 heran\'e7a. Em um relacionamento \ldblquote\'e9 um\rdblquote , um objeto do tipo da classe derivada pode tamb\'e9m ser tratado como um objeto do tipo da classe base. \ldblquote Tem um\rdblquote  \'e9 composi\'e7\'e3o (ver Fig. 7.4). Em um relacionamento \ldblquote tem um\rdblquote , um objeto de classe tem um ou mais objetos de outras classes como membros. \line Uma classe derivada n\'e3o pode acessar os membros private de sua classe base; permitir isto violaria o encapsulamento da classe base. Uma classe derivada pode, contudo, acessar os membros public e protected de sua classe base. Membros da classe base que n\'e3o deveriam ser acess\'edveis para uma classe derivada via heran\'e7a s\'e3o declarados private na classe base. Uma classe derivada pode acessar membros private da classe base somente atrav\'e9s das fun\'e7\'f5es de acesso fornecidas nas interfaces public e protected da classe base. \line Um problema com a heran\'e7a \'e9 que uma classe derivada pode herdar implementa\'e7\'f5es de fun\'e7\'f5es membro public que ela n\'e3o necessita ter ou expressamente n\'e3o deveria ter. Quando uma implementa\'e7\'e3o de um membro de uma classe base \'e9 inadequada para uma classe derivada, aquele membro pode ser redefinido (ou sobrescrito) na classe derivada com uma implementa\'e7\'e3o adequada. Em alguns casos, a heran\'e7a public \'e9 simplesmente inadequada. \line Talvez mais excitante seja a no\'e7\'e3o de que novas classes podem herdar de bibliotecas de classes existentes. Organiza\'e7\'f5es desenvolvem suas pr\'f3prias bibliotecas de classes e tiram proveito de outras bibliotecas dispon\'edveis mundialmente. Algum dia, o software ser\'e1 constru\'eddo predominantemente a partir de componentes de software padronizados, exatamente como o hardware \'e9 freq\'fcentemente constru\'eddo hoje. Isto vai ajudar a enfrentar os desafios de desenvolver os softwares cada vez mais poderosos de que necessitaremos no futuro. \line 9.2 Heran\'e7a: classes base e classes derivadas \line Freq\'fcentemente, um objeto de uma classe realmente \ldblquote\'e9 um\rdblquote  objeto de uma outra classe tamb\'e9m. Um ret\'e2ngulo certamente \'e9 um quadril\'e1tero (como s\'e3o um quadrado, um paralelogramo e um trap\'e9zio). Desta maneira, pode-se dizer que a classe Retangulo herda da classe Quadrilatero. Neste contexto, a classe Quadrilatero \'e9 \par
\pard\par
\pard\sb100\sa240\lang1046\par
566 C++ COMO PROGRAMAR \line chamada de classe base e a classe Retangulo \'e9 chamada de classe derivada. Um ret\'e2ngulo \'e9 um tipo espec\'edfico de quadril\'e1tero, mas \'e9 incorreto afirmar que um quadril\'e1tero \'e9 um ret\'e2ngulo (o quadril\'e1tero poderia, por exemplo, ser um paralelogramo). A Fig. 9.1 mostra v\'e1rios exemplos simples de heran\'e7a. \par
Classe base Classes derivadas \par
Estudante EstudanteDePosGraduacao \line EstudanteDeGraduacao \line Forma Circulo \line Triangulo \line Retangulo \line Empres timo Empres timoCompraCarro \line EmprestimoReformaCasa \line Empres timoComHipoteca \line Employee Docente \line Funcionario \line Conta ContaCorrente \line ContaDePoupanca \line Fig. 9.1 Alguns exemplos simples de heran\'e7a. \line Outras linguagens de programa\'e7\'e3o orientadas a objetos, tais como Smalltalk e Java, usam terminologias diferentes: \line na heran\'e7a, a classe base \'e9 chamada de superclasse (representa um superconjunto de objetos) e a classe derivada \'e9 chamada de subclasse (representa um subconjunto de objetos). Como a heran\'e7a normalmente produz classes derivadas com mais caracter\'edsticas e recursos que suas classes base, os termos superciasse e subclasse podem ser confusos; evitaremos estes termos. Como objetos de classes derivadas podem ser pensados como objetos das suas classes base, isto implica que mais objetos est\'e3o associados com classes base e menos objetos est\'e3o associados com classes derivadas, de modo que \'e9 razo\'e1vel chamar classes base de \ldblquote superclasses\rdblquote  e classes derivadas de \ldblquote subclasses.\rdblquote  \line A heran\'e7a forma estruturas hier\'e1rquicas semelhantes a \'e1rvores. Um classe base existe em um relacionamento \line hier\'e1rquico com suas classes derivadas. Uma classe certamente pode existir por si pr\'f3pria, mas \'e9 quando uma classe \line MembroDaComunidade \line Empregado Estudante Graduado (heran\'e7a simples) \line Docente Funcionario (heran\'e7a simples) \line Administrador Professor (heran\'e7a simples) \line Profes sorAdmnis trador (heran\'e7a m\'faltipla) \line Fig. 9.2 Uma hierarquia de heran\'e7a para membros da comunidade universit\'e1ria. \par
CAPfTULO 9 - HERAN\'c7A 567 \line\'e9 usada com o mecanismo de heran\'e7a que essa classe se torna ou um classe base (que fornece atributos e comportamentos para outras classes) ou uma classe derivada (que herda atributos e comportamentos). \line Vamos desenvolver uma hierarquia de heran\'e7a simples. Uma comunidade universit\'e1ria t\'edpica tem milhares de pessoas que s\'e3o membros da comunidade. Estas pessoas consistem em empregados, estudantes e graduados (alunos que concluiram cursos de gradua\'e7\'e3o). Empregados s\'e3o ou docentes ou funcion\'e1rios. Docentes s\'e3o administradores (tais como diretores e chefes de departamentos) ou apenas professores. Isto nos d\'e1 a hierarquia de heran\'e7a mostrada na Fig. 9.2. Note que alguns administradores tamb\'e9m lecionam, de modo que usamos heran\'e7a m\'faltipla para formar a classe ProfessorAdministrador. Como estudantes freq\'fcentemente trabalham para suas universidades e como empregados freq\'fcentemente assistem a cursos a tamb\'e9m seria razo\'e1vel usar heran\'e7a m\'faltipla para criar uma classe chamada de EmpregadoEstudante. \line Uma outra hierarquia de heran\'e7a substancial \'e9 a hierarquia Shape da Fig. 9.3. Uma observa\'e7\'e3o comum entre os estudantes que est\'e3o aprendendo programa\'e7\'e3o orientada a objetos \'e9 a de que existem exemplos abundantes de hierarquias no mundo real. O que acontece \'e9 que estes estudantes simplesmente n\'e3o est\'e3o acostumados a classificar o mundo real desta maneira, de modo que \'e9 preciso alguma adapta\'e7\'e3o na sua maneira de pensar. \par
Fig. 9.3 Uma parte de uma hierarquia de classe Shape. \line Examinemos a sintaxe usada para indicar heran\'e7a. Para especificar que a classe EmpregadoComissionado derva-se da classe Employee, a classe EmpregadoComissionado seria tipicamente definida como segue \line class EmpregadoComissionado : public Employee \line Isto \'e9 chamado de heran\'e7a public e \'e9 o tipo de heran\'e7a mais comumente usado. Tamb\'e9m discutiremos heran\'e7a private e heran\'e7a protected. Com heran\'e7a public, os membros public e protected da classe base s\'e3o herdados como membros public e protected da classe derivada, respectivamente. Lembre-se de que esses membros private de uma classe base n\'e3o podem ser acessados a partir das classes derivadas daquela classe. Note que fun\'e7\'f5es friend n\'e3o s\'e3o herdadas. \line E poss\'edvel se tratar objetos da classe base e objetos da classe derivada de modo similar; o que h\'e1 em comum \line\'e9 expresso nos atributos e comportamentos da classe base. Objetos de qualquer classe derivada com heran\'e7a publie \line a partir de uma classe base comum podem todos ser tratados como objetos daquela classe base. Consideraremos \line muitos exemplos nos quais podemos tirar proveito deste relacionamento com uma facilidade de programa\'e7\'e3o n\'e3o \line dispon\'edvel em linguagens n\'e3o-orientadas a objetos, tais como C. \line 9.3 Membros protected \line Os membros publie de uma classe base podem ser acessados por todas as fun\'e7\'f5es no programa. Os membros private de uma classe base podem ser acessados somente pelas fun\'e7\'f5es membro e friends da classe base. \line Apresentamos o acesso protected como um n\'edvel de prote\'e7\'e3o intermedi\'e1rio entre o acesso public e o \line acesso private. Os membros protected de uma classe base podem ser acessados somente por membros e friends da classe base e por membros e friends de classes derivadas. Os membros de classes derivadas podem \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2605\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4838\pard\intbl Forma \cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4838\pard\intbl\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2605\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4838\pard\intbl FormaBiDimensional \cell FormaTriDixnens ional \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2605\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4838\pard\intbl ZIN \cell Z1 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2605\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4838\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 Circulo Quadrado Triangulo \cell Esfera Cubo Tetraedro \cell\row\pard\par
\pard\sb100\sa240 568 C++ COMO PROGRAMAR \line referenciar os membros public e protected da classe base simplesmente usando os nomes destes membros. Note que dados protected \ldblquote rompem\rdblquote  o encapsulamento - mudan\'e7as em membros protected de uma classe base podem requerer modifica\'e7\'f5es em todas as classes derivadas. \line Observa\'e7\'e3o de engenharia de software 9.1 \line ______ Em geral, declare membros de dados de uma classe como private e use protected somente como um \ldblquote\'faltimo recurso\rdblquote  quando os sistemas necessitem ser ajustados para satisfazer a requisitos de desempenho especiais. \line 9.4 Fazendo coer\'e7\'e3o de ponteiros de classe base para ponteiros de classe derivada \line Um objeto de um classe derivada publicamente tamb\'e9m pode ser tratado como um objeto de sua classe base correspondente. Isto possibilita algumas manipula\'e7\'f5es interessantes. Por exemplo, a despeito do fato de que tais objetos de diversas classes derivadas de uma classe base particular podem ser bem diferentes uns dos outros, ainda assim podemos criar um lista encadeada deles - repetindo: desde que os tratemos como objetos da classe base. Mas o inverso n\'e3o \'e9 verdadeiro: um objeto de classe base n\'e3o \'e9 tamb\'e9m, automaticamente, um objeto de uma classe derivada. \line Erro comum de programa\'e7\'e3o 9.1 \line Tratar um objeto de classe base como um objeto de uma classe derivada pode causar erros. \line O programador pode, contudo, usar uma coer\'e7\'e3o expl\'edcita para converter um ponteiro de uma classe base para um ponteiro de uma classe derivada. Este processo \'e9 freq\'fcentemente chamado de downcasting de ponteiro. Mas seja cuidadoso - se tal ponteiro deve ser derreferenciado, ent\'e3o o programador deve estar seguro de que esse tipo de ponteiro corresponde ao tipo do objeto para o qual ele aponta. Nosso tratamento nesta se\'e7\'e3o usa t\'e9cnicas amplamente dispon\'edveis na maioria dos compiladores. No Cap\'edtulo 21, revisitamos muitos desses t\'f3picos no contexto dos compiladores mais novos, que est\'e3o de acordo com as recentes especifica\'e7\'f5es de C++ padr\'e3o, tais como a identifica\'e7\'e3o de tipo em tempo de execu\'e7\'e3o (RTTI, run-time type identification), dynamic_cast e typeid. \line Erro comum de programa\'e7\'e3o 9.2 \line Fazer explicitamente uma coer\'e7\'e3o de um ponteiro de uma classe base, que aponta para um objeto da classe base, para um ponteiro de uma classe derivada e, ent\'e3o, referenciar membros da classe derivada que n\'e3o existem nesse objeto, pode levar a erros de l\'f3gica durante a execu\'e7\'e3o. \line Nosso primeiro exemplo \'e9 mostrado na Fig. 9.4. As linhas 1 a 43 mostram a defini\'e7\'e3o da classe Point e as defini\'e7\'f5es das fun\'e7\'f5es membros de Point. As linhas 44 a 106 mostram a defini\'e7\'e3o da classe Circie e as defini\'e7\'f5es das fun\'e7\'f5es membros de Circie. As linhas 107 a 147 mostram um programa de teste no qual demonstramos a atribui\'e7\'e3o de ponteiros de uma classe derivada para ponteiros de uma classe base e a coer\'e7\'e3o de ponteiros de uma classe base para ponteiros de uma classe derivada (freq\'fcentemente chamada de upcasting de ponteiro). \par
Fig. 9.4 Coer\'e7\'e3o de ponteiros da classe base para ponteiros da classe derivada - point . h (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx205\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4468\pard\intbl 1  2  3  4  5 \cell II Fig. 9.4: point.h  II Defini\'e7\'e3o da classe Point #ifndef POINTH  #define POINTH \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx205\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4468\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 6 \cell #include <iostream> \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx205\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4468\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 7 \cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx205\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4468\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 8 \cell using std::ostreain; \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx205\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4468\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 9 \cell\cell\row\pard\par
\pard\sb100\sa240 12 \line 13 \line 14 \line 15 \line 16 \line 17 \par
18 \line 19 \}; \line 20 \line 21 #endif \par
// construtor default \line // inicializa coordenadas \line // obt\'e9m coordenada x \line // obt\'e9m coordenada y \line acessados por classes derivadas \par
Fig. 9.4 Coer\'e7\'e3o de ponteiros da classe base para ponteiros da classe derivada - point . h (parte 2 de 2). \par
22 \line 23 \line 24 \line 25 \line 26 \line 27 \line 28 \line 29 \line 30 \line 31 \line 32 \line 33 \line 34 \line 35 \line 36 \par
37 \line 38 \line 39 \line 40 \line 41 \line 42 \line 43 \par
// Fig. 9.4: point.cpp \line // Fun\'e7\'f5es membro para a classe Point #include <iostream> \line #include \ldblquote point . h\rdblquote  \par
// Construtor para a classe Point \line Point::Point( int a, int b ) \{ setpoint( a, b ); \par
// Inicializa coordenadas x e y de Point void Point::setPoint( int a, int b \par
x = a; y = b; \par
// Envia Point p/a sa\'edda (c/operador de inser\'e7\'e3o em stream sobrecarregado) \par
ostream &operator\'ab( ostream &output, const Point &p \par
) \par
output \'ab \lquote E\rquote  \'ab p . x \'ab \ldblquote , \lquote  \'ab p . y \'ab \lquote ]; \par
return output; // possibilita chamadas encadeadas \par
Fig. 9.4 Coer\'e7\'e3o de ponteiros da classe base para ponteiros da classe derivada - point. cpp. \par
44 \line 45 \line 46 \line 47 \line 48 \par
1 \par
II Fig. 9.4: circle.h \line /1 Defini\'e7\'e3o da classe Circle #ifndef CIRCLEH \line #define CIRCLEH \par
49 #include <iostream> \par
50 \par
51 using std::ostream; \line 52 \line 53 #include <iomanip> \line 54 \par
55 using std: :ios; \line 56 using std::setiosflags; \line 57 using std::setprecision; \line 58 \par
public: \par
CAP\'cdTULO 9 - HERAN\'c7A 569 \par
10 class Point \line 11 friend ostream &operator\'ab( ostream &, const Point & ); \line Point( int = 0, int = O ); \line void setpoint( int, int ); \line int getX() const \{ return x; \} \line int getY() const \{ return y; \} \line protected: 1/ podem ser \line int x, y; /1 coordenadas x e y do Point \par
Fig. 9.4 Coer\'e7\'e3o de ponteiros da classe base para ponteiros da classe derivada - circle . h (parte 1 de 2). \par
570 C++ COMO PROGRAMAR \line 59 #include \ldblquote point.h\rdblquote  \line 60 \line 61 class Circle : public Point \{ II Circle herda de Point \line 62 friend ostream &operator\'ab( ostream &, const Circle & ); \line 63 public: \line 64 // construtor default \line 65 Circle( double r = 0.0, int x = 0, int y = O ); \line 66 \line 67 void setRadius( double ); // inicializa raio \line 68 double getRadius() const; // retorna raio \line 69 double area() const; // calcula \'e1rea \line 70 protected: \line 71 double radius; \line 72 \line 73 \line 74 #endif \line Fig. 9.4 Coer\'e7\'e3o de ponteiros da classe base para ponteiros da classe derivada - circle . h (parte 2 de 2). \line 75 II Fig. 9.4: circle.cpp \line 76 // Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe Circie \line 77 #include \ldblquote circle.h\rdblquote  \line 78 \line 79 II Construtor para Circle chama construtor para Point \line 80 II com um inicializador de membro e ent\'e3o inicializa raio. \line 81 Circle: :Circle( double r, int a, int b \line 82 : Point( a, b ) // chama construtor da classe base \line 83 \{ setRadius ( r ); \} \line 84 \line 85 // Inicializa raio de Circle \line 86 void Circle::setRadius( double r \line 87 \{ radius = ( r > O ? r : O ) ; \} \line 88 \line 89 // Obt\'e9m raio de Circle \line 90 double Circle::getRadius() const \{ return radius; \} \line 91 \line 92 // Calcula \'e1rea de Circle \line 93 double Circle: :area() const \line 94 \{ return 3.14159 * radius * radius; \line 95 \line 96 // Envia um Circle para a sa\'edda, no formato: \line 97 II Centro = [x, y]; Raio = \line 98 ostream &operator\'ab( ostream &output, const Circle &c \line 99 \line 100 output \'ab Centro = \'ab static_cast< Point >( c \line 101 \'ab \lquote ; Raio = \line 102 \'ab setiosflags( ios::fixed 1 ios::showpoint \line 103 \'ab setprecision( 2 ) \'ab c.radius; \line 104 \line 105 return output; II possibilita chamadas encadeadas \line 106 \} \line Fig. 9.4 Coer\'e7\'e3o de ponteiros da classe base para ponteiros da classe derivada - circle . cpp. \line Vamos primeiro examinar a defini\'e7\'e3o da classe Point. A interface public de Point inclui as fun\'e7\'f5es membro setPoint, getX e getY. Os membros de dados x e y de Point s\'e3o especificados como protected. Isto evita que objetos clientes de Point accessem diretamente os dados, mas permite \'e0s classes derivadas de Point o acesso \par
CAP\'cdTULO 9- HERAN\'c7A 571 \line direto aos membros de dados herdados. Se os dados fossem private, as fun\'e7\'f5es membro public de Point precisariam ser usadas para acessar os dados, mesmo pelas classes derivadas. Note que a fun\'e7\'e3o de operador de inser\'e7\'e3o em stream sobrecarregada de Point \'e9 capaz de referenciar as vari\'e1veis x e y diretamente, porque a fun\'e7\'e3o de operador sobrecarregada de inser\'e7\'e3o em stream \'e9 friend da classe Point. Note tamb\'e9m que \'e9 necess\'e1rio referenciar x e y atrav\'e9s de objetos, como em p. x e p . y. Isto ocorre porque a fun\'e7\'e3o de operador de inser\'e7\'e3o em stream sobrecarregada n\'e3o \'e9 uma fun\'e7\'e3o membro da classe Point, de modo que devemos usar um handie expl\'edcito para que o compilador saiba qual objeto estamos referenciando. Note que esta classe oferece as fun\'e7\'f5es membro public getX e getY em linha; assim, operator\'ab n\'e3o necessita ser friend para conseguir um bom desempenho. Contudo, fun\'e7\'f5es membro public necess\'e1rias podem n\'e3o ter sido fornecidas na interface publie de todas as classes, de modo que o uso de friends \'e9 freq\'fcentemente adequado. \line 107 II Fig. 9.4: figO9O4.cpp \line 108 II Coer\'e7\'e3o de ponteiros da classe base para ponteiros da classe derivada \line 109 #include <iostream> \line 110 \line 111 using std: :cout; \line 112 using std: :endl; \line 113 \line 114 #include <iomanip> \line 115 \line 116 #include \ldblquote point.h\rdblquote  \line 117 #include \ldblquote circle.h\rquote  \line 118 \line 119 int mamo \line 120 \line 121 Point *pointptr = 0, p( 30, 50 ); \line 122 Circle *circleptr = 0, c( 2.7, 120, 89 ); \line 123 \line 124 cout \'ab \ldblquote Point p: \'ab p \'ab \\nC\'edrculo e: \'ab c \'ab \lquote\\n\rquote ; \line 125 \line 126 1/ Trata um Circle como um Point (v\'ea somente a parte da classe base) \line 127 pomntPtr = &c; // atribui endere\'e7o de Circle a pointPtr \line 128 cout \'ab \lquote\\nC\'edrculo c (via *pointPtr): \line 129 \'ab *ppj \'ab \\n\rquote ; \line 130 \line 131 // Trata um Circie como um Circle (com alguma coer\'e7\'e3o) \line 132 // Faz coer\'e7\'e3o de ponteiro da classe base p/ponteiro da classe derivada \line 133 circlePtr = static_cast< Circle * >( pointPtr ); \line 134 cout \'ab \\nC\'edrculo c (via *circlePtr).\\n\rquote  \'ab \line 135 \'ab \ldblquote\\n\'c1rea de c (via circlePtr): \line 136 \'ab circlePtr->area() \'ab \lquote\\n; \line 137 \line 138 // PERIGOSO: Trata um Point como um Cirele \line 139 pointPtr = &p; 1/ atribui endere\'e7o de Point a pointPtr \line 140 \line 141 // Faz coer\'e7\'e3o de ponteiro da classe base p/ponteiro da classe derivada \line 142 circlePtr = static cast< Circle * >( pointPtr ); \line 143 cout \'ab \ldblquote\\nPonto p (via *circleptr) :\\n\rdblquote  \'ab *circleptr \line 144 \'ab \ldblquote\\n\'c1rea do objeto para o qual circlePtr aponta: \line 145 \'ab circlePtr->area() \'ab endl; \line 146 return 0; \line 147 \} \line Fig. 9.4 Coer\'e7\'e3o de ponteiros da classe base para ponteiros da classe derivada - figO 9 04 . cpp (parte 1 de 2). \par
572 C++ COMO PROGRAMAR \line Point p: [30, 50) \line C\'edrculo c: Centro = [120, 89); Raio = 2.70 \line C\'edrculo c (via *pointptr): [120, 89) \line C\'edrculo c (via *cjrcleptr): \line Centro = [120, 89]; Raio = 2.70 \line\'c1rea de e (via circleptr): 22.90 \line Point p (via *cjrcleptr): \line Centro = [30, 50]; Raio = 0.00 \line\'c1rea do objeto para o qual circlePtr aponta: 0.00 \line Fig. 9.4 Coer\'e7\'e3o de ponteiros da classe base para ponteiros da classe derivada - fig09 04 . cpp (parte 2 de 2). \line A classe Circle herda da classe Point por heran\'e7a p\'fablica. Isto \'e9 especificado na primeira linha da defini\'e7\'e3o da \line classe \line class Circie : public Point \{ II Circie herda de Point \line Os dois-pontos (:) no cabe\'e7alho da defini\'e7\'e3o da classe indica heran\'e7a. A palavra-chave public indica o tipo de heran\'e7a (na Se\'e7\'e3o 9.7, discutiremos heran\'e7a protected e private.) Todos os membros public e protected da classe Point s\'e3o herdados como membros public e protected, respectivamente, por uma classe Circle. Isto significa que a interface public de Circie inclui os membros public de Point, bem como os membros public de Circ].e area. setRadius e getRadius. \line O construtor de Circle deve invocar o construtor de Point para inicializar a parte da classe base Point de um objeto Circle. Isto \'e9 feito com um inicializador de membro (apresentado no Cap\'edtulo 7), como segue \line Circle::Circle( double r, int a, int b ) \line Point( a, b ) II chama construtor da classe base \line A segunda linha do cabe\'e7alho da fun\'e7\'e3o construtor invoca o construtor de Point por nome. Os valores a e b s\'e3o passados do construtor de Circle para o construtor de Point, para inicializar os membros x e y da classe base. Se o construtor de Circle n\'e3o invocou o construtor de Point explicitamente, o construtor default de Point seria invocado implicitamente, com os valores default para x e y (i.e., O e O). Se, neste caso, a classe Point n\'e3o forneceu um construtor default, o compilador acusaria um erro de sintaxe. Note que a fun\'e7\'e3o sobrecarregada de Circle operator\'ab \'e9 capaz de imprimir ou exibir a parte Point do Circie fazendo a coer\'e7\'e3o da refer\'eancia c para Circle para um Point. Isto resulta em uma chamada para o operator\'ab para Point e produz a sa\'edda das coordenadas x e y usando a formata\'e7\'e3o apropriada de Point. \line O programa de teste cria pointPtr como um ponteiro para um objeto Point e instancia o objeto Point p, ent\'e3o cria circ].ePtr como um ponteiro para um objeto Circle, e instancia o objeto Circle c. Os objetos p e c s\'e3o exibidos ou impressos, usando seus operadores de inser\'e7\'e3o em stream sobrecarregados, para mostrar que eles foram inicializados corretamente. Em seguida, o programa de teste atribui o ponteiro de uma classe derivada (o endere\'e7o do objeto c) para o ponteiro da classe base pointPtr e produz a sa\'edda do objeto Circie c usando operator\'ab para Point e o ponteiro *pointptr derreferenciado. Note que somente a \ldblquote parte Point\rdblquote  do objeto Circie e \'e9 exibida. Com heran\'e7a public, \'e9 sempre v\'e1lido atribuir o ponteiro de uma classe derivada a um ponteiro da classe base porque um objeto de uma classe derivada \'e9 um objeto da classe base. O ponteiro da classe base \ldblquote v\'ea\rdblquote  somente a parte da classe base do objeto de uma classe derivada. O compilador executa uma convers\'e3o impl\'edcita do ponteiro da classe derivada para um ponteiro da classe base. \line A seguir, o programa de teste demonstra a coer\'e7\'e3o de pointPtr de volta para um Circie . O resultado \line da opera\'e7\'e3o de coer\'e7\'e3o \'e9 atribu\'eddo a circlePtr, O objeto Circie c \'e9 exibido usando-se o operador sobrecarregado \par
CAP\'cdTULO 9 - HERAN\'c7A 573 \line de inser\'e7\'e3o em stream para Circie e o ponteiro derreferenciado *circleptr. A \'e1rea do objeto Circie c \'e9 exibida via circleptr. Isto resulta em um valor v\'e1lido de \'e1rea porque os ponteiros est\'e3o sempre apontando para um objeto Circie. \line Um ponteiro da classe base n\'e3o pode ser atribu\'eddo diretamente ao ponteiro de uma classe derivada, porque esta \line\'e9 uma atribui\'e7\'e3o inerentemente perigosa - ponteiros de uma classe derivada esperam estar apontando para objetos de \line uma classe derivada. O compilador n\'e3o executa uma convers\'e3o impl\'edcita neste caso. Usar uma coer\'e7\'e3o expl\'edcita informa ao compilador que o programador sabe que este tipo de convers\'e3o de ponteiro \'e9 perigoso - o programador assume \line a responsabilidade de usar o ponteiro apropriadamente, por isso o compilador permite a convers\'e3o perigosa. \line Em seguida, o programa de teste atribui um ponteiro da classe base (o endere\'e7o do objeto p) para o ponteiro da classe base pointPtr e faz uma coer\'e7\'e3o de pointPtr de volta para um Circie . O resultado da opera\'e7\'e3o de coer\'e7\'e3o \'e9 atribu\'eddo a circleptr. O objeto Point p \'e9 exibido usando-se operator\'ab para Circie e o ponteiro derreferenciado *circleptr. Note o valor zero exibido para o membro radius (o qual, na realidade, n\'e3o existe, porque circlePtr est\'e1 realmente apontando para um objeto Point). Exibir um Point como um Circie resulta em um valor indefinido (neste caso o zero) para radius porque os ponteiros est\'e3o sempre apontando para um objeto Point. Um objeto Point n\'e3o tem um membro radius. Portanto, o programa exibe qualquer valor que esteja na posi\'e7\'e3o de mem\'f3ria em que circleptr espera que o membro de dados radius esteja. A \'e1rea do objeto apontado por circlepPtr (objeto Point p) tamb\'e9m \'e9 exibida via circlePtr. Note que o valor para a \'e1rea \'e9 0.00, porque este c\'e1lculo \'e9 baseado no valor \ldblquote indefinido\rdblquote  de radius. Obviamente, acessar membros de dados que n\'e3o est\'e3o l\'e1 \'e9 perigoso. Chamar fun\'e7\'f5es membro que n\'e3o existem pode causar um erro fatal durante a execu\'e7\'e3o de um programa. \line Neste se\'e7\'e3o, mostramos a mec\'e2nica de convers\'f5es de ponteiros. Este material estabelece os fundamentos de \line que necessitaremos para nosso tratamento em maior profundidade da programa\'e7\'e3o orientada a objetos com polimorfismo, no pr\'f3ximo cap\'edtulo. \line 9.5 Usando fun\'e7\'f5es membro \line As fun\'e7\'f5es membro de uma classe derivada podem necessitar de acesso a certos membros de dados e fun\'e7\'f5es membro da classe base. \line\ul Observa\'e7\'e3o de engenharia de software 9.2 \ulnone\line Uma classe derivada n\'e3o pode acessar diretamente membros priva te de sua classe base. \line Este \'e9 um aspecto crucial da engenharia de software em C++. Se uma classe derivada pudesse acessar os membros \line ;e private da classe base, isto violaria a encapsulamento da classe base. Ocultar membros private \'e9 uma grande \line ajuda para o teste, a depura\'e7\'e3o e a modifica\'e7\'e3o correta de sistemas. Se uma classe derivada pudesse acessar mem a bros private da sua classe base, ent\'e3o tamb\'e9m seria poss\'edvel para as classes derivadas daquela classe derivada de acessar aqueles dados, e assim por diante. Isto iria propagar o acesso a dados que supostamente s\'e3o private, e os ia benef\'edcios do encapsulamento seriam perdidos ao longo da hierarquia de classe. \line da \line 9.6 Sobrescrevendo membros da classe base em uma classe derivada \line os \line ue Uma classe derivada pode sobrescrever (redefinir) uma fun\'e7\'e3o nieinbro da classe base, fornecendo uma nova vers\'e3o \line (o daquela fun\'e7\'e3o com a mesma assinatura (se as assinaturas fossem diferentes, isto seria uma sobrecarga de fun\'e7\'e3o e \line do n\'e3o uma sobrescrita de fun\'e7\'e3o). Quando essa fun\'e7\'e3o \'e9 mencionada por nome na classe derivada, a vers\'e3o da classe \line do derivada \'e9 automaticamente selecionada. O operador de resolu\'e7\'e3o de escopo pode ser usado para acessar a vers\'e3o da \line im classe base da classe derivada. \line se \line\'e3o \ul Erro comum de programa\'e7\'e3o 9.3 \ulnone\line Quando uma fun\'e7\'e3o membro de uma classe base \'e9 sobrescrita em uma classe derivada, \'e9 comum se fazer \line do a vers\'e3o da classe derivada chamar a vers\'e3o da classe base e fazer algum trabalho adicional. N\'e3o usar o \line do operador de resolu\'e7\'e3o de escopo para referenciar afun\'e7\'e3o membro da classe base causa recurs\'e3o infini \par
574 C++ COMO PROGRAMAR \par
ta, porque afun\'e7\'e3o membro da classe derivada na realidade chama a si pr\'f3pria. Isto, em algum momento, far\'e1 o sistema esgotar a mem\'f3ria, um erro fatal durante a execu\'e7\'e3o. \line Considere uma classe Employee simplificada. Ela armazena o firstName do empregado e o lastNa.me. Esta informa\'e7\'e3o \'e9 comum a todos os empregados, incluindo aqueles em classes derivadas da classe Employee. Da classe Employee derive agora as classes HourlyWorker, PieceWorker. Boss e ComissionWorker. O HourlyWorker \'e9 pago por hora, com adicional de cinq\'fcenta por cento para horas extras al\'e9m de 40 horas por semana. O PieceWorker recebe um valor fixo por item produzido - para simplificar, assuma que esta pessoa faz somente um tipo de item, assim os membros private de dados s\'e3o o n\'famero de itens produzidos e o valor pago por item. O Boss recebe um sal\'e1rio fixo por semana. O ComissionWorker recebe um pequeno sal\'e1rio base semanal fixo, mais uma porcentagem fixa das vendas brutas daquela pessoa durante a semana. Para simplificar, estudaremos somente a classe Employee e a classe derivada HourlyWorker. \line Nosso pr\'f3ximo exemplo \'e9 mostrado na Fig. 9.5. As linhas 1 a 50 mostram a defini\'e7\'e3o da classe Employee \line e as defini\'e7\'f5es das fun\'e7\'f5es membro de Employee. As linhas 51 a 106 mostram a defini\'e7\'e3o da classe HourlyWorker \line e a defini\'e7\'e3o das fun\'e7\'f5es membro de HourlyWorker. As linhas 107 a 117 mostram um programa de teste para a \line hierarquia de heran\'e7a Employee/HourlyWorker, que simplesmente instancia um objeto HourlyWorker, \line inicializa-o e chama a fun\'e7\'e3o membro print de HourlyWorker para imprimir os dados do objeto. \line 1 II Fig. 9.5: employ.h \line 2 II Defini\'e7\'e3o da classe Employee \line 3 #ifndef EMPLOYH \line 4 #define EMPLOYH \line 5 \line 6 class Employee \line 7 public: \line 8 Employee( const char , const char * ) II construtor \line 9 void print() const; II escreve primeiro e \'faltimo nomes \line 10 EmployeeO; II destruidor \line 11 private: \line 12 char *firstName; II string alocado dinaxnicamente \line 13 char *lastName; II string alocado dinamicamente \line 14 \line 15 \line 16 #endif \line Fig. 9.5 Sobrescrevendo membros de classe base em uma classe derivada - employ . h. \line 17 II Fig. 9.5: employ.cpp \line 18 II Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe Employee \line 19 #include <iostream> \line 20 \line 21 using std::cout; \line 22 \line 23 #include <cstring> \line 24 #include <cassert> \line 25 #include \ldblquote employ.h\rquote  \line 26 \line 27 // Construtor aloca dinamicaniente espa\'e7o para o \line 28 II primeiro e \'faltimo nomes e usa strcpy para copiar \line 29 II o primeiro e \'faltimos nomes para o objeto. \line 30 Employee::Employee( const char *first, const char *last \line 31 \{ \line 32 firstName = new char[ strlen( first ) + 1 ]; \line 33 assert( firstName != O ); II termina se n\'e3o foi alocado \line 34 strcpy( firstName, first ); \par
Fig. 9.5 Sobrescrevendo membros de classe base em uma classe derivada - employ. cpp (parte 1 de 2). \par
\par
\lang2070 574 C++ COMO PROGRAMAR \line ta, porque afun\'e7\'e3o membro da classe derivada na realidade chama a si pr\'f3pria. Isto, em algum momento, \line far\'e1 o sistema esgotar a mem\'f3ria, um erro fatal durante a execu\'e7\'e3o. \line Considere uma classe Employee simplificada. Ela armazena o firstNanie do empregado e o lastName. Esta informa\'e7\'e3o \'e9 comum a todos os empregados, incluindo aqueles em classes derivadas da classe Employee. Da classe Employee derive agora as classes HourlyWorker, PieceWorker, Boss e ComissionWorker. O HourlyWorker \'e9 pago por hora, com adicional de cinq\'fcenta por cento para horas extras al\'e9m de 40 horas por semana, O PieceWorker recebe um valor fixo por item produzido \emdash  para simplificar, assuma que esta pessoa faz somente um tipo de item, assim os membros private de dados s\'e3o o n\'famero de itens produzidos e o valor pago por item. O Boss recebe um sal\'e1rio fixo por semana. O ComissionWorker recebe um pequeno sal\'e1rio base semanal fixo, mais uma porcentagem fixa das vendas brutas daquela pessoa durante a semana. Para simplificar, estudaremos somente a classe Employee e a classe derivada HourlyWorker. \line Nosso pr\'f3ximo exemplo \'e9 mostrado na Fig. 9.5. As linhas 1 a 50 mostram a defini\'e7\'e3o da classe Employee \line e as defini\'e7\'f5es das fun\'e7\'f5es membro de Employee. As linhas 51 a 106 mostram a defini\'e7\'e3o da classe HourlyWorker \line e a defini\'e7\'e3o das fun\'e7\'f5es membro de HourlyWorker. As linhas 107 a 117 mostram um programa de teste para a \line hierarquia de heran\'e7a Employee/HourlyWorker. que simplesmente instancia um objeto HourlyWorker. \line inicializa-o e chama a fun\'e7\'e3o membro print de HourlyWorker para imprimir os dados do objeto. \line 1 II Fig. 9.5: employ.h \line 2 II Defini\'e7\'e3o da classe Employee \line 3 #ifndef EMPLOYH \line 4 #define EMPLOYH \line 5 \line 6 class Employee \line 7 public: \line 8 Employee( const char , const char * ) ; II construtor \line 9 void print() const; II escreve primeiro e \'faltimo nomes \line 10 EmployeeO; II destruidor \line 11 private: \line 12 char *fjrstNe; II string alocado dinamicamente \line 13 char *lastName; II string alocado dinamicamente \line 14 \line 15 \line 16 #endif \line Fig. 9.5 Sobrescrevendo membros de classe base em uma classe derivada \emdash  employ . h. \line 17 II Fig. 9.5: employ.cpp \line 18 II Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe Employee \line 19 #include <iostream> \line 20 \line 21 using std::cout; \line 22 \line 23 #include <cstring> \line 24 #include <cassert> \line 25 #include \ldblquote employ.h\rdblquote  \line 26 \line 27 II Construtor aloca dinamicamente espa\'e7o para o \line 28 II primeiro e \'faltimo nomes e usa strcpy para copiar \line 29 II o primeiro e \'faltimos nomes para o objeto. \line 30 Employee: :Employee( const char *first, const char *J.ast \line 31 \{ \line 32 firstName = new char[ strlen( first ) + 1 ]; \line 33 assert( firstName != O ); II termina se n\'e3o foi alocado \line 34 strcpy( firstName, first ); \line Fig. 9.5 Sobrescrevendo membros de classe base em uma classe derivada \emdash  employ. cpp (parte 1 de 2). \par
CAP\'cdTULO 9 \emdash  HERAN\'c7A 575 \line 35 \line 36 lastName = new char[ strlen( last ) + 1 ]; \line 37 assert( lastName ! 0 ); II termina se n\'e3o foi alocado \line 38 strcpy( lastName, last ); \line 39 ) \line 40 \line 41 // Escreve nome do empregado \line 42 void Employee::print() const \line 43 \{ cout \'ab firstName \'ab \'ab lastName; \line 44 \line 45 // Destruidor desaloca a mem\'f3ria alocada dinainicamente \line 46 Employee: :\emdash Employee() \line 47 \{ \line 48 delete [) firstName; II recupera mem\'f3ria din\'e2mica \line 49 delete [1 lastName; II recupera mem\'f3ria din\'e2mica \line 50 \} \line Fig. 9.5 Sobrescrevendo membros de classe base em uma classe derivada \emdash  employ. cpp (parte 2 de 2). \line A defini\'e7\'e3o da classe Employee consiste em dois membros de dados private char * \emdash  firstName e lastName \line\emdash  e tr\'eas fun\'e7\'f5es membro \emdash  um construtor, um destruidor e print. A fun\'e7\'e3o construtor recebe dois strings e aloca \line dinamicamente arrays de caracteres para armazenar os strings. Note que a macro assert (discutida no Cap\'edtulo \line 18) \'e9 usada para determinar se foi alocada mem\'f3ria para firstName e lastName. Se n\'e3o foi, o programa \line termina com uma mensagem de erro indicando a condi\'e7\'e3o testada, o n\'famero da linha no qual a condi\'e7\'e3o aparece e \line o arquivo no qual a condi\'e7\'e3o est\'e1 localizada. [Note, uma vez mais, que no padr\'e3o C++, new \ldblquote dispara\rdblquote  uma exce\'e7\'e3o \line se n\'e3o houver mem\'f3ria suficiente dispon\'edvel; discutimos isto no Cap\'edtulo 13.1 Como os dados de Employee s\'e3o \line private, a \'fanica forma de acesso aos dados \'e9 atrav\'e9s da fun\'e7\'e3o membro print, a qual simplesmente envia para \line a sa\'edda o primeiro nome e o \'faltimo nome do empregado. A fun\'e7\'e3o destruidor retorna a mem\'f3ria alocada dinamicamente para o sistema (para evitar uma \ldblquote perda de mem\'f3ria\rdblquote ). \line 51 II Fig. 9.5: hourly.h \line 52 // Defini\'e7\'e3o da classe HourlyWorker \line 53 #ifndef HOURLYH \line 54 #define HOURLYH \line 55 \line 56 #include \ldblquote employ.h\rdblquote  \line 57 \line 58 class HourlyWorker : public Employee \line 59 public: \line 60 HourlyWorker( const char*, const char*, double, do\'fcble ); \line 61 double getPay() const; II calcula e retorna sal\'e1rio \line 62 void print() const; II impress\'e3o da classe base sobrescrita \line 63 private: \line 64 double wage; II sal\'e1rio-hora \line 65 double hours; // horas trabalhadas na semana \line 66 \line 67 \line 68 #endif \line Fig. 9.5 Sobrescrevendo membros de classe base em uma classe derivada \emdash  hourly . h. \line 69 II Fig. 9.5: hourly.cpp \line 70 // Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe HourlyWorker \line 71 #include <iostream> \line 72 \line Fig. 9.5 Sobrescrevendo membros de classe base em uma classe derivada \emdash  hourly. cpp (parte 1 de 2). \par
576 C++ CoMo PROGRAMAR \line 73 using std::cout; \line 74 using std: :endl; \line 75 \line 76 #include <iomanip> \line 77 \line 78 using std::ios; \line 79 using std::setiosflags; \line 80 using std::setprecision; \line 81 \line 82 #include hourly.h\rdblquote  \line 83 \line 84 II Construtor para a classe HourlyWorker \line 85 HourlyWorker: :HourlyWorker( const char *first, \line 86 const char *last, \line 87 double initHours, double initWage ) A, \line 88 : Employee( first, last ) II chama construtor da classe base \line 89 \line 90 hours = initHours; II deveria validar \line 91 wage = initWage; // deveria validar \line 92 \line 93 \line 94 II Calcula o pagamento de HourlyWorker \line 95 double HourlyWorker: :getPay() const \{ return wage * hours; \line 96 \line 97 // Imprime o nome e o pagamento de HourlyWorker \line 98 void HourlyWorker: :print() const \line 99 \line 100 cout \'ab \lquote HourlyWorker: :print() est\'e1 sendo executada\\n\\n\rdblquote ; \line 101 Employee: :printO; II chama fun\'e7\'e3o print() da classe base \line 102 \line 103 cout \'ab \'e9 um horista com pagamento de $\ldblquote  \line 104 \'ab setiosflags ( ios: : fixed 1 ios: : showpoint \line 105 \'ab setprecision( 2 ) \'ab getPay() \'ab endl; \line 106 \line Fig. 9.5 Sobrescrevendo membros de classe base em uma classe derivada \emdash  hourly. cpp (parte 2 de 2). \line 107 /1 Fig. 9.5: figO9OS.cpp \line 108 /1 Sobrescrevendo uma fun\'e7\'e3o membro de \line 109 /1 uma classe base em uma classe derivada. \line 110 #include hourly.h\rdblquote  \line 111 \line 112 int mamo \line 113 \{ \line 114 HourlyWorker h( \ldblquote Jos\'e9\rdblquote , \ldblquote Silva\rdblquote , 40.0, 10.00 ); \line 115 h.printO; \line 116 return 0; \line 117 \} \line HourlyWorker: :print() est\'e1 sendo executada \line Jos\'e9 Silva \'e9 um horista com pagamento de $400.00 \line Fig. 9.5 Sobrescrevendo membros de classe base em uma classe derivada \emdash  figO 9_OS. cpp. \par
\lang1046\par
\lang2070 CAP\'cdTULO 9 - HERAN\'c7A 577 \line asse HourlyWorker herda da classe EmpJ.oyee por heran\'e7a public. Novamente, isto \'e9 especificado na \line ieira linha da defini\'e7\'e3o da classe, usando a nota\'e7\'e3o dois-pontos (:),como segue \line class HourlyWorker publie Employee \line aterface public de HourlyWorker inclui a fun\'e7\'e3o print de Employee e as fun\'e7\'f5es membro getpay e int de RourlyWorker. Note que a classe HourlyWorker define sua pr\'f3pria fun\'e7\'e3o print com o mesmo t\'f3tipo que Employee: : print () - este \'e9 um exemplo de sobrescrita de uma fun\'e7\'e3o. Portanto, a classe ?urlyWorker tem acesso a duas fun\'e7\'f5es print. A classe HourJ.yWorker tamb\'e9m cont\'e9m os membros de dos pr\'edvate wage e hours para calcular o sal\'e1rio semanal do empregado. \line O construtor de HourlyWorker usa a sintaxe de inicializador de membro para passar os strings first e st para o construtor de Employee, de modo que os membros da classe base possam ser inicializados, e ent\'e3o icializa os membros hours e wage. A fun\'e7\'e3o membro getPay calcula o sal\'e1rio do HourlyWorker. \line A fun\'e7\'e3o membro print de HourlyWorker sobrescreve fun\'e7\'e3o membro print de Employee. req\'fcentemente, fun\'e7\'f5es membro da classe base s\'e3o redefinidas em uma classe derivada para fornecer mais uncionalidade. As fun\'e7\'f5es redefinidas algumas vezes chamam a vers\'e3o da classe base da fun\'e7\'e3o para executar parte la nova tarefa. Neste exemplo, a fun\'e7\'e3o print da classe derivada chama a fun\'e7\'e3o print da classe base para mprimir o nome do empregado (print da classe base \'e9 \'fanica fun\'e7\'e3o com acesso aos dados private da classe aase). A fun\'e7\'e3o print da classe derivada tamb\'e9m envia para a sa\'edda o pagamento do empregado. Note como a vers\'e3o da classe base de print \'e9 chamada \line Employee: :printO; \line Como a fun\'e7\'e3o da classe base e a fun\'e7\'e3o da classe derivada t\'eam o mesmo nome e assinatura, a fun\'e7\'e3o da classe base deve ser precedida pelo nome de sua classe e o operador de resolu\'e7\'e3o de escopo. Caso contr\'e1rio, a vers\'e3o da fun\'e7\'e3o da classe derivada seria chamada, causando uma recurs\'e3o infinita (i.e., a fun\'e7\'e3o print de HourlyWorker chamaria a si pr\'f3pria). \line 9.7 Heran\'e7a public, protected e private \line Ao derivar uma classe a partir de uma classe base, a classe base pode ser herdada como public, protected ou private. O uso de heran\'e7a protected e private \'e9 raro e cada uma delas deveria ser usada somente com grande cuidado; normalmente, usamos heran\'e7a public neste livro (o Cap\'edtulo 15 demonstra a heran\'e7a private como uma outra forma de composi\'e7\'e3o). A Fig. 9.6 resume, para cada tipo de heran\'e7a, a acessibilidade dos membros de uma classe base em uma classe derivada. A primeira coluna cont\'e9m os especificadores de acesso a membro da classe base. \line Ao derivar uma classe a partir de uma classe base pubJ.ic, os membros public da classe base tornam-se membros public da classe derivada e membros protected da classe base tornam-se membros protected da classe derivada. Os membros private de uma classe base nunca s\'e3o acess\'e1veis diretamente a partir de um classe derivada, mas podem ser acessados atrav\'e9s de chamadas aos membros public e protected da classe base. \line Ao derivar a partir de uma classe base protected, os membros public e protected da classe base tornam-se membros protected da classe derivada. Ao derivar a partir de uma classe base private, os membros public e protected da classe base tornam-se membros private (por exemplo, as fun\'e7\'f5es tornam-se fun\'e7\'f5es utilit\'e1rias) da classe derivada. As heran\'e7as private e protected n\'e3o s\'e3o relacionamentos \ldblquote\'e9 um\rdblquote . \line 9.8 Classes base diretas e classes base indiretas \line Uma classe base pode ser uma classe base direta de uma classe derivada ou uma classe base pode ser uma classe base indireta de uma classe derivada. Uma classe base direta de uma classe derivada \'e9 explicitamente listada no cabe\'e7alho daquela classe derivada, com a nota\'e7\'e3o dois-pontos (:), quando essa classe derivada \'e9 declarada. Uma classe base indireta n\'e3o \'e9 explicitamente listada no cabe\'e7alho da classe derivada; em vez disso, a classe base indireta \'e9 herdada de dois ou mais n\'edveis acima na hierarquia de classes. \par
\pard\par
\pard\sb100\sa240 57X C++ COMO PROGRAMAR \par
Especificador de \line acesso a membro \line da classe base Tipo de heran\'e7a \par
Fig. 9.6 Resumo da accessibilidade de membros da classe base em uma classe derivada. \line 9.9 Usando construtores e destruidores em classes derivadas \line Como uma classe derivada herda os membros da sua classe base, quando um objeto de uma classe derivada \'e9 instanciado, o construtor da classe base deve ser chamado para inicializar os membros da classe base do objeto da classe derivada. Um inicializador da classe base (o qual usa a sintaxe de inicializador de membro que vimos) pode ser fornecido no construtor da classe derivada para chamar o construtor da classe base explicitamente; caso contr\'e1rio, o construtor classe derivada chamar\'e1 o construtor default da classe base implicitamente. \line Os construtores e os operadores de atribui\'e7\'e3o da classe base n\'e3o s\'e3o herdados pelas classes derivadas. Os construtores e operadores de atribui\'e7\'e3o da classe derivada, contudo, podem chamar os construtores e os operadores de atribui\'e7\'e3o da classe base. \line Um construtor de uma classe derivada sempre chama o construtor para sua classe base primeiro, para inicializar os membros da classe base da classe derivada. Se o construtor de uma classe derivada \'e9 omitido, o construtor default da classe derivada chama o construtor default da classe base. Destruidores s\'e3o chamados na ordem inversa das chamadas dos construtores, de modo que o destruidor de uma classe derivada \'e9 chamado antes do destruidor de sua classe base. \par
A Fig As lii \line prO \par
1 \line 2 \line 3 \line 4 \line 5 \line 6 \line 7 \line 8 \par
9 \line 1c \par
1\rquote  \par
F \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx778\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3517\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6554\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8946\pard\intbl\cell heran\'e7a public \cell heran\'e7a protected \cell heran\'e7a private \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx778\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3517\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6554\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8946\pard\intbl public \cell publidna classe derivada,  Pode ser acessado diretamente por qualquer fun\'e7\'e3o membro n\'e3o-static, fun\'e7\'f5es friend e fun\'e7\'e3o n\'e3o-membro. \cell protectedna classe derivada,  Pode ser acessado diretamente por todas as fun\'e7\'f5es membro n\'e3o-static e e fun\'e7\'f5es friend. \cell privatena classe derivada.  Pode ser acessado diretamente por todas as fun\'e7\'f5es membro n\'e3o-static e fun\'e7\'f5es friend. \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx778\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3517\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6554\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8946\pard\intbl protected \cell protected na classe derivada  Pode ser acessado diretamente por todas as fun\'e7\'f5es membro n\'e3o-static  e fun\'e7\'f5es friend. \cell protected na classe derivada,  Pode ser acessado diretamente por todas as fun\'e7\'f5es membros n\'e3o-static  e fun\'e7\'f5es friend. \cell private na classe derivada.  Pode ser acessado diretamente por todas as fun\'e7\'f5es membros n\'e3o-static e fun\'e7\'f5es friend. \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx778\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3517\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6554\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx8946\pard\intbl private \cell Oculto na classe derivada.  Pode ser acessado por fun\'e7\'f5es membro n\'e3o-static  e fun\'e7\'f5es friend atrav\'e9s de func\'f5es membro public ou protected da classe base. \cell Oculto na classe derivada.  Pode ser acessado fun\'e7\'f5es membro n\'e3o-static e fun\'e7\'f5es friend atrav\'e9s de fun\'e7\'f5es membros public ou protected da classe base. \cell Oculto na classe derivada.  Pode ser acessado por fun\'e7\'f5es membro n\'e3o-static  e fun\'e7\'f5es friend atrav\'e9s de fun\'e7\'f5es membro public ou protected da classe base. \cell\row\pard\par
\pard\sb100\sa240 CAP\'cdTULO 9 - HERAN\'c7A 579 \par
Observa\'e7\'e3o de engenharia de software 9.3 \line Suponha que criemos um objeto de uma classe derivada onde tanto a classe base como a classe derivada cont\'e9m objetos de outras classes. Quando um objeto daquela classe derivada \'e9 criado, primeiro s\'e3o executados os construtores dos objetos membros da classe base, depois \'e9 executado o construtor da classe base, a seguir os construtores dos objetos membros da classe derivada s\'e3o executados e, ent\'e3o, o construtor da classe derivada \'e9 executado. Destruidores s\'e3o chamados na ordem inversa \'e0quela em que seus construtores correspondentes s\'e3o chamados. \line Observa\'e7\'e3o de engenharia de software 9.4 \line A ordem na qual objetos membros s\'e3o constru\'eddos \'e9 a ordem na qual aqueles objetos s\'e3o declarados dentro da defini\'e7\'e3o da classe. A ordem na qual os inicializadores de membros s\'e3o listados n\'e3o afeta a ordem de constru\'e7\'e3o. \line Observa\'e7\'e3o de engenharia de software 9.5 \line Na heran\'e7a, os construtores\rquote  da clas,\'e7e base s\'e3o chamados na ordem na qual a heran\'e7a \'e9 especificada na defini\'e7\'e3o da classe derivada. A ordem na qual os construtores da classe base s\'e3o especificados na lista de inicializadores de membros da classe derivada n\'e3o afeta a ordem de constru\'e7\'e3o. \line A Fig. 9.7 demonstra a ordem na qual os construtores e destruidores de classes base e classes derivadas s\'e3o chamados. As linhas 1 a 39 mostram uma classe Point simples contendo um construtor, um destruidor e os membros de dados protected x e y. Tanto o construtor quanto o destruidor imprimem o objeto Point para o qual eles s\'e3o invocados. \line II Fig. 9.7: point2.h \line II Defini\'e7\'e3o da classe Point \line #ifndef POINT2H \line #define POINT2 H \line = O, int = O ); II construtor default \line II destruidor \line II pode ser acessado por classes derivadas \line 1/ coordenadas x e y de Point \line 14 #endif \line Fig. 9.7 Ordem na qual construtores e destruidores de classes base e classes derivadas s\'e3o chamados \line -point2 .h. \par
Fig. 9.7 Ordem na qual construtores e destruidores de classes base e classes derivadas s\'e3o chamados \line - point2 . cpp (parte 1 de 2). \par
1 \line 2 \line 3 \line 4 \line 5 \line 6 \line 7 \line 8 \line 9 \line 10 \line 11 \line 12 \line 13 \par
class Point \line public: \line Point( int \line -PointO; protected: \line int x, y; \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4368\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl 15 \cell 1/ Fig. 9.7: point2.cpp \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl 16 \cell 1/ Defini\'e7\'f5es de fun\'e7\'f5es \cell membro para a classe Point \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4368\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl 17 \cell #include <iostream> \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4368\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 18 \cell\cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4368\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 19 \cell using std::cout; \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4368\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 20 \cell using std: :endl; \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4368\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 21 \cell\cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4368\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 22 \cell #include \ldblquote point2.h\rquote  \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4368\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 23 \cell\cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl 24 \cell II Construtor para a classe Point \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2822\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4368\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5535\pard\intbl 25 \cell Point::Point( int a, int \cell b \cell\cell\row\pard\par
\pard\sb100\sa240 580 C++ COMO PROGRAMAR \line 26 \line 27 x=a; \line 28 y=b; \line 29 \line 30 cout \'ab Construtor de Point: \line 31 \'ab \lquote [\lquote  \'ab x \'ab \ldblquote , \'ab y \'ab ]\lquote  \'ab endl; \line 32 \line 33 \line 34 // Destruidor para a classe Point \line 35 Point: :-point() \line 36 \{ \line 37 cout \'ab \ldblquote Destruidor de Point: \line 38 \'ab \lquote [\lquote  \'ab x \'ab \ldblquote , \ldblquote  \'ab y \'ab \lquote ]\lquote  \'ab endl; \line 39 \} \line Fig. 9.7 Ordem na qual construtores e destruidores de classes base e classes derivadas s\'e3o chamados \line - point2 . cpp (parte 2 de 2). \line 40 II Fig. 9.7: circle2.h \line 41 II Defini\'e7\'e3o da classe Circle \line 42 #ifndef CIRCLE2H \line 43 #define CIRCLE2H \line 44 \line 45 #include \ldblquote point2.h\rdblquote  \line 46 \line 47 class Circie : public Point \line 48 public: \line 49 II construtor default \line 50 Circle( double r = 0.0, int x = 0, int y = O ); \line 51 \line 52 -CircleO; \line 53 private: \line 54 double radius; \line 55 \line 56 \line 57 #endif \line Fig. 9.7 Ordem na qual construtores e destruidores de classes base e classes derivadas s\'e3o chamados \line - circle2 . h. \line 58 II Fig. 9.7: circle2.cpp \line 59 // Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe Circle \line 60 #include <iostream> \line 61 \line 62 using std::cout; \line 63 using std::endl; \line 64 \line 65 #include \ldblquote circle2.h\rdblquote  \line 66 \line 67 II Construtor para Circle chama o construtor para Point \line 68 Circle::Circle( double r, int a, int b \line 69 : Point( a, b ) II chama o construtor da classe base \line 70 ( \line 71 radius = r; II deveria fazer valida\'e7\'e3o \line Fig. 9.7 Ordem na qual construtores e destruidores de classes base e classes derivadas s\'e3o chamados \line - circle2 . cpp (parte 1 de 2). \par
CAP\'cdTULO 9 - HERAN\'c7A 581 605 \line 72 cout \'ab \ldblquote Construtor de Circie: o raio \'e9 \ldblquote  obante \line 73 \'ab radius \'ab \ldblquote  [\ldblquote  \'ab x \'ab \ldblquote , \ldblquote  \'ab y \'ab \lquote ) \'ab endl; COfltj 7 \} \line 75 loum \line 76 // Destruidor para a classe Circle Lndoa \line 77 Circle: :-\lquote Circle() \line 78 \line 79 cout \'ab \ldblquote Destruidor de Circle: o raio \'e9 \line 80 \'ab radius \'ab \ldblquote  [\ldblquote  \'ab x \'ab \ldblquote , \ldblquote  \'ab y \'ab \lquote ]\lquote  \'ab endl; \line 81 \line Fig. 9.7 Ordem na qual construtores e destruidores de classes base e classes derivadas s\'e3o chamados eta \line - circle2 . cpp (parte 2 de 2). se \line As linhas 40 a 81 mostram uma classe Circle simples derivada de Point com heran\'e7a public. A classe Circle de oferece um construtor, um destruidor e um membro de dados private radius. Tanto o construtor quanto o destruidor imprimem o objeto Circle para o qual eles s\'e3o invocados, O construtor de Circle tamb\'e9m invoca o es- construtor de Point, usando sintaxe de inicializador de membro, e passa os valores a e b de modo que os membros de dados x e y da classe base possam ser inicializados. \line se \line 82 II Fig. 9.7: figO9O7.cpp \line 83 II Demonstra quando os construtores e destruidores \line 84 II de classes base e classes derivadas s\'e3o chamados, se \line 85 #include <iostream> \line 86 \line 87 using std::cout; \line 88 using std::endl; \line 89 \line 90 #include \ldblquote point2.h\rdblquote  \line 91 #include \ldblquote circle2.h\rdblquote  \line 92 \line 93 int mamo \line 94 \{ \line 95 II Mostra chamadas do construtor e do destruidor para Point \line 96 \{ \line 97 Point p( 11, 22 ) \line 98 \} \line 99 \line 100 cout \'ab endl; \line 101 Circle circlel( 4.5, 72, 29 ); \line 102 cout \'ab endl; \line 103 Circle circle2( 10, 5, 5 ); \line 104 cout \'ab endi; \line 105 return 0; \line 106 \line Construtor de Point: [11, 22) \line Destruidor de Point: [11, 22) \line Construtor de Point: [72, 29] \line Construtor de Circle: o raio \'e9 4.5 [72, 29] \line Construtor de Point: [5, 5] \line Construtor de Circle: o raio \'e9 10 [5, 5] \line Fig. 9.7 Ordem na qual construtores e destruidores de classes base e classes derivadas s\'e3o chamados \line - figO 9_07 . cpp (parte 1 de 2). \par
582 C++ COMO PROGRAMAR \par
Fig. 9.7 Ordem na qual construtores e destruidores de classes base e classes derivadas s\'e3o chamados \line - figO9 07 cpp (parte 2 de 2). \par
As linhas 82 a 106 s\'e3o o programa de teste para esta hierarquia Point/Circle. O programa come\'e7a por instanciar um objeto Point em seu pr\'f3prio escopo dentro de nain. O objeto entra e sai de escopo imediatamente, de modo que o construtor e o destruidor de Point s\'e3o ambos chamados. Em seguida, o programa instancia o objeto Circie circiel. [sto invoca o construtor de Point para executar a sa\'edda com valores passados pelo construtor de Circie, depois executa as sa\'eddas especificadas no construtor de Circie. O objeto Circie circle2 \'e9 instanciado em seguida. Novamente, os construtores de Point e Circie s\'e3o ambos chamados. Note que o corpo do construtor de Point \'e9 executado antes do corpo do construtor de Circie. O fim de inain \'e9 atingido, de modo que os destruidores s\'e3o chamados para os objetos circiel e circle2. Destruidores s\'e3o chamados na ordem inversa de seus construtores correspondentes. Portanto, o destruidor de Circie e o destruidor de Point s\'e3o chamados, nessa ordem, para o objeto circle2 e depois os destruidores de Circie e Point s\'e3o chamados, nessa ordem, para o objeto circiel. \par
9.10 Convers\'e3o impl\'edcita de objeto de classe derivada para objeto de classe base \par
A despeito do fato de que um objeto de uma classe derivada tamb\'e9m \ldblquote\'e9 um\rdblquote  objeto da classe base, o tipo da classe derivada e o tipo da classe base s\'e3o diferentes. Usando heran\'e7a public, objetos da classe derivada podem ser tratados como objetos da classe base. Isto faz sentido porque a classe derivada tem membros correspondentes a cada membro da classe base - lembre-se de que a classe derivada pode ter mais membros que a classe base. A atribui\'e7\'e3o na outra dire\'e7\'e3o n\'e3o \'e9 permitida porque a atribui\'e7\'e3o de um objeto da classe base a um objeto da classe derivada deixaria os membros adicionais da classe derivada indefinidos. Embora tal atribui\'e7\'e3o n\'e3o seja \ldblquote naturalmente\rdblquote  permitida, ela poderia se tornar leg\'edtima pelo fornecimento de um operador de atribui\'e7\'e3o apropriadamente sobrecarregado elou um construtor de convers\'e3o (ver Cap\'edtulo 8). Note que o que dizemos sobre ponteiros no resto desta se\'e7\'e3o tamb\'e9m se aplica a refer\'eancias. \par
Erro comum de programa\'e7\'e3o 9.4 \line Atribuir um objeto da classe derivada a um objeto de uma classe base correspondente e, ent\'e3o, tentar \line referenciar membros que s\'f3 existem na classe derivada no novo objeto da classe base \'e9 um erro de sintaxe. \par
Com heran\'e7a pubj.ic, um ponteiro para um objeto de uma classe derivada pode ser implicitamente convertido em um ponteiro para um objeto da classe base, porque um objeto de uma classe derivada \'e9 um objeto da classe base. \line H\'e1 quatro maneiras poss\'edveis de misturar e corresponder ponteiros de classe base e ponteiros de uma classe \line derivada com objetos da classe base e objetos da classe derivada: \par
1. Referenciar um objeto da classe base com um ponteiro da classe base \'e9 direto. \par
2. Referenciar um objeto de uma classe derivada com um ponteiro de uma classe derivada \'e9 direto. \par
3. \par
Referenciar um objeto de uma classe derivada com um ponteiro da classe base \'e9 seguro porque o objeto da classe derivada tamb\'e9m \'e9 um objeto de sua classe base. Tal c\'f3digo pode somente referenciar membros da classe base. Se este c\'f3digo referenciar membros que pertencem apenas \'e0 classe derivada atrav\'e9s do ponteiro da classe base, o compilador reportar\'e1 um erro de sintaxe. \par
4. Referenciar um objeto da classe base com um ponteiro de uma classe derivada \'e9 um erro de sintaxe. O ponteiro da classe derivada deve primeiro ser convertido (por coer\'e7\'e3o) para um ponteiro da classe base. \par
Destruidor de Circie: o raio \'e9 10 [5, 5) \line Destruidor de Point: [5 5) \line Destruidor de Circie: o raio \'e9 4.5 [72, 29) \line Destruidor de Point: [72, 29) \par
CAP\'cdTULO 9 - HERAN\'c7A 583 \line Erro comum de programa\'e7\'e3o 9.5 \line Fazer a coer\'e7\'e3o de um ponteiro da classe base para um ponteiro de uma classe derivada pode causar erros se esse ponteiro \'e9 depois usado para referenciar um objeto da classe base que n\'e3o tem os membros desejados da classe derivada. \line Por mais conveniente que seja tratar objetos da classe derivada como objetos da classe base e fazer isto pela manipula\'e7\'e3o de todos estes objetos com ponteiros da classe base, h\'e1 um problema. Em um sistema de folha de pagamento, por exemplo, gostar\'edamos de poder caminhar atrav\'e9s da uma lista encadeada de empregados e calcular o pagamento semanal para cada pessoa. Mas usar ponteiros de classe base permite ao programa chamar somente a rotina de c\'e1lculo da folha de pagamento para a classe base (se de fato existisse uma rotina tal na classe base). Necessitamos de uma maneira de invocar a rotina de c\'e1lculo da folha de pagamento apropriada para cada objeto, quer seja um objeto da classe base ou um objeto da classe derivada, e fazer isto simplesmente usando o ponteiro da classe base. A solu\'e7\'e3o \'e9 usar fun\'e7\'f5es virtuais e polimorfismo, como ser\'e1 discutido no Cap\'edtulo 10. \line 9.11 Engenharia de software com heran\'e7a \line Podemos usar a heran\'e7a para customizar software existente. Herdamos os atributos e comportamentos de uma classe existente, ent\'e3o adicionamos atributos e comportamentos (ou redefinimos comportamentos da classe base) para customizar a classe para atender \'e0s nossas necessidades. Isto \'e9 feito em C++ sem a classe derivada ter acesso ao c\'f3digo fonte da classe base, mas a classe derivada necessita ser capaz de se \ldblquote ligar\rdblquote  com o c\'f3digo objeto da classe base. Este poderoso recurso \'e9 atraente para fornecedores de software independentes (ISVs, independent software vendors). Os lSVs podem desenvolver classes propriet\'e1rias para venda ou licen\'e7a e tornar estas classes dispon\'edveis para os usu\'e1rios em forma de c\'f3digo objeto. Os usu\'e1rios podem ent\'e3o derivar novas classes destas bibliotecas de classes rapidamente, sem acessar o c\'f3digo-fonte de propriedade do ISV. Tudo que os ISVs necessitam fornecer com o c\'f3digo objeto s\'e3o os arquivos de cabe\'e7alho. \line Observa\'e7\'e3o de engenharia de software 9.6 \line _______ Na teoria, os usu\'e1 rios n\'e3o necessitam ver o c\'f3digo-fonte das classes do qual eles herdam. Na pr\'e1tica, as pessoas que licenciam classes nos dizem que os consumidores freq\'fcentemente pedem o c\'f3digo-fonte. Os programadores ainda parecem relutantes quanto a incorporar c\'f3digo em seus programas, quando este c\'f3digo foi escrito por outras pessoas. \line Dica de desempenho 9.1 \line f Quando o desempenho for uma preocupa\'e7\'e3o importante, os programadores podem querer ver o c\'f3digofrmte das classes das quais eles est\'e3o herdando, de modo que possam ajustar o c\'f3digo para atender seus \line a requisitos de desempenho. \line Pode ser dif\'edcil para os estudantes avaliar os problemas enfrentados por projetistas e implementadores em projetos de software de grande porte. Pessoas experientes em tais projetos invariavelmente afirmar\'e3o que uma t\'e9cnica fundamental para melhorar o processo de desenvolvimento de software \'e9 a reutiliza\'e7\'e3o de software. A programa\'e7\'e3o orientada a objetos, em geral, e C+\'f7, em particular, certamente fazem isto. \line A disponibilidade de bibliotecas de classes substanciais e \'fateis gera os m\'e1ximos benef\'edcios da reutiliza\'e7\'e3o de software atrav\'e9s da heran\'e7a. A medida que cresce o interesse em C++, o interesse em bibliotecas de classes est\'e1 aumentando exponencialmente. Assim como software empacotado produzido por fornecedores independentes de software tornou-se uma ind\'fastria de crescimento explosivo com a chegada do computador pessoal, assim, tamb\'e9m, \'e9 a cria\'e7\'e3o e venda de bibliotecas de classes. Projetistas de aplica\'e7\'f5es est\'e3o construindo suas aplica\'e7\'f5es com estas bibliotecas, e projetistas de bibliotecas est\'e3o sendo recompensados por ter suas bibliotecas empacotadas com aplica\'e7\'f5es. As bibliotecas, que atualmente est\'e3o sendo fornecidas com compiladores C++ tendem a ser de finalidade geral e escopo limitado. O que est\'e1 acontecendo \'e9 um esfor\'e7o mundial de grandes propor\'e7\'f5es para o desenvolvimento de bibliotecas de classes para uma ampla variedade de campos de aplica\'e7\'f5es. \par
CAP\'cdTULO 9 HERAN\'c7A 585 \line Observa\'e7\'e3o de engenharia de software 9.11 \line ______ Modifica\'e7\'f5es de programas em uma classe que \'e9 um membro de unia outra classe n\'e3o requerem que a classe englobante mude, desde que a inteiface public da classe membro permane\'e7a inalterada. Note \line que a classe composta pode, contudo, precisar ser recompilada. \line 9.13 Relacionamentos \ldblquote usa um\rdblquote  e \ldblquote conhece um\rdblquote  \line Tanto a heran\'e7a como a composi\'e7\'e3o encorajam a reutiliza\'e7\'e3o de software pela cria\'e7\'e3o de novas classes que t\'eam muito em comum com classes existentes. Existem outras maneiras de utilizar os servi\'e7os de classes. Embora um objeto pessoa n\'e3o seja um carro e um objeto pessoa n\'e3o contenha um carro, um objeto pessoa certamente usa um carro. Uma fun\'e7\'e3o usa um objeto simplesmente chamando uma fun\'e7\'e3o membro n\'e3o-pr\'edvate daquele objeto, usando um ponteiro, refer\'eancia ou o pr\'f3prio nome do objeto. \line Um objeto pode ter conhecimento de um outro objeto. Redes de conhecimento freq\'fcentemente t\'eam tais relacionamentos. Um objeto pode conter um handie ponteiro ou um handie refer\'eancia para um outro objeto para ter conhecimento daquele objeto. Neste caso, diz-se que um objeto tem um relacionamento conhece um com o outro objeto; isto, \'e0s vezes, \'e9 chamado de associa\'e7\'e3o. \line 9.14 Estudo de caso: ponto, c\'edrculo e cilindro \line Agora, vamos ver o exerc\'edcio de coroamento deste cap\'edtulo. Consideremos uma hierarquia formada por ponto, c\'edrculo e cilindro. Primeiro, desenvolvemos e usamos a classe Po\'ednt (Fig. 9.8). A seguir, apresentamos um exemplo no qual derivamos a classe Circie a partir da classe Point (Fig. 9,9). Finalmente, apresentamos um exemplo no qual derivamos a classe Cylinder a partir da classe Circie (Fig. 9.10). \line A Figura 9.8 mostra a classe Point. As linhas 1 a 42 cont\'eam a defini\'e7\'e3o do arquivo de cabe\'e7alho e do arquivo de implementa\'e7\'e3o da classe Point. Note que os membros de dados de Point s\'e3o protected. Desta maneira, quando a classe Circie \'e9 derivada da classe Point, as fun\'e7\'f5es membro da classe Circie ser\'e3o capazes de referenciar diretamente as coordenadas x e y, em vez de usar fun\'e7\'f5es de acesso. Isto pode resultar em um melhor desempenho. \line As linhas 43 a 64 s\'e3o o programa de teste para a classe Point. Note que inain deve usar as fun\'e7\'f5es de acesso getX e getY para ler os valores dos membros de dados protected x e y; lembre-se de que esses membros de dados protected est\'e3o acess\'edveis somente para membros e friends de sua classe e membros e friends de suas classe derivadas. \line 1 /1 Fig. 9.8: point2.h \line 2 1/ Defini\'e7\'e3o da classe Point \line 3 #ifndef POINT2H \line 4 #define POINT2H \line 5 \line 6 #include <iostream> \line E 7 \line 8 using std::ostream; \line 9 \line 10 class Point \line 11 friend ostream &operator\'ab( ostreani &, const Point & ); \line 12 public: \line 13 Point( int = 0, \'ednt = O ); 1/ construtor default \line 14 void setPoint( int, int ); 1/ inicializa coordenadas \line 15 int getX() const \{ return x; II obt\'e9m coordenada x \line 16 int gety() const \{ return y; \} /1 obt\'e9m coordenada y \line 17 protected: li pode ser acessado por classes derivadas \line 18 int x, y; /1 coordenadas do ponto \line 19 ); \line 20 \line 21 #endif \line Fig. 9.8 Demonstrando a c\rquote asse Po\'ednt - point2 . h. \par
586 C++ COMO PROGRAMAR \line 22 II Fig. 9.8: point2.cpp \line 23 // Defini\'e7\'f5es de fun\'e7\'f5es menbro para a classe Point \line 24 #include \ldblquote point2.h\rdblquote  \line 25 \line 26 li Construtor para a classe Point \line 27 Point: :Point( int a, int b ) setPoint( a, b ); \} \line 28 \line 29 II Inicializa as coordenadas x e y \line 30 void Point::setPoint( int a, int b \line 31 \line 32 x=a \line 33 y=b; \line 34 \line 35 \line 36 II Envia o Point para a sa\'edda \line 37 ostreani &operator\'ab( ostreain &output, const Point &p \line 38 \line 39 output \'ab \lquote E\rquote  \'ab p.zc \'ab \ldblquote , \ldblquote  \'ab p.y \'ab \lquote ); \line 40 \line 41 return output; /1 possibilita encadeamento \line 42 \par
Fig. 9.8 Demonstrando a classe Point - fig\'f89 08 . cpp. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl Fig. 9.8 Demonstrando a classe Point - point2 . cpp. \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 43 Ii Fig. 9.8: fig09_08.cpp \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 44 II Programa para testar a classe Point \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 45 #include <iostream> \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 46 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 47 using std::cout; \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 48 using std::endl; \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 49 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 50 #include \ldblquote point2.h\rdblquote  \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 51 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 52 int mamo \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 53 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 54 Point p( 72, 115 ); // instancia objeto Point p \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 55 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 56 /1 dados protected de Point inacess\'edveis para main \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 57 cout \'ab \ldblquote Coordenada X \'e9 \ldblquote  \'ab p.getX() \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 58 \'ab \ldblquote\\riCoordenada Y \'e9 \ldblquote  \'ab p.getYO; \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 59 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 60 p.setPoint( 10, 10 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 61 cout \'ab \ldblquote\\n\\nA nova posi\'e7\'e3o de p \'e9 \ldblquote  \'ab p \'ab endi; \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 62 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 63 return 0; \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl 64 ) \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl Coordenada X \'e9 72 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl Coordenada Y \'e9 115 \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5269\pard\intbl A nova posi\'e7\'e3o de p \'e9 [10, 10] \cell\row\pard\par
\pard\sb100\sa240 CAP\'cdTULO 9- HERAN\'c7A 587 \line Nosso pr\'f3ximo exemplo \'e9 mostrado na Fig. 9.9. A defini\'e7\'e3o da classe Point e as defini\'e7\'f5es das fun\'e7\'f5es membro da Fig. 9.8 s\'e3o reutilizadas aqui. As linhas 1 a 62 mostram a defini\'e7\'e3o da classe Circle e as defini\'e7\'f5es das fun\'e7\'f5es membro de Circie. As linhas 63 a 90 s\'e3o o programa de teste para a classe Circle. Note que a classe Circle herda da classe Point por heran\'e7a public. Isto significa que a interface public para Circie inclui as fun\'e7\'f5es membro de Point, bem como as fun\'e7\'f5es membro de Circie setRadius. getRadius e area. \line 1 1/ Fig. 9.9: circle2.h \line 2 li Defini\'e7\'e3o da classe Circle \line 3 #ifndef CIRCLE2H \line 4 #define CIRCLE2 \line 5 \line 6 #include <iostream> \line 7 \line 8 using std: :ostream; \line 9 \line 10 #include \lquote point2.h \line 11 \line 12 class Circie : public Point \line 13 friend ostream &operator\'ab( ostream &, const Circle & ); \line 14 public: \line 15 // construtor default \line 16 Circle( double r = 0.0, int x = 0, int y = O ); \line 17 void setRadius ( double ); /1 inicializa o raio \line 18 double getRadius() const; 1/ retorna o raio \line 19 double area() const; /1 calcula a \'e1rea \line 20 protected: 1/ pode ser acessado por classes derivadas \line 21 double radius; // raio de Circle \line 22 \line 23 \line 24 #endif \line Fig. 9.9 Demonstrando a classe Circie - circle2 . h. \line 25 li Fig. 9.9: circle2.cpp \line 26 1/ Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe CircJ.e \line 27 #include <iomanip> \line 28 \line 29 using std: :ios; \line 30 using std;:setiosflags; \line 31 using std::setprecision; \line 32 \line 33 #include \ldblquote circle2.h\rdblquote  \line 34 \line 35 // Construtor para Circie chama o construtor para Point \line 36 /1 com um inicializador de membro e inicializa o raio \line 37 Circle::Circle( double r, int a, int b \line 38 : Point( a, b ) // chama o construtor da classe base \line 39 ( setRadius ( r ); \} \line 40 \line 41 1/ Inicializa o raio \line 42 void Circle::setRadius( double r \line 43 \{ radius = ( r > O ? r : O ) ; \} \line 44 \line 45 II Obt\'e9m o raio \line 46 double Circle::getRadius() const \{ return radius; \} \line Fig. 9.9 Demonstrando a classe Circle - circle2 . ccp (parte 1 de 2). \par
588 C++ CoMo PROGRAMAR \line 47 \line 48 // Calcula a \'e1rea do c\'edrculo \line 49 double Circle: :area() const \line 50 \{ return 3.14159 * radius * radius; \line 51 \line 52 1/ Envia um c\'edrculo para a sa\'edda, no formato: \line 53 II Centro = [x, y]; Raio = \line 54 ostream &operator\'ab( ostream &output, const Circle &c \line 55 \{ \line 56 output \'ab \ldblquote Centro = \ldblquote  \'ab static_cast< Point > ( c \line 57 \'ab \lquote ; Raio = \line 58 \'ab setiosflags( ios::fixed 1 ios::showpoint \line 59 \'ab setprecision( 2 ) \'ab c.radius; \line 60 \line 61 return output; II possibilita chamadas encadeadas \line 62 \} \line Fig. 9.9 Demonstrando a classe Circle - circle2 . cpp (parte 2 de 2). \line 63 // Fig. 9.9: figo9_09.cpp \line 64 // Programa para testar a classe Circle \line 65 #include <iostream> \line 66 \line 67 using std: :cout; \line 68 using std::endl; \line 69 \line 70 #include \ldblquote point2.h\rdblquote  \line 71 #include \ldblquote circle2.h\rquote  \line 72 \line 73 int mamo \line 74 \{ \line 75 Circle c( 2.5, 37, 43 ); \line 76 \line 77 cout \'ab \ldblquote A coordenada X \'e9 \ldblquote  \'ab c.getX() \line 78 \'ab \ldblquote\\nA coordenada Y \'e9 \ldblquote  \'ab c.getYO) \line 79 \'ab \ldblquote\\nO raio \'e9 \lquote  \'ab c.getRadiusO); \line 80 \line 81 c.setRadius( 4.25 ); \line 82 c.setPoint( 2, 2 ); \line 83 cout \'ab \ldblquote\\n\\nA nova posi\'e7\'e3o e o raio de c s\'e3o\\n\rdblquote  \line 84 \'ab c \'ab \lquote\\n\'c1rea \ldblquote  \'ab c.area() \'ab \lquote\\n\rquote ; \line 85 \line 86 Point &pRef = c; \line 87 cout \'ab \lquote\\nCircle impresso como um Point \'e9: \ldblquote  \'ab pRef \'ab endi; \line 88 \line 89 return 0; \line 90 \} \par
Fig. 9.9 Demonstrando a classe Circle - figO 9_09 . cpp. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx1645\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2534\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3231\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4312\pard\intbl A coordenada X \'e9 \cell 37 \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx1645\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2534\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3231\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4312\pard\intbl A coordenada Y \'e9 \cell 43 \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx1645\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2534\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4312\pard\intbl O raio \'e9 2.5 \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx1645\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2534\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3231\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4312\pard\intbl A nova posi\'e7\'e3o e \cell o raio \cell de c \cell s\'e3o \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx1645\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2534\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3231\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4312\pard\intbl Centro = [2, 2]; \cell Raio = \cell 4.25 \cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx1645\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2534\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3231\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4312\pard\intbl\'c1rea 56.74 \cell\cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx1645\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2534\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3231\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4312\pard\intbl Circle impresso \cell como um \cell Point \cell\'e9: [2, 2) \cell\row\pard\par
\pard\sb100\sa240 CAP\'cdTULO 9 - HERAN\'c7A 589 \line Note que a fun\'e7\'e3o sobrecarregada de Circle operator\'ab, a qual \'e9 um friend da classe Circie, \'e9 capaz de exibir a parte Point de Circle fazendo uma coer\'e7\'e3o da refer\'eancia e de Circie para um Point. Isto resulta uma chamada a operator\'ab para Point e produz a sa\'edda das coordenadas x e y usando a formata\'e7\'e3o apropriada para Point. \line O programa de teste instancia um objeto da classe Circie e ent\'e3o usa fun\'e7\'f5es get para obter as informa\'e7\'f5es sobre o objeto Circie. Novamente, main n\'e3o \'e9 nem uma fun\'e7\'e3o membro nem um friend da classe Circle, de modo que ela n\'e3o pode referenciar diretamente os dados protected da classe Circle. O programa de teste usa ent\'e3o as fun\'e7\'f5es set setRadius e setPoint para reinicializar o raio e as coordenadas do centro do c\'edrculo. Finalmente, o programa de teste inicializa a vari\'e1vel refer\'eancia pRef do tipo \ldblquote refer\'eancia para objeto Point\rdblquote  (Point &) para o objeto Circie e. O programa de teste ent\'e3o imprime pRef. a qual, a despeito do fato de estar inicializada com um objeto Cirele. \ldblquote pensa\rdblquote  que \'e9 um objeto Point, de modo que o objeto Circie na verdade \'e9 impresso como um objeto Point. \line Nosso \'faltimo exemplo \'e9 mostrado na Fig. 9.10. As defini\'e7\'f5es da classe Point, da classe Circie e as defini\'e7\'f5es de suas fun\'e7\'f5es membro das Figs. 9.8 e 9.9 s\'e3o reutilizadas aqui. As linhas 1 a 65 mostram a defini\'e7\'e3o da classe Cylinder e as defini\'e7\'f5es das fun\'e7\'f5es membro de Cylinder. As linhas 66 a 109 s\'e3o o programa de teste para a classe Cylinder. Note que a classe Cylinder herda da classe Circle por heran\'e7a public. Isto significa que a interface public para Cylinder inclui as fun\'e7\'f5es membro de Circie e as fun\'e7\'f5es membro de Point, bem como as fun\'e7\'f5es membro de Cylinder setHeight, getHeight, area (redefinida de Circie) e volume. Note que o construtor de Cylinder \'e9 necess\'e1rio para invocar o construtor de sua classe base direta Cirele. mas n\'e3o da sua classe base indireta Point. O construtor de cada classe derivada somente \'e9 respons\'e1vel por chamar os construtores da classe base imediata daquela classe (ou classes, no caso de heran\'e7a m\'faltipla). Al\'e9m disso, note que a fun\'e7\'e3o sobrecarregada de Cylinder, operator\'ab, a qual \'e9 um friend da classe Cylinder, \'e9 capaz de exibir a parte Circie do Cylinder fazendo uma coer\'e7\'e3o da refer\'eancia e a Cylinder para um Circie. Isto resulta em uma chamada a operator\'ab de Circie e produz a sa\'edda das coordenadas x e y e do raio usando a formata\'e7\'e3o apropriada para Circle. \line O programa de teste instancia um objeto da classe Cylinder e ent\'e3o usa fun\'e7\'f5es get para obter a informa\'e7\'e3o sobre o objeto Cylinder. Novamente, main n\'e3o nem uma fun\'e7\'e3o membro nem um friend da classe Cylinder. assim ela n\'e3o pode referenciar diretamente os dados protected da classe Cylinder. O programa de teste ent\'e3o usa fun\'e7\'f5es sei\rquote  setHeight, setRadius e inicializaPoint para reinicializar a altura, raio e coordenadas do cilindro. Finalmente, o programa de teste inicializa a vari\'e1vel refer\'eancia pRef do tipo \ldblquote refer\'eancia para objeto Point\rdblquote  (Point &) para o objeto Cylinder cyl. Ele ent\'e3o imprime pRef, a qual, a despeito do fato que est\'e1 inicializada com um objeto Cylinder, \ldblquote pensa\rdblquote  que \'e9 um objeto Point, assim o objeto Cylinder na realidade \'e9 impresso como um objeto Point. O programa de teste ent\'e3o inicializa vari\'e1vel refer\'eancia circleRef do tipo \ldblquote refer\'eancia para objeto Circie\rdblquote  (Circie &) para o objeto Cylinder cyl. O programa de teste ent\'e3o imprime circleRef a qual, o despeito do fato de estar inicializada com um objeto Cylinder. \ldblquote pensa\rdblquote  que \'e9 um objeto Circle, assim o objeto Cylinder na realidade \'e9 impresso como um objeto Circie. A \'e1rea do Circie tamb\'e9m \'e9 impressa. \line Este exemplo demonstra de maneira f\'e1cil a heran\'e7a public e a defini\'e7\'e3o e referenciamento de membros de dados protected. O leitor, agora, deveria se sentir seguro acerca dos fundamentos da heran\'e7a. No pr\'f3ximo cap\'edtulo, mostramos como programar hierarquias de heran\'e7a de uma maneira gen\'e9rica, usando polimorfismo. Abstra\'e7\'e3o de dados, heran\'e7a e polimorfismo s\'e3o o ponto crucial da programa\'e7\'e3o orientada a objetos. \par
Fig. 9.10 Demonstrando a classe Cylinder - cylindr2 .h (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5959\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6944\pard\intbl 1  2  3  4  5 \cell 1/ Fig. 9.10: cylindr2.  // Defini\'e7\'e3o da classe #ifndef CYLINDR2H #define CYLINDR2H \cell h  Cylinder \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5959\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6944\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 6 \cell #include <iostreain> \cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5959\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6944\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 7 \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5959\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6944\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 8  9 \cell using std: :ostream; \cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5959\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6944\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 10 \cell #include \ldblquote circle2.h\'b0 \cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx301\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx5959\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6944\pard\intbl\brdrl\brdrs\brdrw10 \brdrt\brdrs\brdrw10 \brdrr\brdrs\brdrw10 \brdrb\brdrs\brdrw10 11 \cell\cell\cell\row\pard\par
\pard\sb100\sa240 14 \line 15 \line 16 \line 17 \line 18 \line 19 \line 20 void setHeight( double ); II inicializa altura \line 21 double getHeight() const; II retorna altura \line 22 double area() const; II calcula e retorna a \'e1rea \line 23 double volume() const; II calcula e retorna o volume \line 24 \line II altura do cilindro \line Fig. 9.10 Demonstrando a classe Cylinder - cylindr2 .h (parte 2 de 2). \line 30 II Fig. 9.10: cylindr2.cpp \line 31 II Defini\'e7\'f5es de fun\'e7\'f5es membro e \line 32 II friends para a classe Cylinder. \line 33 #include \ldblquote cylindr2.h\rdblquote  \line 34 \line 35 II Construtor de Cylinder chama construtor de Circle \line 36 Cylinder: :Cylinder( double h, double r, int x, int y \line 37 : Circle( r, x, y ) II chama construtor da classe base \line 38 \{ setHeight( h ); \line 39 \line II Inicializa a altura do Cylinder \line void Cylinder::setHeight( double h \line height= ( h>= 0? h : 0); \line II Obt\'e9m a altura do Cylinder \line double Cylinder::getHeight() const \{ return height; \line II Calcula a \'e1rea do Cylinder (i.e., \'e1rea da superf\'edcie) double Cylinder::area() const \line return 2 * Circle: :area() + \line 2 * 3.14159 * radius * height; \line II Calcula o volume do Cylinder \line double Cylinder: :volume() const \line return Circle::area() * height; \line 58 II Envia dimens\'f5es do Cylinder para a sa\'edda \line 59 ostream &operator\'ab( ostream &output, const \line 60 \line 61 \line 62 \line 63 \line 64 \line 65 \line Fig. 9.10 Demonstrando a classe Cylinder - cylindr2 . cpp. \par
590 C++ CoMo PROGRAMAR \par
12 class Cylinder : public Circle \line 13 friend ostream &operator\'ab( ostream &, const Cylinder & ); \line public: \line // construtor default \line Cylinder( double h 0.0, double r = 0.0, \line int x = 0, int y O ); \par
25 \line 26 \line 27 \line 28 \par
protected: \line double height; \par
29 #endif \par
40 \line 41 \line 42 \line 43 \line 44 \line 45 \line 46 \line 47 \line 48 \line 49 \line 50 \line 51 \line 52 \line 53 \line 54 \line 55 \line 56 \line 57 \par
Cylinder &c \par
output \'ab static_cast< Circle >( c \line\'ab \ldblquote ; Altura = \'ab c.height; \line return output; II possibilita chamadas encadeadas \par
CAP\'cdTULO 9 - HERAN\'c7A 591 \line 66 II Fig. 9.10: figO9lO.cpp \line 67 II Programa para testar a classe Cylinder \line 68 #include <iostream> \line 69 \line 70 using std::cout; \line 71 using std: :endl; \line 72 \line 73 #include \ldblquote point2.h\rdblquote  \line 74 #include \ldblquote circle2.h\rdblquote  \line 75 #include \ldblquote cylindr2.h\rdblquote  \line 76 \line 77 int mamo \line 78 \line 79 /1 cria objeto Cylinder \line 80 Cylinder cyl( 5.7, 2.5, 12, 23 ); \line 81 \line 82 // usa fun\'e7\'f5es get para exibir o Cylinder \line 83 cout \'ab \ldblquote A coordenada X \'e9 \'ab cyl.getX() \line 84 \'ab \ldblquote\\nA coordenada Y \'e9 \ldblquote  \'ab cyl.getY() \line 85 \'ab \ldblquote\\nO raio \'e9 \ldblquote  \'ab cyl.getRadius() \line 86 \'ab \ldblquote\\nA altura \'e9 \'ab cyl.getHeight() \'ab \ldblquote\\n\\n\rdblquote ; \line 87 \line 88 // usa fun\'e7\'f5es set para mudar os atributos do Cylinder \line 89 cyl.setHeight( 10 ); \line 90 cyl.setRadius( 4.25 ); \line 91 cyl.setpoint( 2, 2 ); \line 92 cout \'ab \lquote A nova posi\'e7\'e3o, o raio e a altura do cilindro s\'e3o:\\n\rdblquote  \line 93 \'ab cyl \'ab \lquote\\n\rquote ; \line 94 \line 95 cout \'ab \ldblquote A \'e1rea do cilindro \'e9:\\n\rdblquote  \line 96 \'ab cyl.area() \'ab \lquote\\n\rquote ; \line 97 \line 98 II exibe o Cylinder como um Point \line 99 Point &pRef = cyl; II pRef \ldblquote pensa\rdblquote  que \'e9 um Point \line 100 cout \'ab \ldblquote\\nCylinder impresso como um Point \'e9: \line 101 \'ab pRef \'ab \ldblquote\\n\\n\rdblquote ; \line 102 \line 103 // exibe o Cylinder como um Circie \line 104 Circle &circleRef cyl; 1/ circleRef pensa que \'e9 um Circie \line 105 cout \'ab \ldblquote Cylinder impresso como um Circie \'e9:\\n\rdblquote  \'ab circleRef \line 106 \'ab \ldblquote\\n\'c1rea: \ldblquote  \'ab circleRef.area() \'ab endl; \line 107 \line 108 return 0; \line 109 \} \line A coordenada X \'e9 12 \line A coordenada Y \'e9 23 \line O raio \'e9 2.5 \line A altura \'e9 5.7 \line A nova posi\'e7\'e3o, raio e altura do cilindro s\'e3o: \line Centro = [2, 23; Raio = 4.25; Altura = 10.00 \line A \'e1rea do cilindro \'e9: \line 380.53 \line Cylinder impresso como um Point \'e9: [2, 2) \line Cylinder impresso como um CircJ.e \'e9: \line Centro = [2, 2); Raio = 4.25 \line Area: 56.74 \line Fig. 9.10 Demonstrando a classe Cylinder - figO 9_lO. cpp. \par
592 C++ COMO PROGRAMAR \line 9.15 Heran\'e7a m\'faltipla \line At\'e9 aqui, neste cap\'edtulo, discutimos a heran\'e7a simples, na qual cada classe \'e9 derivada de exatamente apenas uma classe base. Uma classe pode ser derivada de mais de uma classe base; tal deriva\'e7\'e3o \'e9 chamada de heran\'e7a m\'faltipla. Heran\'e7a m\'faltipla significa que uma classe derivada herda os membros de v\'e1rias classes base. Este poderoso recurso encoraja formas interessantes de reutiliza\'e7\'e3o de software, mas pode causar diversos problemas de ambig\'fcidade. \line Boa pr\'e1tica de programa\'e7\'e3o 9.1 \line A heran\'e7a m\'faltipla, quando usada apropriadamente, \'e9 um recurso poderoso. A heran\'e7a m\'faltipla deveria ser usada quando existe um relacionamento \ldblquote\'e9 um\rdblquote  entre um novo tipo e dois ou mais tipos existentes (ou \line seja,o tipo A \ldblquote\'e9 um\rdblquote  tipo B e o tipo A \ldblquote\'e9 um\rdblquote  tipo C). \line Considere o exemplo de heran\'e7a m\'faltipla da Fig. 9.11. A classe Basel cont\'e9m um membro de dados protected \'c1 - int value. Basel cont\'e9m um construtor, que inicializa value, e a fun\'e7\'e3o membro public getData, que \line retorna value. \line A classe Base2 \'e9 similar a classe Basel, exceto pelo fato de que seu dado protected \'e9 char letter. Base2 tamb\'e9m tem um fun\'e7\'e3o membro public getData, mas esta fun\'e7\'e3o retorna o valor de char letter. \line ___ A classe Derived herda tanto da classe Basel como da classe Base2 atrav\'e9s da heran\'e7a m\'faltipla. Derived tem o membro de dados private double real e tem a fun\'e7\'e3o membro public getReal, que l\'ea o valor de double real. \line 1 II Fig. 9.11: basel.h \line 2 II Defini\'e7\'e3o da classe Basel \line 3 #ifndef BASE1H \line 4 #define BASE1H \line 5 \line 6 class Basel \{ \line 7 public: \line 8 Basel( int x ) \{ value = x; \line 9 int getData() const \{ return value; \line 10 protected: II pode ser acessado por classes derivadas \line 11 int value; II herdado por classes derivadas \line 12 \}; \line 13 \line 14 #endif \line Fig. 9.11 Demonstrando a heran\'e7a m\'faltipla - basel . h. \line 15 II Fig. 9.11: base2.h \line 16 // Defini\'e7\'e3o da classe Base2 \line 17 ffifndef BASE2H \line 18 #define BASE2H \line 19 \line 20 class Base2 \line 21 public: \line 22 Base2( char c ) \{ letter = c; \line 23 char getData() const \{ return letter; \} \line 24 protected: // pode ser acessado por classes derivadas \line 25 char letter; // herdadas por classes derivadas \line 26 \line j 27 \line 28 #endif \line Fig. 9.11 Demonstrando a heran\'e7a m\'faltipla - base2 . h. \par
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 9 - HERAN\'c7A 593 \line 29 // Fig. 9.11: derived.h \line 30 // Defini\'e7\'e3o da classe Derived, que herda de \line 31 II m\'faltiplas classes base (Basel e Base2). \line 32 #ifndef DERIVEDH \line 33 #define DERIVEDR \line 34 \line 35 #include <iostream> \line 36 \line 37 using std::ostream; \line 38 \line 39 #include \ldblquote basei.h\rquote  \line 40 #include \ldblquote base2.h\rdblquote  \line 41 \line 42 // heran\'e7a m\'faltipla \line 43 class Derived : public Basel, public Base2 \line 44 friend ostream &operator\'ab( ostream &, const Derived & ); \line 45 \line 46 public: \line 47 Derived( int, char, double ); \line 48 double getReal() const; \line 49 \line 50 private: \line 51 double real; // dados privados da classe derivada \line 52 \line 53 \line 54 #endif \line Fig. 9.11 Demonstrando a heran\'e7a m\'faltipla - derived . h. \line 55 II Fig. 9.11: derived.cpp \line 56 II Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe Derived \line 57 #include derived.h\rdblquote  \line 58 \line 59 // Construtor para Derived chama construtores \line 60 /1 da classe Basel e da classe Base2. \line 61 II Usa inicializadores de membros p/chamar construtores das classes base \line 62 Derived: :Derived( int i, char c, double f \line 63 : Basel ( i ) , Base2 ( c ) , real ( f ) \{ \line 64 \line 65 II Retorna o valor de real \line 66 double Derived::getReal() const \{ return real; \line 67 \line 68 // Exibe todos os membros de dados de Derived \line 69 ostream &operator\'ab( ostream &output, const Derived &d \line 70 \line 71 output \'ab Inteiro: \'ab d.value \line 72 \'ab \ldblquote\\n Caractere: \'ab d.letter \line 73 \'ab \ldblquote\\nN\'famero real: \'ab d.real; \line 74 \line 75 return output; II possibilita chamadas encadeadas \line 76 \par
Fig. 9.11 Demonstrando a heran\'e7a m\'faltipla - figO 911. cpp (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx394\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx960\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3846\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4562\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6315\pard\intbl Fig. \cell 9.11 \cell Demonstrando a heran\'e7a m\'faltipla - d \cell erived \cell . cpp. \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx394\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx960\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3846\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4562\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6315\pard\intbl 77 \cell // \cell Fig. 9.11: figO9li.cpp \cell\cell\cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx394\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx960\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4562\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6315\pard\intbl 78 \cell // \cell Programa para testar o exemplo de \cell heran\'e7a m\'faltipla \cell\row\trowd\trgaph108\trleft-108\trbrdrl\brdrs\brdrw10 \trbrdrt\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trpaddl108\trpaddr108\trpaddfl3\trpaddfr3
\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx394\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx960\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3846\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx4562\clbrdrl\brdrw15\brdrs\clbrdrt\brdrw15\brdrs\clbrdrr\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx6315\pard\intbl 79 \cell #in \cell clude <iostrean> \cell\cell\cell\row\pard\par
\pard\sb100\sa240 594 C++ COMO PROGRAMAR \line 80 \line 81 using std::cout; \line 82 using std: :endl; \line 83 \line 84 #include \ldblquote basel.h\rdblquote  \line 85 #include \ldblquote base2.h\rdblquote  \line 86 #include \ldblquote derived.h\rdblquote  \line 87 \line 88 int main() \line 89 \line 90 Basel bl( 10 ), *baselptr = 0; II cria objeto Basel \line 91 Base2 b2( \lquote Z\rquote  ), *base2ptr = 0; II cria objeto Base2 \line 92 Derived d( 7, \lquote A\rquote , 3.5 ); // cria objeto Derived \line 93 \line 94 // imprime membros de dados dos objetos da classe base \line 95 cout \'ab \lquote Objeto bi cont\'e9m inteiro \ldblquote  \'ab bl.getData() \line 96 \'ab \ldblquote\\nObjeto b2 cont\'e9m caractere \ldblquote  \'ab b2.getoata() \line 97 \'ab \ldblquote\\nObjeto d cont\'e9m:\\n\rdblquote  \'ab d \'ab \ldblquote\\n\\n\rdblquote ; \line 98 \line 99 // imprime membros de dados do objeto da classe derivada \line 100 /1 operador de resolu\'e7\'e3o de escopo resolve ambig\'fcidade de getoata \line 101 cout \'ab \ldblquote Membros de dados de Derived podem ser\rdblquote  \line 102 \'ab \ldblquote  acessados individualmente:\rdblquote  \line 103 \'ab \ldblquote\\n Inteiro: \ldblquote  \'ab d.Basel::getData() \line 104 \'ab \ldblquote\\n Caractere: \ldblquote  \'ab d.Base2: :getoata() \line 105 \'ab \ldblquote\\nN\'famero real: \ldblquote  \'ab d.getReal() \'ab \ldblquote\\n\\n\rdblquote ; \line 106 \line 107 cout \'ab \ldblquote Derived pode ser tratado como um \line 108 \'ab \ldblquote objeto de qualquer classe base:\\n\rdblquote ; \line 109 \line 110 /1 trata Derived como um objeto de Basel \line 111 baselPtr &d; \line 112 cout \'ab \ldblquote baselPtr->getflata() fornece \line 113 \'ab baselPtr->getData() \'ab \lquote\\n\rquote ; \line 114 \line 115 // trata Derived como um objeto de Base2 \line 116 base2Ptr = \line 117 cout \'ab \ldblquote base2Ptr->getData() fornece \line 118 \'ab base2Ptr->getData() \'ab endl; \line 119 \line 120 return 0; \line 121 \line Objeto bi cont\'e9m inteiro 10 \line Objeto b2 cont\'e9m caractere Z \line Objeto d cont\'e9m: \line Inteiro: 7 \line Caractere: A \line N\'famero real: 3.5 \line Membros de dados de Derived podem ser acessados individualmente: \line Inteiro: 7 \line Caractere: A \line N\'famero real: 3.5 \line Derived pode ser tratado como um objeto de qualquer classe base: \line baselptr->getData() fornece 7 \line base2Ptr->getDataO) fornece A \line Fig. 9.11 Demonstrando a heran\'e7a m\'faltipla - figO 9_li . cpp (parte 2 de 2). \par
CAP\'cdTULO 9 - HERAN\'c7A 595 \line Note como \'e9 simples indicar a heran\'e7a m\'faltipla colocando uma lista de classes base, separadas por v\'edrgulas, logo ap\'f3s os dois-pontos depois de class Derived. Note tamb\'e9m que o construtor de Derived chama explicitamente o construtor da classe base para cada uma de suas classes bases, Base 1 e Base2, atrav\'e9s da sintaxe de inicializador de membro. Novamente, os construtores das classes base s\'e3o chamados na ordem em que a heran\'e7a \'e9 especificada, n\'e3o na ordem na qual seus construtores s\'e3o mencionados. E se os construtores das classes base n\'e3o s\'e3o explicitamente chamados na lista de inicializadores de membros, seus construtores default ser\'e3o chamados implicitamente. \line O operador de inser\'e7\'e3o em stream sobrecarregado para Derived usa a nota\'e7\'e3o de ponto do objeto derivado d para imprimir value, letter e real. Esta fun\'e7\'e3o operador \'e9 um friend de Derived, de modo que operator\'ab pode acessar diretamente o membro de dados private real de Derived. Al\'e9m disso, como este operador \'e9 um friend de uma classe derivada, ele pode acessar os membros protectedvalue e letter de Basel e Base2, respectivamente. \line Agora, vamos examinar o programa de teste em main. Criamos o objeto bi da classe Basel e o inicializamos com o valor int 10. Criamos o objeto b2 da classe Base2 e o inicializamos com o valor char \lquote Z\rquote . Ent\'e3o, criamos o objeto d da classe Derived e o inicializamos com o valor int 7, o valor char A\rquote  e o valor double \line 3.5. \line O conte\'fado dos objetos de cada classe base \'e9 impresso chamando a fun\'e7\'e3o membro getData para cada objeto. Embora existam duas fun\'e7\'f5es getData, as chamadas n\'e3o s\'e3o amb\'edguas, porque elas referenciam diretamente a vers\'e3o do objeto bi de getData e a vers\'e3o do objeto b2 de getData. \line Em seguida, imprimimos os conte\'fados do objeto d de Derived com vincula\'e7\'e3o est\'e1tica. Mas temos um problema de ambig\'fcidade porque este objeto cont\'e9m duas fun\'e7\'f5es getData. uma herdada de Basel e uma herdada de Base2. Este problema \'e9 f\'e1cil de resolver usando-se o operador bin\'e1rio de resolu\'e7\'e3o de escopo, como em cl. Basel: : getoata Q, para imprimir o int em value e d.Base2: : getData () para imprimir o char em letter. O valor double em real \'e9 impresso, sem ambig\'fcidade, com a chamada d.getReal O. Em seguida, demonstramos que relacionamentos \'e9 um de heran\'e7a simples tamb\'e9m se aplicam \'e0 heran\'e7a m\'faltipla. Atribu\'edmos o endere\'e7o do objeto derivado d ao ponteiro da classe base baselPtr e imprimimos o int value pela invoca\'e7\'e3o da fun\'e7\'e3o membro getData de Base 1 usando baselPtr. Atribu\'edmos, ent\'e3o, o endere\'e7o do objeto derivado d ao ponteiro da classe base base2Ptr e imprimimos char letter invocando a fun\'e7\'e3o membro getData de Base2 usando base2Ptr. \line Este exemplo mostrou a mec\'e2nica da heran\'e7a m\'faltipla com um exemplo simples e apresentou um problema \line simples de ambig\'fcidade. A heran\'e7a m\'faltipla \'e9 um t\'f3pico complexo, que \'e9 tratado em mais detalhes em textos avan\'e7ados sobre C++. \line Observa\'e7\'e3o de engenharia de software 9.12 \line ______ A heran\'e7a m\'faltipla \'e9 um recurso poderoso, mas ela pode introduzir complexidade em um sistema. \'c9 necess\'e1rio uni grande cuidado no projeto de um sistema para usar a heran\'e7a m\'faltipla adequadamente; \line ela n\'e3o deve ser usada quando a heran\'e7a simples for suficiente. \line 9.16 (Estudo de caso opcional) Pensando em objetos: incorporando heran\'e7a \'e0 simula\'e7\'e3o do elevador. \line Agora, examinamos nosso projeto de simula\'e7\'e3o para ver se ele pode se beneficiar da heran\'e7a. Nos cap\'edtulos anteriores, temos tratado ElevatorButton e EloorButton como classes separadas. Na verdade, estas classes t\'eam muito em comum; cada uma \'e9 um tipo de bot\'e3o. Para aplicar heran\'e7a, primeiro procuramos pelas coisas em comum entre estas classes. Ent\'e3o, extra\'edmos o que h\'e1 em comum, colocamos em uma classe base Button e derivamos as classes ElevatorButton e FloorButton a partir de Button. \line Examinemos agora as similaridades entre as classes ElevatorButton e FloorButton. A Fig. 9.12 mostra os atributos e opera\'e7\'f5es das duas classes, como declarados em seus arquivos de cabe\'e7alho no Cap\'edtulo 7 (Figs. 7.24 e 7.26, respectivamente). As classes t\'eam um atributo (pressed) e duas opera\'e7\'f5es (pressButton e resetButton) em comum. Colocamos estes tr\'eas elementos na classe base Button, ent\'e3o ElevatorButton e FloorButton herdam os atributos e opera\'e7\'f5es de Button. Em nossa implementa\'e7\'e3o anterior, ElevatorButton e FloorButton declaravam, cada uma, uma refer\'eancia para um objeto da classe Elevator - a classe Button tamb\'e9m deve conter esta refer\'eancia. \par
596 C++ COMO PROGRAMAR \line ElevatorButton __________________ \line - pressed : bool false \line + pressButton() : void ___________________ \line + pressButton() void \line Fig. 9.12 Atributos e opera\'e7\'f5es das classes ElevatorButton e FloorButton. \line A Fig. 9.13 modela nosso novo projeto de simulador de elevador incorporando heran\'e7a. Note que a classe Floor \'e9 composta de um objeto da classe FloorButton e um objeto da classe Light; a classe E].evator \'e9 composta de um objeto da classe ElevatorButton, um objeto da classe Door e um objeto de Beli. Uma linha cheia com uma seta branca na ponta vai de cada classe derivada para a classe base - esta linha indica que as classes FJ.oorButton e ElevatorButton herdam da classe Button. \par
FloorButton \par
- pressed : bool = false \line - floorNumber: boil \line + pressButton() : void \line + resetButton() : void \par
1 \par
passageiro \par
12 Atende \par
Fig. 9.13 Diagrama completo de classes do simulador de elevador indicando heran\'e7a a partir da classe \line Button. \par
CAP\'cdTULO 9 - HERAN\'c7A 597 \line Ainda fica uma pergunta: as classes derivadas precisam sobrescrever alguma das fun\'e7\'f5es membro da classe base ? Se comparamos as fun\'e7\'f5es membro p\'fablicas de cada pi.iblic (Figs. 7.25 e 7.27), notamos que a fun\'e7\'e3o membro resetButton \'e9 id\'eantica para as duas classes. Esta fun\'e7\'e3o n\'e3o precisa ser sobrescrita. A fun\'e7\'e3o membro pressButton, no entanto, \'e9 diferente para cada classe. A classe ElevatorButton cont\'e9m o seguinte c\'f3digo para pressButton \line pressed = true; \line cout \'ab \ldblquote bot\'e3o do elevador diz ao elevador que se prepare para sair\rdblquote  \line\'ab endi; \line elevatorRef.prepareToLeave( true ); \line enquanto a classe FloorButton cont\'e9m o seguinte c\'f3digo para pressButton \line pressed = true; \line cout \'ab \ldblquote bot\'e3o do andar \'ab floorNumber \line\'ab \ldblquote  chama o elevador\rdblquote  \'ab endi; \line elevatorRef.suznmonElevator( floorNuxnber \line A primeira linha de cada bloco de c\'f3digo \'e9 id\'eantica, mas as se\'e7\'f5es restantes dos dois blocos s\'e3o diferentes. Portanto, cada classe derivada precisa sobrescrever a fun\'e7\'e3o membro pressButton da classe base Button. \line A Fig. 9.14 lista o arquivo de cabe\'e7alho para a classe Button2. Declaramos as fun\'e7\'f5es membro public pressButton e resetButton e o membro de dados private pressed, do tipo bool. Note a declara\'e7\'e3o da refer\'eancia \'e0 classe Elevator, na linha 18, e o par\'e2metro correspondente para o construtor na linha 11. Mostramos como inicializar a refer\'eancia quando discutimos o c\'f3digo para as classes derivadas. \line As classes derivadas executam duas a\'e7\'f5es diferentes. A classe ElevatorButton invoca a fun\'e7\'e3o membro prepareToLeave da classe Elevator; a classe FloorButton invoca a fun\'e7\'e3o membro summonElevator. Assim, as duas classes precisam ter acesso ao membro de dados elevatorRef da classe base; entretanto, este membro de dados n\'e3o deve estar dispon\'edvel para objetos que n\'e3o sejam do tipo Button. Portanto, colocamos o membro de dados elevatorRef na se\'e7\'e3o protected de Button. O membro de dados pressed \'e9 declarado private porque \'e9 manipulado somente atrav\'e9s de fun\'e7\'f5es membro da classe base; classes derivadas n\'e3o precisam acessar pressed diretamente. \line 1 // button.h \line 2 II Defini\'e7\'e3o da classe Button. \line 3 #ifndef BUTTONH \line 4 #define BUTTONH \line 5 \line 6 class Elevator; II declara\'e7\'e3o antecipada \line 7 \line 8 class Button \{ \line 9 \line 10 public: \line 11 Button( Elevator & ); // construtor \line 12 \lquote .ButtonO; // destruidor \line 13 void pressButtonQ; II liga o bot\'e3o \line 14 void resetButton II desliga o bot\'e3o \line 15 \line 16 protected: \line 17 II refer\'eancia para o elevador do bot\'e3o \line 18 Elevator &elevatorRef; \line Fig. 9.14 Arquivo de cabe\'e7alho da classe Button (parte 1 de 2). \line 2 Nota: a beleza do encapsulamento \'e9 que nenhum outro arquivo na nossa simula\'e7\'e3o de elevador precisa ser mudado. Simplesmente substitu\'edmos os arquivos novos elevatorButton e floorButton . h e . cpp pelos velhos e adicionamos os arquivos para a classe Button. Depois, compilamos os novos arquivos.cpp e \ldblquote ligamos\rdblquote  os arquivos de objeto resultantes \'e0queles j\'e1 criados a partir dos arquivos existentes do simulador. \par
598 \par
19 \par
20 \par
C++ COMO PROGRAMAR \par
private: \par
21 bool pressed; \line 22 \}; \line 23 \line 24 #endif II BUTTONH \par
Fig. 9.14 Arquivo de cabe\'e7alho da classe Button (parte 2 de 2). \par
1 \line 2 \line 3 \par
4 \par
5 \line 6 \par
7 \par
8 \par
9 \par
II button.cpp \line // Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe Button. #include <iostrearn> \par
using std::cout; \line using std::endl; \par
#include \ldblquote button \par
// construtor \line Button::Button( Elevator &elevatorHandle \line elevatorRef( elevatorHandle ) , pressed( false \line cout \'ab \ldblquote bot\'e3o criado\rdblquote  \'ab endl; \par
II destruidor \line Button: : -\lquote Button O \line cout \'ab \ldblquote bot\'e3o destru\'eddo\rdblquote  \'ab endl; \par
II aperta o bot\'e3o \line void Button: :pressButton() \{ pressed = true; \par
// desliga o bot\'e3o \line void Button::resetButton() \{ pressed = false; \par
Fig. 9.15 Arquivo de implementa\'e7\'e3o da classe Button. \par
A Fig. 9.16 cont\'e9m o arquivo de cabe\'e7alho para a classe ElevatorButton. Usamos heran\'e7a da classe Button na linha 10. Este heran\'e7a significa que a classe ElevatorButton cont\'e9m o membro de dados protected elevatorRef e as fun\'e7\'f5es membro public pressButton e resetButton da classe base. Na linha 15, providenciamos um prot\'f3tipo de fun\'e7\'e3o para pressButton para sinalizar nossa inten\'e7\'e3o de sobrescrever aquela fun\'e7\'e3o membro no arquivo cpp. Discutiremos a implementa\'e7\'e3o de pressButton em seguida. \par
1 \line 2 \line 3 \line 4 \par
5 \par
// elevatorButton . h \line II Defini\'e7\'e3o da classe ElevatorButton. #i fndef ELEVATORBUTTONH \line #define ELEVATORBUTTONH \par
6 #include \ldblquote button.h\rdblquote  \par
7 \par
// estado do bot\'e3o \par
A Fig. 9.15 lista o arquivo de implementa\'e7\'e3o para a classe Button. A linha 12 \line elevatorRef( elevatorHandle ), pressed( false \line inicializa a refer\'eancia ao elevador, O construtor e o destruidor simplesmente exibem mensagens indicando que eles est\'e3o sendo executados e as fun\'e7\'f5es membro pressButton e resetButton manipulam o membro de dados privado pressed. \par
10 \line 11 \line 12 \line 13 \line 14 \line 15 \line 16 \line 17 \line 18 \line 19 \line 20 \line 21 \line 22 \line 23 \par
Fig. 9.16 Arquivo de cabe\'e7alho da classe ElevatorButton (parte 1 de 2). \par
CAP\'cdTULO 9 - HERAN\'c7A 599 \line 8 class Elevator; II declara\'e7\'e3o antecipada \line 9 \line 10 class ElevatorEutton : public Button \line 11 \line 12 public: \line 13 ElevatorButton( Elevator & ); II construtor \line 14 -ElevatorButtonQ; 1/ destruidor \line 15 vo\'edd pressButtonO; II aperta o bot\'e3o \line 16 \}; \line 17 \line 18 #endif /1 ELEVATORBUTTONH \line Fig. 9.16 Arquivo de cabe\'e7alho da classe ElevatorButton (parte 2 de 2). \line O construtor recebe como par\'e2metro uma refer\'eancia \'e0 classe Elevator (linha 13). Discutiremos a necessidade deste par\'e2metro quando discutirmos o arquivo de implementa\'e7\'e3o para esta classe. Note, no entanto, que ainda precisamos fazer uma declara\'e7\'e3o antecipada da classe Elevator (linha 8), de modo que possamos incluir o par\'e2metro na declara\'e7\'e3o do construtor. O arquivo de implementa\'e7\'e3o para a classe ElevatorButton est\'e1 listado na Fig. 9.17. Os construtores e destruidores desta classe exibem mensagens para indicar que estas fun\'e7\'f5es est\'e3o sendo executadas. A linha 14: \line Button( elevatorHandle \line passa a refer\'eancia para Elevator at\'e9 o construtor da classe base. \line Nossa fun\'e7\'e3o que sobrescreve a fun\'e7\'e3o membro pressButton primeiro chama a fun\'e7\'e3o membro pres sButton na classe base (linha 24); esta chamada inicializa com true o atributo pres sed da classe Button. Na linha 27, invocamos a fun\'e7\'e3o membro cio elevador prepareToLeave. com um argumento com valor true. para indicar ao elevador que deve se mover para o outro andar. \line 1 II elevatorButton.cpp: \line 2 // Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe ElevatorButton. \line 3 #include <iostreain> \line 4 \line 5 using std: :cout; \line 6 using std: :endJ.; \line 7 \line 8 #include \ldblquote elevatorButton.h\rquote  \line 9 #include \ldblquote elevator.h\rdblquote  \line 10 \line 11 II construtor \line 12 ElevatorButton: :ElevatorButton( \line 13 Elevator &elevatorHandle \line 14 : Button( elevatorHandJ.e \line 15 \{ cout \'ab \ldblquote bot\'e3o do elevador criado\rdblquote  \'ab endi; \line 16 \line 17 // destruidor \line 18 ElevatorButtonz :ElevatorButton() \line 19 \{ cout \'ab \ldblquote bot\'e3o do elevador destru\'eddo\rdblquote  \'ab endl; \} \line 20 \line 21 /1 aperta o bot\'e3o \line 22 void ElevatorButton: :pressEutton() \line 23 \{ \line 24 Button: :pressButtonQ; \line 25 cout \'ab \ldblquote bot\'e3o do elevador diz ao elevador que se prepare para sair\rdblquote  \line 26 \'ab endi; \line 27 elevatorRef.prepareToLeave( true ) \line 28 \line Fig. 9.17 Arquivo de implementa\'e7\'e3o da classe ElevatorButton. \par
600 C++ COMO PROGRAMAR \line A Fig. 9.18 lista o arquivo de cabe\'e7alho para a classe FloorButton. A \'fanica diferen\'e7a entre este arquivo e aquele para a classe ElevatorButton \'e9 a adi\'e7\'e3o, na linha 19, do membro de dados floorNumber. Usamos este membro de dados para distinguir entre os andares, nas mensagens de sa\'edda da simula\'e7\'e3o. Inclu\'edmos um par\'e2metro do tipo int na declara\'e7\'e3o do construtor (linha 13), de modo que possamos inicializar fJ.oorNumber. \line 1 II floorButton.h \line 2 // Defini\'e7\'e3o da classe FloorButton. \line 3 #ifndef FLOORBUTTONH \line 4 #define FLOORBUTTONH \line 5 \line 6 #include \ldblquote button.h\rdblquote  \line 7 \line 8 class Elevator; II declara\'e7\'e3o antecipada \line 9 \line 10 class FloorButton : public Button\{ \line 11 \line 12 public: \line 13 FloorButton( int, Elevator & ); II construtor \line 14 -\lquote FloorButtonO; // destruidor \line 15 \line 16 void pressButtonO; II aperta o bot\'e3o \line 17 \line 18 private: \line 19 int floorNumber; // n\'famero do andar do bot\'e3o \line 20 \line 21 \line 22 #endif // FLOORBUTTONH \line Fig. 9.18 Arquivo de cabe\'e7alho da classe FloorButton. \line A Fig. 9.19 cont\'e9m o arquivo de implementa\'e7\'e3o para a classe FloorButton. Na linha 14, passamos a refer\'eancia ao Elevator para o construtor da classe base Button e inicializamos o membro de dados floorNuznber. O construtor e o destruidor imprimem mensagens apropriadas, usando o membro de dados floorNi.miber. A fun\'e7\'e3o membro pressButton sobrescrita (linhas 27 a 34) come\'e7a chamando pressButton na classe base e, a seguir, invoca a fun\'e7\'e3o membro do elevador summonElevator, passando floorNumber para indicar o andar que est\'e1 chamando o elevador. \line 1 II floorButton.cpp \line 2 II Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe FloorButton. \line 3 #include <iostream> \line 4 \line 5 using std: :cout; \line 6 using std::endl; \line 7 \line 8 #include \ldblquote floorButton.h\rdblquote  \line 9 #include \ldblquote elevator.h\rdblquote  \line 10 \line 11 II construtor \line 12 FloorButton::FloorButton( int nuinber, \line 13 Elevator &elevatorHandle \line 14 : Button( elevatorRandle ), floorNuxnber( number \line 15 \line 16 cout \'ab \ldblquote bot\'e3o do andar \ldblquote  \'ab floorNuinber \'ab \ldblquote  criado\rdblquote  \line 17 \'ab endi; \line 18 \} \line 19 \line Fig. 9.19 Arquivo de implementa\'e7\'e3o da classe FloorButton (parte 1 de 2). \par
CAP\'cdTULO 9 - HERAN\'c7A 601 \line 20 // destruidor \line 21 FloorButton: :F1oorButton() \line 22 \line 23 cout \'ab \lquote bot\'e3o do andar \ldblquote  \'ab floorNumber \'ab \ldblquote  destru\'eddo\rdblquote  \line 24 \'ab endi; \line 25 \line 26 \line 27 // aperta o bot\'e3o \line 28 void FloorButton: :pressButton() \line 29 \{ \line 30 Button: :pressButtonO; \line 31 cout \'ab \ldblquote bot\'e3o do andar \ldblquote  \'ab floorNumber \line 32 \'ab \ldblquote  chama o elevador\rdblquote  \'ab endi; \line 33 elevatorRef.summonElevator( floorNumber ); \line 34 1 \line Fig. 9.19 Arquivo de implementa\'e7\'e3o da classe FloorButton (parte 2 de 2). \line Agora, completamos a implementa\'e7\'e3o para o estudo de caso de simula\'e7\'e3o de elevador que come\'e7amos no Cap\'edtulo 2. Ainda resta uma oportunidade significativa do ponto de vista de arquitetura. Voc\'ea pode ter notado que as classes Button. Door e Light t\'eam muito em comum. Cada uma destas classes cont\'e9m um atributo \ldblquote estado\rdblquote  e as opera\'e7\'f5es correspondentes de \ldblquote ligar\rdblquote  e \ldblquote desligar\rdblquote . A classe Beli tamb\'e9m apresenta alguma similaridade com estas outras classes. Pensar de forma orientada a objetos nos diz que devemos colocar o que h\'e1 de comum em algumas classes base, a partir das quais devemos, ent\'e3o, usar heran\'e7a para formar as classes derivadas apropriadas. Deixamos a implementa\'e7\'e3o desta heran\'e7a para o leitor, como um exerc\'edcio. Sugerimos que voc\'ea comece modificando o diagrama de classes da Fig. 9.13. [Dica: Button, Door e Light s\'e3o essencialmente classes de \ldblquote chaveamento\rdblquote  - cada uma delas tem os recursos \ldblquote estado\rdblquote , \ldblquote ligar e \ldblquote desligar\rdblquote ; Beil \'e9 uma classe mais \ldblquote fina\rdblquote , com apenas uma \'fanica opera\'e7\'e3o e nenhum estadol. \line Esperamos, sinceramente, que este estudo de caso de simula\'e7\'e3o de elevador tenha sido uma experi\'eancia desafiadora e significativa para voc\'ea. Empregamos um processo orientado a objetos incremental, cuidadosamente desenvolvido, para produzir um projeto baseado em UML para nosso simulador de elevador. A partir deste projeto, produzimos uma implementa\'e7\'e3o em C++ substancial, que funciona, usando conceitos-chave de programa\'e7\'e3o, incluindo classes, objetos, encapsulamento, visibilidade, composi\'e7\'e3o e heran\'e7a. Nos cap\'edtulos restantes do livro, apresentamos muitas tecnologias-chave adicionais de C++. Ficar\'edamos muito gratos se voc\'ea dedicasse uns minutos para enviar seus coment\'e1rios, cr\'edticas e sugest\'f5es para aprimorar este estudo de caso para n\'f3s, no endere\'e7o deitel@deitel com. \line Resumo \line\bullet  Uma das chaves para o poder da programa\'e7\'e3o orientada a objetos \'e9 obter reutiliza\'e7\'e3o de software atrav\'e9s da heran\'e7a. \line\bullet  O programador pode especificar que a nova classe deve herdar os membros de dados e fun\'e7\'f5es membro de uma classe base previamente definida. Neste caso, a nova classe \'e9 chamada de classe derivada. \line\bullet  Com a heran\'e7a simples, uma classe \'e9 derivada somente de uma classe base. Com a heran\'e7a m\'faltipla, uma classe derivada herda de m\'faltiplas classes base (possivelmente n\'e3o-relacionadas). \line\bullet  Uma classe derivada normalmente acrescenta membros de dados e suas fun\'e7\'f5es membro pr\'f3prias; assim, uma classe derivada geralmente tem uma defini\'e7\'e3o maior do que sua classe base. Uma classe derivada \'e9 mais espec\'edfica que sua classe base e normalmente representa menos objetos. \line\bullet  Uma classe derivada n\'e3o pode acessar os membros private de sua classe base; permitir isto violaria o encapsulamento da classe base. Uma classe derivada pode, contudo, acessar os membros public e protected de sua classe base. \line\bullet  Um construtor de uma classe derivada sempre chama primeiro o construtor de sua classe base, para criar e inicializar os membros da classe base na classe derivada. \line\bullet  Destruidores s\'e3o chamados na ordem inversa das chamadas dos construtores, de modo que o destruidor de uma classe derivada \'e9 chamado antes do destruidor de sua classe base. \par
602 C++ COMO PROGRAMAR \line\bullet  A heran\'e7a permite a reutiliza\'e7\'e3o de software, o que economiza tempo no desenvolvimento e encoraja o uso de software de alta qualidade, previamente comprovado e depurado. \line\bullet  A heran\'e7a pode ser obtida usando-se bibliotecas de classes existentes. Algum dia, a maioria dos softwares ser\'e3o constru\'eddos com componentes de software padronizados, exatamente como a maioria do hardware \'e9 hoje constru\'edda. \line\bullet  O implementador de uma classe derivada n\'e3o necessita de acesso ao c\'f3digo-fonte de uma classe base, mas necessita da interface da classe base e o seu c\'f3digo objeto. \line\bullet  Um objeto de uma classe derivada pode ser tratado como um objeto de sua classe base p\'fablica correspondente. Contudo, o inverso n\'e3o \'e9 verdadeiro. \line\bullet  Uma classe base existe em um relacionamento hier\'e1rquico com suas classes derivadas de forma simples. \line\bullet  Uma classe pode existir por ela pr\'f3pria. Quando essa classe \'e9 usada com o mecanismo de heran\'e7a, ela se toma ou uma classe base, que fornece atributos e comportamentos para outras classes, ou a classe se toma uma classe derivada, que herda aqueles atributos e comportamentos. \line\bullet  Uma hierarquia de heran\'e7a pode ser arbitrariamente profunda, dentro das limita\'e7\'f5es f\'edsicas de um sistema particular. \line\bullet  Hierarquias s\'e3o ferramentas \'fateis para se comprender e administrar a complexidade. Com o software se tornando cada vez mais complexo, C++ oferece mecanismos para suportar estruturas hier\'e1rquicas atrav\'e9s de heran\'e7a e polimorfismo. \line\bullet  Uma coer\'e7\'e3o expl\'edcita pode ser usada para converter um ponteiro da classe base para um ponteiro da classe derivada. Tal ponteiro n\'e3o deveria ser derreferenciado a menos que realmente aponte para um objeto do tipo da classe derivada. \line\bullet  O acesso protected serve como um n\'edvel intermedi\'e1ro de prote\'e7\'e3o entre o acesso public e o acesso private. Membros protected de uma classe base pode ser acessados por membros e friends da classe base e por membros e friends de classes derivadas; nenhuma outra fun\'e7\'e3o pode acessar os membros protected de uma classe base. \line\bullet  Membros protected s\'e3o usados para estender privil\'e9gios para classes derivadas, ao mesmo tempo que nega tais privil\'e9gios para fun\'e7\'f5es que n\'e3o sejam da classe nem friends da classe. \line\bullet  A heran\'e7a m\'faltipla \'e9 indicada colocando-se dois-pontos (:) ap\'f3s o nome da classe derivada e sucedendo-se os dois-pontos por uma lista de classes base separada por vfrgulas. E usada a sintaxe de inicializador de membro, no construtor de uma classe derivada, para chamar os construtores das classes base. \line\bullet  Quando se deriva uma classe a partir de uma classe base, a classe base pode ser declarada como public, protected ou private. \line\bullet  Quando se deriva uma classe a partir de uma classe base public. os membros public da classe base se tornam membros public da classe derivada e os membros protected da classe base se tornam membros protected da classe derivada. \line\bullet  Quando se deriva uma classe a partir de uma classe base protected, os membros public e protected da classe base se tornam membros protected da classe derivada. \line\bullet  Quando se deriva uma classe a partir de uma classe base private, os membros public e protected da classe base se tornam membros private da classe derivada. \line\bullet  Uma classe base pode ser ou uma classe base direta de uma classe derivada ou uma classe base indireta de uma classe derivada. Uma classe base direta \'e9 explicitamente listada onde a classe derivada \'e9 declarada. Uma classe base indireta n\'e3o \'e9 explicitamente listada; em vez disso, ela \'e9 herdada de v\'e1rios n\'edveis acima na \'e1rvore da hierarquia de classes. \line\bullet  Quando um membro da classe base \'e9 inadequado para uma classe derivada, podemos simplesmente sobrescrever (redefinir) esse membro na classe derivada. \line\bullet  \'c9 importante distinguir entre relacionamentos \ldblquote\'e9 um\rdblquote  e relacionamentos \ldblquote tem um\rdblquote . Em um relacionamento \ldblquote tem um\rdblquote , um objeto de uma classe tem um objeto de outra classe como membro. Em um relacionamento \ldblquote\'e9 um\rdblquote , um objeto do tipo da classe derivada pode tamb\'e9m ser tratado como um objeto do tipo da classe base. \ldblquote E um\rdblquote  \'e9 heran\'e7a. \ldblquote Tem um\rdblquote  \'e9 composi\'e7\'e3o. \line\bullet  Um objeto de uma classe derivada pode ser atribu\'eddo a um objeto da classe base. Esta esp\'e9cie de atribui\'e7\'e3o faz sentido porque a classe derivada tem membros correspondentes a cada um dos membros da classe base. \line\bullet  Um ponteiro para um objeto da classe derivada pode ser implicitamente convertido em um ponteiro para um objeto da classe base. \par
CAP\'cdTULO 9- HERAN\'c7A 603 \par
\bullet  \'c9 poss\'edvel se converter um ponte\'cdro da classe base em um ponteiro da classe derivada usando uma coer\'e7\'e3o expl\'edcita. O alvo deveria ser um objeto da classe derivada. \par
\bullet  Uma classe base especifica o que h\'e1 de comum. Todas as classes derivadas de uma classe base herdam os recursos daquela classe base. No processo de projeto orientado a objetos, o projetista olha para o que h\'e1 de comum e o \ldblquote fatora\rdblquote , para formar classes base interessantes. Classes derivadas s\'e3o ent\'e3o personalizadas para estender os recursos herdados da classe base. \par
\bullet  Ler um conjunto de declara\'e7\'f5es de classes derivadas pode ser confuso, porque nem todos os membros da classe derivada est\'e3o presentes nestas declara\'e7\'f5es. Em particular, membros herdados n\'e3o est\'e3o listados nas declara\'e7\'f5es da classe derivada, mas estes membros est\'e3o de fato presentes nas classe derivadas. \par
Relacionamentos \ldblquote tem um\rdblquote  s\'e3o exemplos de cria\'e7\'e3o de novas classes pela composi\'e7\'e3o de classes existentes. \par
\bullet  Relacionamentos \ldblquote conhece um\rdblquote  s\'e3o exemplos de objetos contendo ponteiros ou refer\'eancias para outros objetos, de forma que estejam cientes da exist\'eancia daqueles objetos. \par
\bullet  Construtores de objetos membros s\'e3o chamados na ordem na qual os objetos s\'e3o declarados. Na heran\'e7a, os construtores das classes base s\'e3o chamados na ordem na qual a heran\'e7a \'e9 especificada e antes do construtor de uma classe derivada. \par
\bullet  Para um objeto da classe derivada, primeiro \'e9 chamado o construtor da classe base e, depois, \'e9 chamado o construtor da classe derivada (o qual pode chamar construtores de objetos membros). \par
\bullet  Quando o objeto da classe derivada \'e9 destru\'eddo, os destruidores s\'e3o chamados na ordem inversa dos construtores - primeiro \'e9 chamado o destruidor da classe derivada, ent\'e3o \'e9 chamado o destruidor da classe base. \par
Uma classe pode ser derivada de mais de uma classe base; tal deriva\'e7\'e3o \'e9 chamada de heran\'e7a m\'faltipla. \par
\bullet  Indica-se a heran\'e7a m\'faltipla sucedendo-se o indicador de heran\'e7a dois-pontos (:) por uma lista das classes bases separadas por v\'edrgulas. \par
\bullet  O construtor de uma classe derivada chama o construtor da classe base para cada uma de suas classes base, usando a sintaxe de inicializador de membro. Os construtores das classes base s\'e3o chamados na ordem na qual as classes base s\'e3o declaradas na declara\'e7\'e3o de heran\'e7a. \par
Terminologia \par
abstra\'e7\'e3o \line ambig\'fcidade na heran\'e7a m\'faltipla associa\'e7\'e3o \line bibliotecas de classes \line classe base \line classe base direta \line classe base indireta \par
classe base private classe base protected classe base public classe derivada \line classe membro \par
cliente de uma classe \line componentes de software padronizados composi\'e7\'e3o \line construtor da classe base \line construtor de classe derivada \line construtor default da classe base controle de acesso a membro \line destruidor da classe base \line destruidor de classe derivada \line downscasting de um ponteiro \line erro de recurs\'e3o infinita \line friend de uma classe base \line friend de uma classe derivada heran\'e7a \par
heran\'e7a private heran\'e7a protected heran\'e7a public \par
heran\'e7a simples \line hierarquia de classe \line inicializador da classe base membro protected de uma classe objeto membro \line palavra-chave protected personalizar software \line ponteiro da classe base \line ponteiro de classe derivada ponteiro para um objeto da classe base ponteiro para um objeto da classe derivada programa\'e7\'e3o orientada a objetos (OOP) relacionamento conhece um relacionamento \'e9 um \par
relacionamento hier\'e1rquico relacionamento tem um relacionamento usa um reutiliza\'e7\'e3o de software sobrescrever uma fun\'e7\'e3o \par
sobrescrever uma fun\'e7\'e3o membro da classe base subclasse \line superclasse \line upcasting de um ponteiro \par
heran\'e7a m\'faltipla \par
9.1 \line 9.2 \par
9.1 \par
9.2 \line 9.3 \par
604 C++ COMO PROGRAMAR \par
9.3 \par
9.4 \par
Erros comuns de programa\'e7\'e3o \line Tratar um objeto de classe base como um objeto de uma classe derivada pode causar erros. \line Fazer explicitamente uma coer\'e7\'e3o de um ponteiro de uma classe base, que aponta para um objeto da classe base, para um ponteiro de uma classe derivada e, ent\'e3o, referenciar membros da classe derivada que n\'e3o existem nesse objeto, pode levar a erros de l\'f3gica durante a execu\'e7\'e3o. \line Quando uma fun\'e7\'e3o membro de uma classe base \'e9 sobrescrita em uma classe derivada, \'e9 comum se fazer a vers\'e3o da classe derivada chamar a vers\'e3o da classe base e fazer algum trabalho adicional. N\'e3o usar o operador de resolu\'e7\'e3o de escopo para referenciar a fun\'e7\'e3o membro da classe base causa recurs\'e3o infinita, porque a fun\'e7\'e3o membro da classe derivada na realidade chama a si pr\'f3pria. Isto, em algum momento, far\'e1 o sistema esgotar a mem\'f3ria, um erro fatal durante a execu\'e7\'e3o. \line Atribuir um objeto da classe derivada a um objeto de uma classe base correspondente e, ent\'e3o, tentar referenciar membros que s\'f3 existem na classe derivada no novo objeto da classe base \'e9 um erro de sintaxe. \line Fazer a coer\'e7\'e3o de um ponteiro da classe base para um ponteiro de uma classe derivada pode causar erros se esse ponteiro \'e9 depois usado para referenciar um objeto da classe base que n\'e3o tem os membros desejados da classe derivada. \par
9.5 \par
9.1 \par
Boa pr\'e1tica de programa\'e7\'e3o \line A heran\'e7a m\'faltipla, quando usada apropriadamente, \'e9 um recurso poderoso. A heran\'e7a m\'faltipla deveria ser usada quando existe um relacionamento \ldblquote\'e9 um\rdblquote  entre um novo tipo e dois ou mais tipos existentes (ou seja, o tipo A \ldblquote\'e9 um\rdblquote  tipo B e o tipo A \ldblquote\'e9 um\rdblquote  tipo C). \par
9.1 \par
9.2 \par
Dicas de desempenho \line Quando o desempenho for uma preocupa\'e7\'e3o importante, os programadores podem querer ver o c\'f3digo-fonte das classes das quais eles est\'e3o herdando, de modo que possam ajustar o c\'f3digo para atender a seus requisitos de desempenho. Se as classes produzidas atrav\'e9s da heran\'e7a s\'e3o maiores do que necessitam ser, mem\'f3ria e recursos de processamento podem ser desperdi\'e7ados. Herde da classe \ldblquote mais pr\'f3xima\rdblquote  daquilo que voc\'ea necessita. \par
9.4 \par
9.5 \par
9.6 \par
9.7 \par
Observa\'e7\'f5es de engenharia de software \line Em geral, declare membros de dados de uma classe como private e use protected somente como um \ldblquote\'faltimo recurso\rdblquote  quando os sistemas necessitem ser ajustados para satisfazer a requisitos de desempenho especiais. \line Uma classe derivada n\'e3o pode acessar diretamente membros private de sua classe base. \line Suponha que criemos um objeto de uma classe derivada onde tanto a classe base como a classe derivada cont\'e9m objetos de outras classes. Quando um objeto daquela classe derivada \'e9 criado, primeiro s\'e3o executados os construtores dos objetos membros da classe base, depois \'e9 executado o construtor da classe base, a seguir os construtores dos objetos membros da classe derivada s\'e3o executados e, ent\'e3o, o construtor da classe derivada \'e9 executado. Destruidores s\'e3o chamados na ordem inversa \'e0quela em que seus construtores correspondentes s\'e3o chamados. \line A ordem na qual objetos membros s\'e3o constru\'eddos \'e9 a ordem na qual aqueles objetos s\'e3o declarados dentro da defini\'e7\'e3o da classe. A ordem na qual os inicializadores de membros s\'e3o listados n\'e3o afeta a ordem de constru\'e7\'e3o. \line Na heran\'e7a, os construtores da classe base s\'e3o chamados na ordem na qual a heran\'e7a \'e9 especificada na defini\'e7\'e3o da classe derivada. A ordem na qual os construtores da classe base s\'e3o especificados na lista de inicializadores de membros da classe derivada n\'e3o afeta a ordem de constru\'e7\'e3o. \line Na teoria, os usu\'e1rios n\'e3o necessitam ver o c\'f3digo-fonte das classes do qual eles herdam. Na pr\'e1tica, as pessoas que licenciam classes nos dizem que os consumidores freq\'fcentemente pedem o c\'f3digo-fonte. Os programadores ainda parecem relutantes quanto a incorporar c\'f3digo em seus programas, quando este c\'f3digo sfoi escrito por outras pessoas. \line Criar uma classe derivada n\'e3o afeta o c\'f3digo-fonte ou o c\'f3digo objeto da sua classe base; a integridade de uma classe base \'e9 preservada pela heran\'e7a. \line Em um sistema orientado a objetos, as classes em geral s\'e3o intimamente relacionadas. \ldblquote Fatore\rdblquote  atributos e comportamentos comuns e coloque-os em uma classe base. Ent\'e3o, use a heran\'e7a para formar classes derivadas. \line Uma classe derivada cont\'e9m os atributos e comportamentos de sua classe base. Uma classe derivada pode tamb\'e9m conter atributos e comportamentos adicionais. Com heran\'e7a, a classe base pode ser compilada independentemente da classe derivada. Somente os atributos e comportamentos adicionais da classe derivada necessitam ser compilados para sermos capazes de combin\'e1-los com a classe base para formar a classe derivada. \line Modifica\'e7\'f5es de uma classe base n\'e3o requerem que as classes derivadas mudem, desde que as interfaces public e protected da classe base permane\'e7am inalteradas. As classes derivadas podem, contudo, precisar ser recompiladas. \par
9.8 \par
9.9 \par
9.10 \par
606 C++ COMO PROGRAMAR \line relativos das duas abordagens, tanto para o problema de Point, Circie e Cylinder como para os programas orientados a objetos em geral. \line 9.10 Reescreva o programa Point, Circie e Cylinder da Fig. 9.10 como um programa Point, Square e Cube. Fa\'e7a isso de duas maneiras - uma com heran\'e7a e uma com composi\'e7\'e3o. \line 9.11 Neste cap\'edtulo, afirmamos: \ldblquote Quando um membro da classe base \'e9 inadequado para uma classe derivada, esse membro pode ser sobrescrito na classe derivada, com um implementa\'e7\'e3o adequada\rdblquote . Se isto \'e9 feito, ainda vale o relacionamento \ldblquote um objeto da classe derivada \'e9 um objeto da classe base\rdblquote  ? Explique sua resposta. \line 9.12 Estude a hierarquia de heran\'e7a da Fig. 9.2. Para cada classe, indique alguns atributos e comportamentos comuns consistentes com a hierarquia. Acrescente algumas outras classes (por ex.. EstudanteDeGraduacao. EstudanteDePosGraduacao. Calouro, SeguridoAnista. Junior, Senior. etc.) para enriquecer a hierarquia. \line 9.13 Escreva uma hierarquia de heran\'e7a para as classes Quadrilatero, Trapezoide. ParaJ.elogramo. Retangulo \line e Quadrado. Use Quadrilatero como a classe base da hierarquia. Torne a hierarquia a mais profunda poss\'edvel (i.e., como \line muitos n\'edveis). Os dados private de Quadrilatero devem ser os pares de coordenadas (x, y) para os quatro v\'e9rtices do \line Quadrilatero. Escreva um programa de teste que instancia e exibe objetos de cada uma dessas classes. \line 9.14 Escreva todas as formas de que voc\'ea conseguir se lembrar - tanto formas de duas dimens\'f5es como de tr\'eas dimens\'f5es - e, com essas formas, crie uma hierarquia de formas. Sua hierarquia deveria ter a classe base Forma, da qual as classes FormaBiDimensional e FormaTriDimensional s\'e3o derivadas. Uma vez que voc\'ea tenha desenvolvido a hierarquia, defina cada uma das classes na hierarquia. Usaremos esta hierarquia nos exerc\'edcios do Cap\'edtulo 10 para processar todas as formas como objetos da classe base Forma. Essa t\'e9cnica \'e9 chamada de polimorfismo. \par
uS onentad a \par
flUfl5 \line duacao \line hierarquia \line tangul0 \line\pard (1.e., como \lquote ertices (lo \lang1046\par
}
 