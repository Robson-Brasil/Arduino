{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fcharset0 Times New Roman;}}
\viewkind4\uc1\pard\sb100\sa240\lang2070\f0\fs24\par
\par
17 \line O pr\'e9-processador \line Objetivos \line Ser capaz de usar #include para desenvolver programas \line de usar #define para criar macros e macros \line com argumentos \line ,( 7 Compreender a compila\'e7\'e3o condicional \line > \bullet  Ser capaz de exibir mensagens de erro durante a compila \'e7\'e3 condicional \line\bullet  Ser capaz de usar asser\'e7\'f5es para testar se os valores de ex press\'f5e est\'e3o corretos \line Mantenha o bom; defina-o bem. \line Alfred, Lord Tennyson \line Encontrei-lhe um argumento; mas n\'e3o \line sou obrigado afaz\'ea-lo entender \line Samuel Johnson \line Um bom s\'edmbolo \'e9 o melhor argumento \line e \'e9 capaz de persuadir milhares. \line Raph Waldo Emerson \line Condi\'e7\'f5es s\'e3o fundamentalmente saud\'e1veis. \line Herbert Hoover (dezembro de 1929) \line O partid\'e1rio, ao se engajar em uma disputa, n\'e3o se preocupa em nada com os direitos da quest\'e3o, tnas fica ansioso somente para convencer seus ouvintes de suas pr\'f3prias afirma\'e7\'f5es. Plat\'e3o \par
856 C++ COMO PROGRAMAR \line\ul Vis\'e3o Geral \ulnone\line 17.1 Introdu\'e7\'e3o \line 17.2 A diretiva #include do pr\'e9-processador \line 17.3 A diretiva #define do pr\'e9-processador: constantes simb\'f3licas \line 17.4 A diretiva #define do pr\'e9-processador: macros \line 17.5 Compila\'e7\'e3o condicional \line 17.6 As diretivas #error e #pragma do pr\'e9-processador \line 17.7 Os operadores # e ## \line 17.8 N\'fameros de linhas \line 17.9 Constantes simb\'f3licas predefinidas \line 17.10 Asser\'e7\'f5es \line Resumo . Terminologia Erros comuns de programa\'e7\'e3o Boas pr\'e1ticas de programa\'e7\'e3o Dica de desempenho\bullet  Observa\'e7\'e3o de engenharia de software Exerc\'edcios de auto-revis\'e3o Respostas aos exerc\'edcios de auto-revis\'e3o \bullet  Exerc\'edcios \line 17.1 Introdu\'e7\'e3o \line Este cap\'edtulo apresenta o pr\'e9-processador O pr\'e9-processamento ocorre antes de um programa ser compilado. Algumas das a\'e7\'f5es poss\'edveis s\'e3o: inclus\'e3o de outros arquivos no arquivo que est\'e1 sendo compilado, defini\'e7\'e3o de constantes simb\'f3licas e macros, compila\'e7\'e3o condicional do c\'f3digo do programa e execu\'e7\'e3o condicional das diretivas do pr\'e9-processador. Todas as diretivas do pr\'e9-processador come\'e7am com e somente caracteres de espa\'e7o em branco podem aparecer antes de uma diretiva para o pr\'e9-processador em uma linha. As diretivas para o pr\'e9-processador n\'e3o s\'e3o comandos de C++, de modo que n\'e3o terminam com um ponto-e-v\'edrgula ( ;). As diretivas para o pr\'e9-processador s\'e3o completamente processadas antes de a compila\'e7\'e3o come\'e7ar. \line Erro comum de programa\'e7\'e3o 17.1 \line Colocar um ponto-e-vfrgula no fim de uma diretiva para o pr\'e9-processador pode levar a diversos erros, \line dependendo da diretiva para o pr\'e9-processador \line Observa\'e7\'e3o de engenharia de software 17.1 \line ______ Muitos dos recursos do pr\'e9-processador (especialmente macros) s\'e3o mais apropriados para pro gramadores de C do que para programadores de C+ +. Os programadores de C+ + devem se familiarizar com o pr\'e9-processador porque eles podem necessitar trabalhar com c\'f3digo legado em C. \line 17.2 A diretiva #include do pr\'e9-processador \line A diretiva do pr\'e9-processador #include tem sido usada ao longo de todo este texto. A diretiva #include faz com que uma c\'f3pia de um arquivo especificado seja inclu\'edda no lugar da diretiva. As duas formas da diretiva #include s\'e3o: \line #include <filename> \line #include filename\rdblquote  \line A diferen\'e7a entre estas duas \'e9 a localiza\'e7\'e3o em que o pr\'e9-processador procura o arquivo a ser inclu\'eddo. Se o nome do arquivo (\ldblquote filename\rdblquote ) est\'e1 incluso entre os sinais de menor e maior (< e >) - usado para arquivos de cabe\'e7alho da \par
CAP\'cdTULO 17 - O PR\'c9-PROCESSADOR 857 \line biblioteca padr\'e3o - o pr\'e9-processador procura o arquivo especificado de uma maneira dependente da imp1ementa\'e7o, normalmente em diret\'f3rios pr\'e9-designados. Se o nome do arquivo est\'e1 incluso entre aspas, o pr\'e9-processador primeiro pesquisa o diret\'f3rio em que est\'e1 o arquivo que est\'e1 sendo compilado e, ent\'e3o, da mesma maneira dependente de implementa\'e7\'e3o que usa para um nome de arquivo incluso entre menor e maior. Este m\'e9todo \'e9 normalmente usado para incluir arquivos de cabe\'e7alho definidos pelo programador. \line A diretiva #include \'e9 normalmente usada para incluir arquivos de cabe\'e7alho padr\'e3o como <iostreaxn> e <iomanip>. A diretiva #include tamb\'e9m \'e9 usada com programas que consistem em diversos arquivos-fonte que devem ser compilados juntos. Um arquivo de cabe\'e7alho contendo declara\'e7\'f5es e defini\'e7\'f5es comuns aos arquivos de programas separados freq\'fcentemente \'e9 criado e inclu\'eddo no arquivo. Exemplos de tais declara\'e7\'f5es s\'e3o dasses, estruturas, uni\'f5es, enumera\'e7\'f5es e prot\'f3tipos de fun\'e7\'f5es. \line 17.3 A diretiva #define do pr\'e9-processador: constantes simb\'f3licas \line A diretiva para o pr\'e9-processador #define cria constantes simb\'f3licas - constantes representadas como s\'edmbolos \line - e macros - opera\'e7\'f5es definidas como s\'edmbolos. O formato da diretiva #define para o pr\'e9-processador \'e9 #define identificador texto de substitui\'e7\'e3o \line Quando esta linha aparece em um arquivo, todas as ocorr\'eancias subseq\'fcentes de identificador (exceto aquelas dentro de um string) ser\'e3o substitu\'eddas pelo texto de substitui\'e7\'e3o antes que o programa seja compilado. Por exemplo, \line #define P1 3.14159 \line substitui todas as ocorr\'eancias subseq\'fcentes da constante simb\'f3lica P1 pela constante num\'e9rica 3. 14159. Constantes simb\'f3licas permitem ao programador criar um nome para uma constante e usar esse nome ao longo de todo o programa. Se a constante precisar ser modificada em todo o programa, ela pode ser modificada apenas uma vez na diretiva #define - e quando o programa \'e9 recompilado, todas as ocorr\'eancias da constante no programa ser\'e3o modificadas. Nota: tudo o que est\'e1 \'e0 direita do nome da constante simb\'f3lica substitui a constante simb\'f3lica. Por exemplo, #define P1 = 3.14159 faz com que o compilador substitua cada ocorr\'eancia de P1 por = 3.14159. Isto \'e9 a causa de muitos erros sutis de l\'f3gica e de sintaxe. Redefinir uma constante simb\'f3lica com um novo valor tamb\'e9m \'e9 um erro. Note que em C\'f7+ \'e9 prefer\'edvel usar vari\'e1veis const em vez de constantes simb\'f3licas. Vari\'e1veis constantes t\'eam um tipo de dado espec\'edfico e s\'e3o vis\'edveis por nome para um depurador. Uma vez que uma constante simb\'f3lica \'e9 substitu\'edda pelo seu texto de substitui\'e7\'e3o, somente o texto de substitui\'e7\'e3o permanece vis\'edvel para o depurador. Uma desvantagem das vari\'e1veis const \'e9 que elas podem necessitar de uma posi\'e7\'e3o de mem\'f3ria do tamanho do seu tipo de dado - constantes simb\'f3licas n\'e3o necessitam de qualquer quantidade de mem\'f3ria adicional. \line Erro comum de programa\'e7\'e3o 17.2 \line Usar constantes simb\'f3licas em um arquivo diferente daquele no qual as constantes s\'e3o definidas \'e9 um \line erro de sintaxe. \line Boa pr\'e1tica de programa\'e7\'e3o 17.1 \line Usar nomes que t\'eam um significado para constantes simb\'f3licas ajuda a tornar os programas mais auto- \line documentados. \line 17.4 A diretiva #define do pr\'e9-processador: macros \line [Nota: esta se\'e7\'e3o foi inclu\'edda para auxiliar os programadores de C++ que necessitar\'e3o trabalhar com c\'f3digo legado em C. Em C++, as macros foram substitu\'eddas por gabaritos e fun\'e7\'f5es mimei. Uma macro \'e9 uma opera\'e7\'e3o definida em uma diretiva #define para o pr\'e9-processador. Da mesma maneira que ocorre com as constantes simb\'f3licas, o identificador da macro \'e9 substitu\'eddo pelo texto de substitui\'e7\'e3o antes de o programa ser compilado. Macros podem ser definidas com ou sem argumentos. Uma macro sem argumentos \'e9 processada como uma constante simb\'f3lica. Em uma macro com argumentos, os argumentos s\'e3o substitu\'eddos no texto de substitui\'e7\'e3o e, ent\'e3o, a \par
858 C++ COMO PROGRAMAR \line macro \'e9 expandida - ou seja, o texto de substitui\'e7\'e3o substitui o identificador da macro e a lista de argumentos no programa. (Nota: n\'e3o h\'e1 verifica\'e7\'e3o de tipos de dados para os argumentos de uma macro. Uma macro \'e9 usada simplesmente para substitui\'e7\'e3o de texto). \line Considere a seguinte defini\'e7\'e3o de uma macro com um argumento, para o c\'e1lculo da \'e1rea de um c\'edrculo: \line #define CIRCLEAREA( x ) ( P1 * ( x ) * ( x \line Onde quer que CIRCLE_AREA ( x ) apare\'e7a no arquivo, o valor de x substitui x no texto de substitui\'e7\'e3o, a constante simb\'f3lica P1 \'e9 substitu\'edda pelo seu valor (definido anteriormente) e a macro \'e9 expandida no programa. Por exemplo, o comando \line area = CIRCLEAREA( 4 ); \line\'e9 expandido para \line area = ( 3.14159 * ( 4 ) * ( 4 ) ) \line Como a express\'e3o consiste apenas em constantes, durante a compila\'e7\'e3o o valor da expressao e calculado e o resultado \'e9 atribu\'eddo a area durante a execu\'e7\'e3o. Os par\'eanteses em torno de cada x, no texto de substitui\'e7\'e3o, e em torno de toda a express\'e3o for\'e7am a ordem correta de c\'e1lculo quando o argumento da macro \'e9 uma express\'e3o. Por exemplo, o comando \line = CIRCLEAREA( c = 2 ); \line\'e9 expandido para \line area= (3.14159 * (c+2 ) * (c+2 ) ); \line a qual \'e9 avaliada corretamente porque os par\'eanteses for\'e7am a ordem certa de c\'e1lculo. Se os par\'eanteses s\'e3o omitidos. a expans\'e3o da macro \'e9 \line area=3.14159 * c+2 * c+ 2; \line que \'e9 calculada, incorretamente, como \line area= (3.14159 * c ) * (2 * C ) + 2; \line por causa das regras de preced\'eancia de operadores. \line Erro comum de programa\'e7\'e3o 17.3 \line Esquecer de colocar entre par\'eanteses argumentos de uma macro, no texto de substitui\'e7\'e3o. \line A macro CIRCLE AREA poderia ser definida como uma fun\'e7\'e3o. A fun\'e7\'e3o circleArea \line double circleArea ( double x ) \{ returri 3.14159 * x * x; \line executa o mesmo c\'e1culo que CIRCLE AREA. mas o overhead de uma chamada de fun\'e7\'e3o est\'e1 associado com a fun\'e7\'e3o circleArea. As vantagens do uso de CIRCLE AP.EA est\'e3o no fato de que macros inserem o c\'f3digo diretamente no programa - evitando overhead das fun\'e7\'f5es - e o programa permanece leg\'edvel porque CIRCLE_AREA \'e9 definida separadamente e recebe um nome com significado. Uma desvantagem \'e9 que o argumento \'e9 avaliado duas vezes. Al\'e9m disso, cada vez que uma macro aparece no programa, a macro \'e9 expandida. Se a macro for grande, isso produz um aumento do tamanho do programa. Assim, existe um compromisso entre velocidade de execu\'e7\'e3o e tamanho de programa (o espa\'e7o em disco pode ser pequeno). Note que fun\'e7\'f5es in].ine (ver Cap\'edtulo 3) s\'e3o prefer\'edveis para obter o desempenho das macros e o benef\'edcio de engenharia de software das fun\'e7\'f5es. \par
CAP\'cdTULO 17 - O PR\'c9-PROCESSADOR 859 \line\ul I-tDica \ulnone de desempenho 17.1 \line -F \'c0s vezes, as macros podem ser usadas para substituir uma chamada defun\'e7\'e3o por c\'f3digo mime, antes da execu\'e7\'e3o do programa. Isso elimina o overhead de uma chamada de fun\'e7\'e3o. Fun\'e7\'f5es mime s\'e3o \line prefer\'edveis a macros, porque oferecem os servi\'e7os de verca\'e7\'e3o de tipos das fun\'e7\'f5es. \line A seguinte defini\'e7\'e3o \'e9 uma defini\'e7\'e3o de macro com 2 argumentos para o c\'e1lculo da \'e1rea de um ret\'e2ngulo: \line #define RECTANGLEAREA( x, y ) ( ( x ) ( y ) \line Onde quer que RECTANGLE AREA ( x, y ) apare\'e7a no programa, os valores de x e y s\'e3o substitu\'eddos no texto \line de substitui\'e7\'e3o da macro e a macro \'e9 expandida no lugar do nome da macro. Por exemplo, o comando \line rectArea = RETANGLEAREA ( a + 4, b + 7 ); \line\'e9 expandido para: \line rect\'e0rea ( (a+4 ) * (b+7 ) ); \line O valor da express\'e3o \'e9 avaliado e atribu\'eddo \'e0 vari\'e1vel rectArea. \line O texto de substitui\'e7\'e3o para uma macro ou constante simb\'f3lica normalmente \'e9 qualquer texto existente na linha ap\'f3s o identificador na diretiva #define. Se o texto de substitui\'e7\'e3o para uma macro ou constante simb\'f3lica \'e9 mais longo que o restante da linha, uma barra invertida ( \\ ) deve ser colocada no fim da linha para indicar que o texto de substitui\'e7\'e3o continua na pr\'f3xima linha. \line Constantes simb\'f3licas e macros podem ser descartadas usando-se a diretiva para o pr\'e9-processador #undef. A diretiva #undef \ldblquote anula a defini\'e7\'e3o\rdblquote  do nome de uma constante simb\'f3lica ou macro. O escopo de uma constante simb\'f3lica ou macro vai da sua defini\'e7\'e3o at\'e9 o ponto em que sua defini\'e7\'e3o \'e9 anulada com #undef ou at\'e9 o final do arquivo. \line As fun\'e7\'f5es da biblioteca padr\'e3o algumas vezes s\'e3o definidas como macros baseadas em outras fun\'e7\'f5es de \line biblioteca. Uma macro comumente definida no arquivo de cabe\'e7alho <cstdio> \'e9 \line #defirie getchar() getc( stdin \line A defini\'e7\'e3o de macro de getchar usa a fun\'e7\'e3o getc para obter um caractere do stream padr\'e3o de entrada. A fun\'e7\'e3o putchar do arquivo de cabe\'e7alho <cstdio> e as fun\'e7\'f5es de manipula\'e7\'e3o de caracteres do arquivo de cabe\'e7alho <cctype> tamb\'e9m s\'e3o freq\'fcentemente implementadas como macros. Note que express\'f5es com efeitos colaterais (i.e, os valores de vari\'e1veis s\'e3o modificados) n\'e3o devem ser passadas para uma macro, porque os argumentos de uma macro podem ser avaliados mais de uma vez. \line 17.5 Compila\'e7\'e3o condicional \line A compila\'e7\'e3o condicional permite ao programador controlar a execu\'e7\'e3o das diretivas do pr\'e9-processador e a compila\'e7\'e3o do c\'f3digo do programa. Cada uma das diretivas condicionais para o pr\'e9-processador avalia uma express\'e3o constante inteira que ir\'e1 determinar se o c\'f3digo ser\'e1 compilado. Express\'f5es de coer\'e7\'e3o, express\'f5es com sizeof e constantes de enumera\'e7\'f5es n\'e3o podem ser avaliadas em diretivas para o pr\'e9-processador. \line A instru\'e7\'e3o condicional para o pr\'e9-processador \'e9 bastante semelhante \'e0 estrutura de sele\'e7\'e3o if. Considere o \line seguinte c\'f3digo para o pr\'e9-processador: \line #if !defined( NULL \line #define NULL O \line #endif \line Essas diretivas determinam se a constante simb\'f3lica NULL j\'e1 est\'e1 definida. A express\'e3o defined ( NULL ) \'e9 calculada, produzindo o valor 1 se NULL est\'e1 definido; O caso contr\'e1rio. Se o resultado \'e9 O, ! defined ( NULL \line produz 1 e NULL est\'e1 definido. Caso contr\'e1rio, a diretiva #define \'e9 pulada. Cada instru\'e7\'e3o #if termina com \par
860 C++ COMO PROGRAMAR \line endif. As diretivas #ifdef ( nome ) e #ifndef ( nome ) s\'e3o abrevia\'e7\'f5es de #ifdefined ( nome ) e #if ! defined ( nome ) . Uma instru\'e7\'e3o para o pr\'e9-processador de m\'faltiplas partes pode ser testada usando-se as diretivas #elif ( o equivalente de else if em uma estrutura if ) e #else ( o equivalente de else em uma estrutura if). \line Durante o desenvolvimento do programa, os programadores freq\'fcentemente acham \'fatil se eliminar partes significativas do c\'f3digo, transformando-o em coment\'e1rios e evitando desta maneira que este c\'f3digo seja compilado. Se o c\'f3digo cont\'e9m coment\'e1rios no estilo de C, / e / n\'e3o podem ser usados para realizar esta tarefa. Em vez disso, o programador pode usar a seguinte instru\'e7\'e3o para o pr\'e9-processador: \line #if O \line c\'f3digo que n\'e3o ser\'e1 compilado \line #endif \line Para habilitar o c\'f3digo para compila\'e7\'e3o, simplesmente substitua o valor O na instru\'e7\'e3o precedente pelo valor 1. \line A compila\'e7\'e3o condicional freq\'fcentemente \'e9 usada como um auxflio para a depura\'e7\'e3o do programa. Comandos de sa\'edda s\'e3o freq\'fcentemente usados para imprimir os valores de vari\'e1veis e para confirmar o fluxo de controle. Esses comandos de sa\'edda podem ser inclu\'eddos em diretivas condicionais do pr\'e9-processador, de maneira que os comandos s\'e3o compilados somente at\'e9 terminar o processo de depura\'e7\'e3o. Por exemplo, \line #ifdef DEBUG \line cerr \'ab Vari\'e1vel x = \ldblquote  \'ab x \'ab endi; \line #endif \line faz com que o comando cerr seja compilado no programa se a constante simb\'f3lica DEBUG foi definida ( #defi- \line ne DEBUG ) antes da diretiva #ifdef DEBUG. Quando a depura\'e7\'e3o est\'e1 completa, a diretiva #define \'e9 removi da do arquivo-fonte e os comandos de sa\'edda inseridos para fins de depura\'e7\'e3o s\'e3o ignorados durante a compila\'e7\'e3o. \line Em programas maiores, pode ser desej\'e1vel definir v\'e1rias constantes simb\'f3licas diferentes que controlam a compila \'e7\'e3 condicional em se\'e7\'f5es separadas do arquivo-fonte. \line Erro comum de programa\'e7\'e3o 17.4 \line Inserir comandos de sa\'edda compilados condicionalmente, para fins de depura \'e7\'e3o, em lugares onde C++ na verdade espera um comando simples, pode levar a erros de sintaxe e l\'f3gica. Nesse caso, o comando compilado condicionalmente deve ser inclu\'eddo em um comando composto. Assim, quando programa \'e9 compilado com comandos para depura \'e7\'e3o, o fluxo de controle do programa n\'e3o \'e9 alterado. \line 17.6 As diretivas #error e #pragma do pr\'e9-processador \line A diretiva #error \line #error unidades l\'e9xicas \line imprime uma mensagem dependente de implementa\'e7\'e3o que inclui as \ldblquote unidades l\'e9xicas\rdblquote  especificadas na diretiva. \line As \ldblquote unidades l\'e9xicas\rdblquote  s\'e3o seq\'fc\'eancias de caracteres separadas por espa\'e7os. Por exemplo, \line #error 1 - Erro de subscrito fora do intervalo v\'e1lido \line cont\'e9m nove \ldblquote unidades l\'e9xicas\rdblquote . Em um compilador C++ popular, por exemplo, quando uma diretiva #error \'e9 processada, as \ldblquote unidades l\'e9xicas\rdblquote  na diretiva s\'e3o exibidas como uma mensagem de erro, o pr\'e9-processamento para o programa n\'e3o \'e9 compilado. \line A diretiva #pragma \line #pragma unidades l\'e9xicas \par
I \line CAP\'cdTULO 17 - O PR\'c9-PROCESSADOR 861 \line f provoca uma a\'e7\'e3o definida pela implementa\'e7\'e3o. Um pragma n\'e3o-reconhecido pela implementa\'e7\'e3o \'e9 ignorado. Por LS exemplo, um compilador C++ particular pode reconhecer pra gmas que possibilitam ao programador tirar pleno a proveito dos recursos daquele compilador espec\'edfico. Para mais informa\'e7\'f5es sobre #error e #pragma, verifique \line a documenta\'e7\'e3o de sua implementa\'e7\'e3o de C+\'f7. \line 17.7 Os operadores # e ## \line Os operadores # e ## do pr\'e9-processador est\'e3o dispon\'edveis em C++ e em ANSI C. O operador # faz com que uma \ldblquote unidade l\'e9xica\rdblquote  de um texto de substitui\'e7\'e3o seja convertida em um string entre aspas. Considere a seguinte defini\'e7\'e3o de macro: \line #define ALO( x ) cout \'ab \ldblquote Al\'f4, #x \'ab endl; \line Quando AL\'d4 ( Pedro ) aparece em um arquivo de programa, ele \'e9 expandido para \line cout \'ab \ldblquote Al\'f4, \ldblquote  \ldblquote Pedro\rdblquote  \'ab endi; \line O string \ldblquote Pedro\rdblquote  substitui #x no texto de substitui\'e7\'e3o. Strings separados por espa\'e7os em branco s\'e3o concatenados durante o pr\'e9-processamento, de forma que o comando acima seria equivalente a \line cout \'ab \ldblquote Al\'f4, Pedro\rdblquote  \'ab endi; \line Note que o operador # deve ser usado em uma macro com argumentos, porque o operando de * se refere a um argumento da macro. \line O operador ## concatena duas \ldblquote unidades l\'e9xicas\rdblquote . Considere a seguinte defini\'e7\'e3o de macro: \line #define TOKENCONCAT( x, y ) x ## y \line Quando TOKENCONCAT aparece em um programa, seus argumentos s\'e3o concatenados e usados para substituir a macro. Por exemplo, TOKENCONCAT ( 0, K \'e9 substitu\'eddo por 0K no programa. O operador *# deve ter dois operandos. \line 17.8 N\'fameros de linhas \line A diretiva para opr\'e9 -processador *line faz com que as linhas subseq\'fcentes do c\'f3digo-fonte sejam renumeradas, come\'e7ando com o valor inteiro constante especificado. A diretiva \line #line 100 \line come\'e7a a numerar as linhas a partir de 100, iniciando com a pr\'f3xima linha do c\'f3digo-fonte. Um nome de arquivo pode ser inclu\'eddo na diretiva *line. A diretiva \line : #line 100 \line indica que as linhas s\'e3o numeradas a partir de 100, come\'e7ando com a pr\'f3xima linha de c\'f3digo-fonte, e que o nome do arquivo para fins de qualquer mensagem do compilador \'e9 \ldblquote file 1 . cpp\rdblquote . A diretiva normalmente \'e9 usada para ajudar a tornar as mensagens produzidas por erros de sintaxe e advert\'eancias do compilador mais significativas. Os n\'fameros de linhas n\'e3o aparecem no arquivo-fonte. \par
862 C++ COMO PROGRAMAR \line 17.9 Constantes simb\'f3licas predefinidas \line Existem quatro constantes simb\'f3licas predefinidas (Fig. 17.1). Os identificadores para cada uma das constantes simb\'f3licas predefinidas come\'e7am e terminam com dois caracteres sublinhado (_). Estes identificadores e o identificador defined (usado na Se\'e7\'e3o 17.5) n\'e3o podem ser usados nas diretivas #define e #undef. \line 17.10 Asser\'e7\'f5es \line A macro assert - definida no arquivo de cabe\'e7alho <cassert> - testa o valor de uma express\'e3o. Se o valor da express\'e3o \'e9 O (falso), ent\'e3o assert imprime uma mensagem de erro e chama a fun\'e7\'e3o abort (da biblioteca de utilit\'e1rios gerais - <cstdlib>) para terminar a execu\'e7\'e3o do programa. Esta \'e9 uma ferramenta \'fatil para depura\'e7\'e3o, para testar se uma vari\'e1vel tem um valor correto. Por exemplo, suponha que a vari\'e1vel x nunca deva ser maior que 10 em um programa. Pode ser usada uma asser\'e7\'e3o para testar o valor de x e imprimir uma mensagem de erro se o valor de x estiver incorreto. O comando seria: \line assert( x <=10 ); \line Se x for maior que 10 quando o comando precedente \'e9 encontrado em um programa, \'e9 impressa uma mensagem de erro contendo o n\'famero da linha e o nome do arquivo, e o programa termina. O programador pode, ent\'e3o, se concentrar nesta \'e1rea do c\'f3digo para encontrar o erro. Se a constante simb\'f3lica NDEBUG est\'e1 definida, as asser\'e7\'f5es subseq\'fcentes ser\'e3o ignoradas. Assim, quando as asser\'e7\'f5es n\'e3o s\'e3o mais necess\'e1rias (i.e, quando a depura\'e7\'e3o est\'e1 completa), a linha \line #defirie NDEBUG \line\'e9 inserida no programa, em vez de deletar manualmente cada asser\'e7\'e3o. \par
Fig. 17.1 As constantes simb\'f3licas predefinidas. \line Muitos compiladores C++ agora incluem o tratamento de exce\'e7\'f5es. Os programadores de C++ preferem usar exce\'e7\'f5es em lugar de asser\'e7\'f5es. Por\'e9m, as asser\'e7\'f5es ainda t\'eam seu valor para os programadores de C++ que trabalham com c\'f3digo legado em C. \line Resumo \line\bullet  Todas as diretivas para o pr\'e9-processador come\'e7am com e s\'e3o processadas antes de o programa ser compilado. \line\bullet  Somente caracteres em branco podem aparecer em uma linha antes de uma diretiva para o pr\'e9-processador. \line\bullet  A diretiva #include inclui uma c\'f3pia do arquivo especificado. Se o nome do arquivo est\'e1 entre aspas, o pr\'e9-processador come\'e7a a busca do arquivo a ser inclu\'eddo no mesmo diret\'f3rio que o arquivo que est\'e1 sendo compilado. Se o nome do arquivo est\'e1 entre menor (<) e maior (>), a busca \'e9 feita segundo uma forma definida pela implementa\'e7\'e3o. \line\bullet  A diretiva #define para o pr\'e9-processador \'e9 usada para criar constantes simb\'f3licas e macros. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1812\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx8946\pard\intbl Constante simb\'f3lica \cell Descri\'e7\'e3o \cell\row
\intbl\cell O n\'famero de linha da linha de c\'f3digo-fonte atual (uma constante inteira). \cell\row
\intbl\cell O nome presumido de um arquivo-fonte (um string). \cell\row
\intbl\cell A data em que o arquivo fonte \'e9 compilado (um string da forma \ldblquote Mmm dd yyyy\rdblquote  tal como \ldblquote Jan 19 2001\rdblquote ). \cell\row
\intbl\cell A hora em que o arquivo fonte \'e9 compilado (um string literal da forma \ldblquote hh:mm:ss\rdblquote ). \cell\row
\pard\par
\par
\pard\sb100\sa240 CAP\'cdTULO 17 - O PR\'c9-PROCESSADOR 863 \par
\bullet  Uma constante simb\'f3lica \'e9 um nome para uma constante. \line\bullet  Uma macro \'e9 uma opera\'e7\'e3o definida em uma diretiva #define. Macros podem ser definidas com ou sem argumentos. \line\bullet  O texto de substitui\'e7\'e3o para uma macro ou constante simb\'f3lica \'e9 qualquer texto no restante da linha, ap\'f3s o identificador da diretiva #define. Se o texto de substitui\'e7\'e3o para uma macro ou constante simb\'f3lica for muito longo para caber de forma clara em uma linha. uma barra invertida (\\) \'e9 colocada no fim da linha, indicando que o texto de substitui\'e7\'e3o continua na linha seguinte. \line\bullet  Constantes simb\'f3licas e macros podem ser descartadas usando-se a diretiva #undef. A diretiva #undef anula a defini\'e7\'e3o do nome da constante simb\'f3lica ou macro. \line\bullet  O escopo de uma constante simb\'f3lica ou macro vai de sua defini\'e7\'e3o at\'e9 que seja anulada por #undef ou at\'e9 o final do arquivo. \line\bullet  A compila\'e7\'e3o condicional possibilita ao programador controlar a execu\'e7\'e3o das diretivas para o pr\'e9-processador e a compila\'e7\'e3o do c\'f3digo do programa. \line\bullet  As diretivas condiconais para o pr\'e9-processador avaliam express\'f5es inteiras constantes. Express\'f5es de coer\'e7\'e3o, express\'f5es com sizeof e constantes de enumera\'e7\'e3o n\'e3o podem ser avaliadas em diretivas para o pr\'e9-processador. \line\bullet  Cada instru\'e7\'e3o #if termina com uma instru\'e7\'e3o #endif. \line\bullet  As diretivas #ifdef e #ifndef s\'e3o fornecidas como abrevia\'e7\'f5es para #if defined (nome) e #if ! defined (nome). \line\bullet  Uma instru\'e7\'e3o condicional de m\'faltiplas partes para o pr\'e9-processador pode ser testada usando-se as diretivas #elif e #else. \line\bullet  A diretiva #error imprime uma mensagem dependente da implementa\'e7\'e3o que inclui as \ldblquote unidades l\'e9xicas\rdblquote  especificadas na diretiva e termina o pr\'e9-processamento e a compila\'e7\'e3o. \line\bullet  A diretiva #pragma provoca uma a\'e7\'e3o dependente da implementa\'e7\'e3o. Se opragma n\'e3o \'e9 reconhecido pela implementa\'e7\'e3o, o pra gmo \'e9 ignorado. \line\bullet  O operador # faz com que uma \ldblquote unidade l\'e9xica\rdblquote  do texto de substitui\'e7\'e3o seja convertida em um string entre aspas. O operador # deve ser usado com uma macro com argumentos, porque o operando de # deve ser um argumento da macro. \line\bullet  O operador ## concatena duas \ldblquote unidades l\'e9xicas\rdblquote . O operador ## deve ter dois operandos. \line\bullet  A diretiva #line faz com que as linhas de c\'f3digo-fonte subseq\'fcentes sejam renumeradas, come\'e7ando com o valor constante inteiro especificado. \line\bullet  Existem quatro constantes simb\'f3licas pre-definidas. A constante LINE_ \'e9 o n\'famero da linha atual do c\'f3digo-fonte (um inteiro). A constante FILE \'e9 o nome presumido de um arquivo (um string). A constante _DATE_ \'e9 a data em que o arquivo-fonte \'e9 compilado (um string). A constante TIME \'e9 a hora em que o arquivo fonte \'e9 compilado (um string). Note que cada uma das constantes predefinidas come\'e7am e terminam com dois caracteres sublinhado (_). \line\bullet  A macro assert - definida no arquivo de cabe\'e7alho <cassert> - testa o valor de uma express\'e3o. Se o valor da express\'e3o \'e9 O (falso), ent\'e3o assert imprime uma mensagem de erro e chama a fun\'e7\'e3o abort para terminar a execu\'e7\'e3o do programa. \line Terminologia \line ## operador de concatena\'e7\'e3o do pr\'e9-processador DATE \line #define FILE \line #elif LIME \line #else TIME \line #endif <cstdio> \line #error <cstdlib> \line #if abort \line #ifdef argumento \line #ifndef arquivo de cabe\'e7alho \line #include \ldblquote filenarne\rdblquote  arquivos de cabe\'e7alho da biblioteca padr\'e3o \line #include <filename> assert \line #line caractere de continua\'e7\'e3o barra invertida (\\) \line #pragina cassert \line #undef compila\'e7\'e3o condicional \par
\pard\par
\pard\sb100\sa240 864 C++ COMO PROGRAMAR \par
constante simb\'f3lica expandir uma macro \line constantes simb\'f3licas predefinidas macro \line depurador macro com argumentos \line diretiva para o pr\'e9-processador operador # \line diretivas pr\'e9-processador \line escopo de uma constate simb\'f3lica ou de uma macro pr\'e9-processador de convers\'e3o para string \line execu\'e7\'e3o condicional do pr\'e9-processador texto de substitui\'e7\'e3o \line 17.1 Colocar um ponto-e-v\'edrgula no fim de uma diretiva para o pr\'e9-processador pode levar a diversos erros, dcpcndcndu ua diretiva para o pr\'e9-processador. \line 17.2 Usar constantes simb\'f3licas em um arquivo diferente daquele no qual as constantes s\'e3o definidas \'e9 um erro de sintaxe. \line 17.3 Esquecer de colocar entre par\'eanteses argumentos de uma macro, no texto de substitui\'e7\'e3o. \line 17.4 Inserir comandos de sa\'edda compilados condicionalmente, para fins de depura\'e7\'e3o, em lugares onde C++ na verdade espera um comando simples, pode levar a erros de sintaxe e l\'f3gica. Nesse caso, o comando compilado condicionalmente deve ser inclu\'eddo em um comando composto. Assim, quando programa \'e9 compilado com comandos para depura\'e7\'e3o, o fluxo de controle do programa n\'e3o \'e9 alterado. \line Boa pr\'e1tica de programa\'e7\'e3o \line 17.1 Usar nomes que t\'eam uni signiticado para constantes simb\'f3licas ajuda a tornar os programas mais autodocuinentados. \line Dica de desempenho \line 17.1 \'c0s vezes, as macros podem ser usadas para substituir uma chamada de fun\'e7\'e3o por c\'f3digo mime, antes da execu\'e7\'e3o do programa. Isso elimina o overhead de uma chamada de fun\'e7\'e3o. Fun\'e7\'f5es mime s\'e3o prefer\'edveis a macros, porque oferecem os servi\'e7os de verifica\'e7\'e3o de tipos das fun\'e7\'f5es. \line Observa\'e7\'e3o de engenharIa de software \line 17.1 Muitos dos recursos do pr\'e9-processador (especialmente macros) s\'e3o mais apropriados para programadores de C do que para programadores de C++. Os programadores de C++ devem se familiarizar com o pr\'e9-processador porque eles podem necessitar trabalhar com c\'f3digo legado em C. \line Exerc\'edcios de auto-revis\'e3o \line 17.1 Preencha os espa\'e7os em branco em cada um dos seguintes itens: \line a) Cada diretiva para o pr\'e9-processador deve come\'e7ar com ____________________ \line b) A instru\'e7\'e3o de compila\'e7\'e3o condicional pode ser estendida para se testar m\'faltiplos casos usando-se a diretiva ____________________ e a diretiva ____________________ \line c) A diretiva ______________________ cria macros e constantes simb\'f3licas. \line d) Em uma linha, somente caracteres podem aparecer antes de uma diretiva para o pr\'e9-processador. \line e) A diretiva ____________________ descarta nomes de constantes simb\'f3licas e de macros. \line f) A diretiva e a diretiva ___________________ s\'e3o fornecidas como abrevia\'e7\'f5es para #if defined (nome) e #if ! defined (nome). \line g) possibilita ao programador controlar as diretivas para o pr\'e9-processador e a compila\'e7\'e3o do c\'f3digo do programa. \line h) A macro imprime uma mensagem e termina a execu\'e7\'e3o do programa se o valor da express\'e3o da macro \'e9 avaliado como O. \line i) A diretiva ___________________ insere um arquivo em outro arquivo. \line j) O operador concatena seus dois argumentos. \line k) O operador converte seu operando em um string. \par
Erros comuns de programa\'e7\'e3o \par
CAP\'cdTULO 17 - O PR\'c9-PROCESSADOR 865 \line 1) O caractere ___________________ indica que o texto de substitui\'e7\'e3o para uma constante simb\'f3lica ou uma macro continua na pr\'f3xima linha. \line m) A diretiva ___________________ faz com que as linhas de c\'f3digo-fonte sejam numeradas a partir do valor indicado, come\'e7ando na linha seguinte do c\'f3digo-fonte. \line 17.2 Escreva um programa que imprime os valores das constantes simb\'f3licas predefinidas listadas na Fig. 17.1. \line 17.3 Escreva uma diretiva para o pr\'e9-processador para realizar cada um dos seguintes itens: \line a) Defina a constante simb\'f3lica YES como tendo o valor 1. \line b) Defina a constante simb\'f3lica NO como tendo o valor 0. \line c) Inclua o arquivo de cabe\'e7alho cornmom h. O de cabe\'e7alho se encontra no mesmo diret\'f3rio do arquivo que est\'e1 sendo compilado. \line d) Renumere as linhas remanescentes no arquivo come\'e7ando com o n\'famero de linha 3000. \line e) Se a constante simb\'f3lica TRUE est\'e1 definida, \ldblquote anule-a\rdblquote  e redefina-a como 1. N\'e3o use #ifdef. \line O Se a constante simb\'f3lica TRUE est\'e1 definida, \ldblquote anule-a\rdblquote  e redefina-a como 1. Use a diretiva do pr\'e9-processador #ifdef. \line g) Se a constante simb\'f3lica ACTIVE n\'e3o \'e9 igual a 0, defina a constante simb\'f3lica INACTIVE como 0. Caso contr\'e1rio, defina INACTIVE como 1. \line h) Defina a macro CUBE VOLUME que calcula o volume de um cubo (recebe um argumento). \line Respostas aos exerc\'edcios de auto-revis\'e3o \line 17.1 a) #. b) #elif, #else. c) #define. d) espa\'e7o em branco, e) #undef. #ifdef, #ifndef. g) Compila\'e7\'e3o condicional. h) assert. i) #include.j) ##. k) #. 1) \\. m) #line. \line 17.2 (Ver abaixo) \line 1 #include <iostreajn> \line 2 using std::cout; \line 3 usirig std::endl; \line 4 int main() \line 5 \{ \line 6 cout \'ab \ldblquote LINE = \ldblquote  \'ab LINE \'ab endi; \line 7 cout \'ab \ldblquote FILE = \ldblquote  \'ab FILE \'ab endl; \line 8 cout \'ab \ldblquote DATE = \lquote  \'ab _DATE_ \'ab endi; \line 9 cout \'ab \ldblquote TIME = \ldblquote  \'ab TIME \'ab endi; \line 10 return 0; \line 11 \line LINE =6 \line ZFILEZ = C:\\exl7_02.cpp \line _DATE_ = Apr 28 2000 \line TIME = 13:48:58 \line 17.3 a) #define YES 1 \line b) #define NO O \line e) #include \ldblquote common.h\rdblquote  \line d) #line 3000 \line e) #if defmned(TRUE) \line #undef TRUE \line #define TRUE 1 \line #endif \line 1) #ifdef TRUE \line #undef TRUE \line #define TRUE 1 \line #endif \par
866 C++ COMO PROGRAMAR \line g) #if ACTIVE \line #define INACTIVE O \line #else \line #define INACTIVE 1 \line #endif \line h) #define CUBE VOLUME( x ) ( ( x ) * ( x ) * ( x \line Exerc\'edcios \line 17.4 Escreva um programa que define uma macro com um argumento para calcular o volume de uma esfera. O programa deve \line calculas o volume para esferas de raios de 1 a 10 e imprimir os resultados em formato de tabela. A f\'f3rmula do volume da esfera \'e9: \line ( 4.0 / 3 ) * it * r3 \line onde it \'e9 3.14159. \line 17.5 Escreva um programa que produza a seguinte sa\'edda: \line 1 Asomadexey\'e9l3 \line O programa deve definir a macro SUM com dois argumentos, x e y, e usar SUM para produzir a sa\'edda. \line 17.6 Escreva um programa que usa a macro MINIMO2 para determinar o menor de dois valores num\'e9ricos. Fome\'e7a os valores pelo teclado. \line 17.7 Escreva um programa que usa a macro MINIMO3 para determinar o menor de tr\'eas valores num\'e9ricos. A macro MINIMO3 deve usar a macro MINIMO2 definida no Exerc\'edcio 17.6 para determinar o menor n\'famero. Forne\'e7a os valores pelo teclado. \line 17.8 Escreva um programa que usa a macro IMPRIMIR para imprimir o valor de um string. \line 17.9 Escreva um programa que usa a macro IMPRIMIRARRAY para imprimir um array de inteiros. A macro deve receber o array e o n\'famero de elementos no array como argumentos. \line 17.10 Escreva um programa que usa a macro SOM ARARRAY para somar os valores em um array num\'e9rico. A macro deve receber o array e o n\'famero de elementos no array como argumentos. \line 17.11 Rescreva as solu\'e7\'f5es para 17.4 a 17.10 como fun\'e7\'f5es mune. \line 17.12 Para cada uma das seguintes macros, identifique os poss\'edveis problemas (caso existam) quando o pr\'e9-processador expan dir as macros: \line a) #define SQR( x ) x * x \line b) #define SQR( x ) ( x * x \line e) #define SQR( x ) ( x ) * ( x ) \line d) #define SQR( x ) ( ( x ) * ( x ) ) \par
\pard\lang1033\f1\fs20\par
}
 