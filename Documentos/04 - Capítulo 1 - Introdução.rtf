{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fcharset0 Times New Roman;}}
\viewkind4\uc1\pard\sb100\sa240\lang2070\f0\fs24\par
Introdu\'e7\'e3o aos computadores e \'e0 programa\'e7\'e3o C++ \line Objetivos \par
\bullet  Entender conceitos b\'e1sicos de Ci\'eancia da Computa\'e7\'e3o. \line\bullet  Familiarizar-se com tipos diferentes de linguagens de programa\'e7\'e3o. \line\bullet  Entender um ambiente de desenvolvimento de programas C++ t\'edpico. \line\bullet  Ser capaz de escrever programas simples de computador em C++. \line\bullet  Ser capaz de usar comandos de entrada e sa\'edda simples. \line\bullet  Familiarizar-se com tipos de dados fundamentais. \line\bullet  Ser capaz de usar operadores aritm\'e9ticos. \line\bullet  Entender a preced\'eancia de operadores aritm\'e9ticos. \line\bullet  Ser capaz de escrever comandos de tomada de decis\'e3o simples. \line Pensamentos elevados devem ter uma linguagem elevada. \line Arist\'f3fanes \line Nossa vida \'e9 desperdi\'e7ada em detalhes... Simplifique, simplifi que. \line Henry Thoureau \line My object all sublime \line 1 shall achieve in time. \line W. 5. Gilbert \par
50 C++ COMO PROGRAMAR \par
\ul Vis\'e3o Geral \ulnone\line 1.1 Introdu\'e7\'e3o \line 1.2 O que \'e9 um computador? \line 1.3 Organiza\'e7\'e3o de computadores \line 1.4 Evolu\'e7\'e3o dos sistemas operacionais \line 1.5 Computa\'e7\'e3o pessoal, computa\'e7\'e3o distribu\'edda e computa\'e7\'e3o cliente/servidor \line 1.6 Linguagens de m\'e1quina, linguagens simb\'f3licas e linguagens de alto n\'edvel \line 1.7 A hist\'f3ria de C e C+\'f7 \line 1.8 A biblioteca padr\'e3o de C++ \line 1.9 Java e Java Como Programar \line 1.10 Outras linguagens de alto n\'edvel \line 1.11 Programa\'e7\'e3o estruturada \line 1.12 A tend\'eancia-chave em software: tecnologia de objetos \line 1.13 Fundamentos de um ambiente t\'edpico de C+\'f7 \line 1.14 Tend\'eancias de hardware \line 1.15 Hist\'f3ria da lnternet \line 1.16 Hist\'f3ria daWorldWideWeb \line 1.17 Notas gerais sobre C++ e este livro \line 1.18 Introdu\'e7\'e3o \'e0 programa\'e7\'e3o de C++ \line 1.19 Um programa simples: imprimindo uma linha de texto \line 1.20 Outro programa simples: somando dois inteiros \line 1.21 Conceitos de mem\'f3ria \line 1.22 Aritm\'e9tica \line 1.23 Tomada de decis\'f5es: os operadores relacionais e de igualdade \line 1.24 Pensando em objetos: introdu\'e7\'e3o \'e0 tecnologia de objetos e \'e0 Unified Modeling LanguageTM \line Resumo \bullet  Terminologia Erros comuns de programa\'e7\'e3o \bullet  Boas pr\'e1ticas de programa\'e7\'e3o Dicas de desempenho Dicas de portabilidade\bullet  Observa\'e7\'f5es de engenharia de software Exerc\'edcios de auto-revis\'e3o\bullet  Respostas aos exerc\'edcios de auto-revis\'e3o \bullet  Exerc\'edcios \line 1.1 Introdu\'e7\'e3o \line Bem-vindo a C++! Trabalhamos bastante para criar o que esperamos que seja uma experi\'eancia de aprendizado informativa, divertida e desafiadora para voc\'ea. C++ \'e9 uma linguagem dif\'edcil, normalmente s\'f3 \'e9 ensinada a programadores experientes. Assim, este livro \'e9 \'fanico entre os livros de ensino de C++ porque: \line\bullet  \'c9 apropriado para pessoas tecnicamente orientadas, com pouca ou nenhuma experi\'eancia de programa\'e7\'e3o. \line\bullet  \'c9 apropriado para programadores experientes que querem um tratamento mais profundo da linguagem. \line Como um \'fanico livro pode atrair ambos os grupos? A resposta \'e9 que o n\'facleo comum do livro enfatiza a obten\'e7\'e3o da clareza nos programas atrav\'e9s das t\'e9cnicas comprovadas da programa\'e7\'e3o estruturada e da programa\'e7\'e3o orientada a objetos. Os n\'e3o-programadores aprendem programa\'e7\'e3o do jeito certo desde o in\'edcio. Tentamos escrever de uma maneira clara e direta. O livro \'e9 abundantemente ilustrado. Talvez o mais importante: o livro apresenta um n\'famero enorme de programas em C++ que funcionam e mostra as sa\'eddas produzidas quando aqueles programas s\'e3o execu \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 51 \line tados em um computador. Chamamos isto de \ldblquote abordagem atrav\'e9s de c\'f3digo ativo\rdblquote . Todos esses programas de exemplo s\'e3o fornecidos no CD-ROM que acompanha este livro. Voc\'ea pode fazer o download de todos estes exempios de nosso site na Web: www. deitei . com. Os exemplos tamb\'e9m est\'e3o dispon\'edveis em nosso produto em CDROM interativo, a C+ + Multimedia Cyber Classroom: Third Edition. A Cyber Classroom tamb\'e9m cont\'e9m muitos hyperlinks, walkthroughs com \'e1udio dos programas de exemplo do livro e respostas a aproximadamente metade dos exerc\'edcios deste livro (inclusive respostas curtas, pequenos programas e muitos projetos completos). As caracter\'edsticas da C\rquote yber Classroom e as informa\'e7\'f5es sobre como pedir o produto est\'e3o no final deste livro. \line Os primeiros cinco cap\'edtulos introduzem os fundamentos sobre computadores, programa\'e7\'e3o de computadores e a linguagem de programa\'e7\'e3o de computador C++. Os principiantes que assistiram a nossos cursos nos disseram que o material nos Cap\'edtulos 1 at\'e9 5 apresenta uma funda\'e7\'e3o s\'f3lida para o tratamento mais profundo de C\'f7\'f7 nos cap\'edtulos restantes. Os programadores experientes em geral l\'eaem rapidamente os primeiros cinco cap\'edtulos e depois acham o tratamento de C++ no restante do livro ao mesmo tempo rigoroso e desafiador. \line Muitos programadores experientes nos disseram que apreciaram o nosso tratamento da programa\'e7\'e3o estruturada. Freq\'fcentemente, j\'e1 programaram em linguagens estruturadas como C ou Pascal, mas como nunca tiveram uma introdu\'e7\'e3o formal \'e0 programa\'e7\'e3o estruturada, n\'e3o estavam escrevendo o melhor c\'f3digo poss\'edvel nestas linguagens. A medida que revisavam a programa\'e7\'e3o estruturada nos cap\'edtulos do in\'edcio deste livro, eles puderam melhorar seus estilos de programa\'e7\'e3o em C e tamb\'e9m em Pascal. Ent\'e3o, seja voc\'ea um novato ou um programador experiente, existe muito neste livro para inform\'e1-lo, entret\'ea-lo e desafi\'e1-lo. \line A maioria das pessoas est\'e1 pelo menos um pouco familiarizada com as coisas excitantes que os computadores fazem. Usando este livro, voc\'ea aprender\'e1 como instruir os computadores para fazer essas coisas. E o software (ou seja, as instru\'e7\'f5es que voc\'ea escreve para instruir o computador sobre como executar a\'e7\'f5es e tomar decis\'f5es) que controla os computadores (freq\'fcentemente chamados de hardware). C++ \'e9 uma das linguagens de desenvolvimento de software mais populares hoje em dia. Este texto fornece uma introdu\'e7\'e3o \'e0 programa\'e7\'e3o na vers\'e3o de C++ padronizada nos Estados Unidos atrav\'e9s do American National Standards Institute (ANSI) e, no mundo, atrav\'e9s dos esfor\'e7os da International Standards Organization (150). \line O uso de computadores est\'e1 aumentando em quase todos os campos de atividade. Em uma era de custos continuamente crescentes, os custos de computa\'e7\'e3o t\'eam diminu\'eddo drasticamente por causa dos desenvolvimentos r\'e1pidos, tanto na tecnologia de hardware quanto na de software. Computadores que ocupavam grandes salas e custavam milh\'f5es de d\'f3lares 25 a 30 anos atr\'e1s podem agora ser criados nas superf\'edcies de chips de sil\'edcio menores que uma unha e custando, talvez, apenas alguns d\'f3lares cada. Ironicamente, o sil\'edcio \'e9 um dos materiais mais abundantes na Terra - \'e9 um dos ingredientes da areia comum. A tecnologia de circuitos integrados de sil\'edcio tornou a computa\'e7\'e3o t\'e3o barata que centenas de milh\'f5es de computadores de uso geral est\'e3o em utiliza\'e7\'e3o no mundo, ajudando pessoas nos neg\'f3cios, na ind\'fastria, no governo e em suas vidas pessoais. Esse n\'famero pode facilmente dobrar dentro de alguns anos. \line Este livro o desafiar\'e1 por v\'e1rias raz\'f5es. Seus colegas durante os \'faltimos anos provavelmente aprenderam C ou Pascal como sua primeira linguagem de programa\'e7\'e3o. Voc\'ea, na verdade, aprender\'e1 tanto C como C++! Por qu\'ea? Simplesmente porque C++ inclui C, acrescentando muito mais. \line Seus colegas provavelmente tamb\'e9m aprenderam a metodologia de programa\'e7\'e3o conhecida como programa\'e7\'e3o estruturada. Voc\'ea aprender\'e1 tanto a programa\'e7\'e3o estruturada como a mais nova e excitante metodologia, a programa\'e7\'e3o orientada a objetos. Por que ensinamos ambas?A orienta\'e7\'e3o a objetos certamente ser\'e1 a metodologia-chave de programa\'e7\'e3o para a pr\'f3xima d\'e9cada. Voc\'ea criar\'e1 e trabalhar\'e1 com muitos objetos neste curso. Mas descobrir\'e1 que a estrutura interna daqueles objetos \'e9 freq\'fcentemente mais bem constru\'edda usando-se as t\'e9cnicas da programa\'e7\'e3o mais e estruturada. Al\'e9m disso, a l\'f3gica de manipula\'e7\'e3o de objetos \'e9 ocasionalmente mais bem expressa com programa\'e7\'e3o estruturada. \line Outra raz\'e3o pela qual apresentamos ambas as metodologias \'e9 que atualmente est\'e1 acontecendo uma migra\'e7\'e3o de grande vulto de sistemas baseados em C para sistemas baseados em C++. Existe um volume enorme do chamado \ldblquote c\'f3digo legado em C\rdblquote  em uso. C foi amplamente usada por mais ou menos um quarto de s\'e9culo e seu uso em anos recentes tem aumentado drasticamente. Uma vez que as pessoas apreendem C++, elas acham esta mais poderosa que C e freq\'fcentemente escolhem migrar para C++. Assim, come\'e7am a converter seus sistemas \ldblquote legados\rdblquote  para C++. Come\'e7am a usar os v\'e1rios recursos que C++ apresenta, geralmente chamados de \ldblquote melhorias de C++ em rela\'e7\'e3o a C\rdblquote , para melhorar seu estilo de codificar programas \ldblquote\'e0 maneira de C\rdblquote . Finalmente, come\'e7am a empregar os recursos de programa\'e7\'e3o orientada a objetos de C++ para conseguir os benef\'edcios completos do uso da linguagem. \line N. de R.T.: Termo usado para descrever uma das atividades de desenvolvimento de software, que consiste em reunir a equipe de desenvolvimento para analisar o c\'f3digo de um programa e discutir a implementa\'e7\'e3o e as decis\'f5es tomadas pelos programadores; usada como ferramenta de treinamento e como parte de um processo de qualidade no desenvolvimento de software. \par
52 C++ COMO PROGRAMAR \line Um fen\'f4meno interessante em linguagens de programa\'e7\'e3o \'e9 que a maioria dos fornecedores simplesmente comercializa um produto de C/C++ combinado, em lugar de oferecer produtos separados. Isto d\'e1 aos usu\'e1rios a possibilidade de continuar programando em C, se assim desejarem, e ent\'e3o migrar gradualmente para C++ quando acharem conveniente. \line c++ se tornou a linguagem de implementa\'e7\'e3o preferencial para construir sistemas de computa\'e7\'e3o de alto desempenho. Mas pode ela ser ensinada em um primeiro curso de programa\'e7\'e3o, que \'e9 o p\'fablico pretendido para este livro? Acreditamos que sim. Nove anos atr\'e1s, enfrentamos um desafio semelhante quando Pascal era a linguagem firmemente estabelecida nos cursos de gradua\'e7\'e3o em Ci\'eancia da Computa\'e7\'e3o. Escrevemos C How to Program. Centenas de universidades pelo mundo agora usam a terceira edi\'e7\'e3o de C How to Program. Os cursos baseados naquele livro t\'eam demonstrado ser igualmente t\'e3o adequados quanto seus predecessores baseados em Pascal. Nenhuma diferen\'e7a significativa foi observada, a n\'e3o ser que agora os estudantes mais motivados porque sabem que \'e9 mais prov\'e1vel que usem C, em seus cursos de n\'edvel mais avan\'e7ado e em suas carreiras, do que Pascal. Os estudantes, ao aprender em C, sabem tamb\'e9m que estar\'e3o mais bem preparados para aprender C++ e a nova linguagem baseada em C++, com recursos para o ambiente Internet, Java. \line Nos primeiros cinco cap\'edtulos do livro, voc\'ea aprender\'e1 programa\'e7\'e3o estruturada em C++, a \ldblquote parte C\rdblquote  de C++ e as \ldblquote melhorias de C++ em rela\'e7\'e3o a C\rdblquote . No conjunto do livro, voc\'ea aprender\'e1 programa\'e7\'e3o orientada a objetos em C++. Contudo, n\'e3o queremos faz\'ea-lo esperar at\'e9 o Cap\'edtulo 6 para come\'e7ar a apreciar a orienta\'e7\'e3o a objetos. Assim, cada um dos cinco primeiros cap\'edtulos conclui com uma se\'e7\'e3o intitulada \ldblquote Pensando em objetos\rdblquote . Estas se\'e7\'f5es introduzem conceitos e terminologia b\'e1sicos sobre programa\'e7\'e3o orientada a objetos. Quando atingirmos o Cap\'edtulo 6, \ldblquote Classes e Abstra\'e7\'e3o de Dados\rdblquote , voc\'ea estar\'e1 preparado para come\'e7ar a ultilizar C++ para criar objetos e escrever programas orientados a objetos. \line Este primeiro cap\'edtulo tem tr\'eas partes. A primeira parte introduz os fundamentos de computadores e sua \line programa\'e7\'e3o. A segunda parte faz com que voc\'ea comece a escrever imediatamente alguns programas simples em C++. A terceira parte o ajuda a come\'e7ar a \ldblquote pensar em objetos\rdblquote . \line Bem, \'e9 isso a\'ed! Voc\'ea est\'e1 para come\'e7ar um caminho desafiante e recompensador. A medida que avan\'e7ar, caso \line queira se comunicar conosco, envie-nos um e-mau para \line deitei@deitei.com \line ou visite nosso site na World Wide Web em \line http: //www . deitei, com \line N\'f3s lhe responderemos imediatamente. Esperamos que voc\'ea aprecie aprender com a ajuda de C++ Como Programar \line Voc\'ea pode querer usar a vers\'e3o interativa do livro em CD-ROM, a C++ Multimedia Cyber Classroom: Third Edition. \line 1.2 O que \'e9 um computador? \line Um computador \'e9 um dispositivo capaz de executar c\'e1lculos e tomar decis\'f5es l\'f3gicas em velocidades milh\'f5es, e at\'e9 bilh\'f5es, de vezes mais r\'e1pidas do que podem os seres humanos. Por exemplo, muitos dos computadores pessoais de hoje podem executar centenas de milh\'f5es de adi\'e7\'f5es por segundo. Uma pessoa usando uma calculadora de mesa poderia necessitar de d\'e9cadas para completar o mesmo n\'famero de c\'e1lculos que um computador pessoal poderoso pode executar em um segundo. (Pontos para pensar: como voc\'ea saberia se a pessoa somou os n\'fameros corretamente? Como voc\'ea saberia se o computador somou os n\'fameros corretamente?) Os supercomputadores mais r\'e1pidos de hoje podem executar centenas de bilh\'f5es de adi\'e7\'f5es por segundo - aproximadamente o n\'famero de c\'e1lculos que centenas de milhares de pessoas podem executar em um ano! E computadores capazes de executar trilh\'f5es de instru\'e7\'f5es por segundo j\'e1 est\'e3o funcionando em laborat\'f3rios de pesquisas! \line Computadores processam dados sob o controle de conjuntos de instru\'e7\'f5es chamados de programas de computador Estes programas de computador guiam o computador atrav\'e9s de conjuntos ordenados de a\'e7\'f5es especificados por pessoas chamadas de programadores de computador \line Um computador \'e9 composto por v\'e1rios dispositivos (como o teclado, tela, mouse, discos, mem\'f3ria, CD-ROM \line e unidades de processamento) que s\'e3o chamados de hardware. Os programas de computador que s\'e3o executados em um computador s\'e3o chamados de software. Os custos de hardware t\'eam declinado drasticamente em anos recentes, \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C\'f7+ 53 \par
ao ponto de os computadores pessoais se tornarem um artigo comum. Infelizmente, os custos de desenvolvimento de software t\'eam subido continuamente, \'e0 medida que os programadores desenvolvem aplicativos sempre cada vez mais poderosos e complexos, sem que tenha surgido uma tecnologia de desenvolvimento de software com melhoria significativa. Neste livro, voc\'ea aprender\'e1 m\'e9todos de desenvolvimento de software comprovados que podem reduzir os custos do desenvolvimento de software - programa\'e7\'e3o estruturada, refinamento top-down passo a passo, divis\'e3o do programa em fun\'e7\'f5es, programa\'e7\'e3o baseada em objetos, programa\'e7\'e3o orientada a objetos, projeto orientado a objetos e programa\'e7\'e3o gen\'e9rica. \line 1.3 Organiza\'e7\'e3o de computadores \line N\'e3o importando as diferen\'e7as em apar\'eancia f\'edsica, virtualmente todo computador pode ser visto como sendo dividido em seis unidades l\'f3gicas ou se\'e7\'f5es. S\'e3o as seguintes: \line 1. Unidade de entrada. Esta \'e9 a \ldblquote se\'e7\'e3o receptora\rdblquote  do computador. Ela obt\'e9m informa\'e7\'f5es (dados e programas de computador) de v\'e1rios dispositivos de entrada e coloca estas informa\'e7\'f5es \'e0 disposi\'e7\'e3o das outras unidades, de forma que as informa\'e7\'f5es possam ser processadas. A maioria das informa\'e7\'f5es, hoje, \'e9 inserida nos computadores atrav\'e9s de dispositivos como teclados e mouses. As informa\'e7\'f5es tamb\'e9m podem ser inseridas falando-se com o computador e por varredura de imagens. \line 2. Unidade de sa\'edda. Esta \'e9 a \ldblquote se\'e7\'e3o de expedi\'e7\'e3o\rdblquote  do computador. Ela pega as informa\'e7\'f5es que foram processadas pelo computador e as coloca em v\'e1rios dispositivos de sa\'edda para tornar as informa\'e7\'f5es dispon\'edveis para uso fora do computador. A maioria das sa\'eddas de informa\'e7\'f5es de computadores hoje \'e9 exibida em telas, impressa em papel ou usada para controlar outros dispositivos. \line 3. Unidade de mem\'f3ria. Esta \'e9 a se\'e7\'e3o de \ldblquote armazenamento\rdblquote  de acesso r\'e1pido, de capacidade relativamente baixa, do computador. Ret\'e9m informa\'e7\'f5es que foram fornecidas atrav\'e9s da unidade de entrada, de forma que as informa\'e7\'f5es possam ser tornadas imediatamente dispon\'edveis para processamento quando forem necess\'e1rias. A unidade de mem\'f3ria ret\'e9m tamb\'e9m informa\'e7\'f5es processadas at\'e9 que aquelas informa\'e7\'f5es possam ser colocadas em dispositivos de sa\'edda pela unidade de sa\'edda. A unidade de mem\'f3ria \'e9 freq\'fcentemente chamada de mem\'f3ria ou mem\'f3ria prim\'e1ria. \line 4. Unidade de aritm\'e9tica e l\'f3gica (UAL). Esta \'e9 a \ldblquote se\'e7\'e3o industrial\rdblquote  do computador. Ela \'e9 respons\'e1vel por executar c\'e1lculos como adi\'e7\'e3o, subtra\'e7\'e3o, multiplica\'e7\'e3o e divis\'e3o. Cont\'e9m os mecanismos de decis\'e3o que permitem ao computador, por exemplo, comparar dois itens na unidade de mem\'f3ria para determinar se eles s\'e3o ou n\'e3o iguais. \line 5. Unidade central de processamento (CPU, central processing unit). Esta \'e9 a \ldblquote se\'e7\'e3o administrativa\rdblquote  do computador. E a coordenadora do computador e \'e9 respons\'e1vel por supervisionar a opera\'e7\'e3o das outras se\'e7\'f5es. A CPU diz \'e0 unidade de entrada quando as informa\'e7\'f5es devem ser lidas para a unidade de mem\'f3ria, diz \'e0 UAL quando informa\'e7\'f5es da unidade de mem\'f3ria devem ser utilizadas em c\'e1lculos e diz \'e0 unidade de sa\'edda quando enviar as informa\'e7\'f5es da unidade de mem\'f3ria para certos dispositivos de sa\'edda. \line 6. Unidade de armazenamento secund\'e1rio. Esta \'e9 a se\'e7\'e3o de \ldblquote armazenamento\rdblquote  de grande capacidade e longo prazo do computador. Os programas ou dados que n\'e3o est\'e3o sendo ativamente usados pelas outras unidades s\'e3o normalmente colocados em dispositivos de armazenamento secund\'e1rio (como discos) at\'e9 que sejam novamente necess\'e1rios, possivelmente horas, dias, meses ou at\'e9 anos mais tarde. As informa\'e7\'f5es no armazenamento secund\'e1rio levam muito mais tempo para serem acessadas do que as informa\'e7\'f5es na mem\'f3ria prim\'e1ria. O custo por unidade de armazenamento secund\'e1rio \'e9 muito menor que o custo por unidade de mem\'f3ria prim\'e1ria. \line 1.4 Evolu\'e7\'e3o dos sistemas operacionais \line Os primeiros computadores eram capazes de executar s\'f3 um trabalho ou tarefa de cada vez. Esta forma de opera\'e7\'e3o de computador \'e9 freq\'fcentemente chamada de processamento em lotes com usu\'e1rio \'fanico. O computador executa um \'fanico programa de cada vez, enquanto processa os dados em grupos ou lotes. Nestes primeiros sistemas, os usu\'e1rios \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 55 \par
express\'e3o computa\'e7\'e3o cliente/servidor. C e C++ se tomaram as linguagens de programa\'e7\'e3o preferidas para escrever software para sistemas operacionais, para computa\'e7\'e3o em redes e para aplicativos distribu\'eddos para ambientes cliente! servidor. Os sistemas operacionais mais populares hoje em dia, como o UNIX, Linux e os sistemas baseados no Windows da Microsoft, oferecem os tipos de recursos discutidos nesta se\'e7\'e3o. \line 1.6 Linguagens de m\'e1quina, linguagens simb\'f3licas \line e linguagens de alto n\'edvel \line Os programadores escrevem instru\'e7\'f5es em v\'e1rias linguagens de programa\'e7\'e3o, algumas diretamente compreens\'edveis pelo computador e outras que exigem passos de tradu\'e7\'e3o intermedi\'e1ria. Centenas de linguagens de computador est\'e3o em uso hoje em dia. Elas podem ser divididas em tr\'eas tipos gerais: \line 1. Linguagens de m\'e1quina, \line 2. Linguagens simb\'f3licas, \line 3. Linguagens de alto n\'edvel. \line Qualquer computador pode entender diretamente apenas sua pr\'f3pria linguagem de m\'e1quina. A linguagem de m\'e1quina \'e9 a \ldblquote linguagem natural\rdblquote  de um computador em particular. Ela \'e9 definida pelo projeto de hardware daquele computador. As linguagens de m\'e1quina consistem geralmente em seq\'fc\'eancias de n\'fameros (em \'faltima inst\'e2ncia reduzidos a ls e Os) que instruem os computadores a executar suas opera\'e7\'f5es mais elementares, uma de cada vez. As linguagens de m\'e1quina s\'e3o dependentes da m\'e1quina, isto \'e9, uma linguagem de m\'e1quina em particular pode ser usada em s\'f3 um tipo de computador. As linguagens de m\'e1quina s\'e3o inc\'f4modas para as pessoas, como pode ser visto pela seguinte se\'e7\'e3o de um programa em linguagem de m\'e1quina que soma as horas extras a pagar ao sal\'e1rio base e armazena o resultado em pagamento bruto. \line +130 0042 77 4 \line +14 005 934 19 \line +12 002 74 027 \line\'c0 medida que os computadores se tornaram mais populares, tornou-se evidente que a programa\'e7\'e3o em linguagem de m\'e1quina era muito lenta, tediosa e sujeita a erros. Em vez de usar as seq\'fc\'eancias de n\'fameros que os computadores podiam entender diretamente, os programadores come\'e7aram a usar abrevia\'e7\'f5es semelhantes \'e0s das palavras inglesas para representar as opera\'e7\'f5es elementares do computador. Estas abrevia\'e7\'f5es* formaram a base das linguagens simb\'f3licas. Programas tradutores chamados de assemblers (montadores) foram desenvolvidos para converter, \'e0 velocidade do computador, os programas em linguagem simb\'f3lica para a linguagem de m\'e1quina. A se\'e7\'e3o de um programa em linguagem simb\'f3lica mostrada a seguir tamb\'e9m soma horas extras a pagar ao sal\'e1rio base e armazena o resultado em pagamento bruto, mas com maior clareza que seu equivalente em linguagem de m\'e1quina: \line LOAD BASEPAY \line ADD OVERPAY \line STORE GROSSPAY \line Embora tal c\'f3digo seja mais claro para as pessoas, ele \'e9 incompreens\'edvel para os computadores at\'e9 ser traduzido para a linguagem de m\'e1quina. \line O uso de computadores aumentou rapidamente com o advento das linguagens simb\'f3licas, mas estas ainda exigiam muitas instru\'e7\'f5es para realizar at\'e9 as tarefas mais simples. Para acelerar o processo de programa\'e7\'e3o, foram desenvolvidas as linguagens de alto n\'edvel, nas quais uma \'fanica instru\'e7\'e3o realiza tarefas significativas. Programas tradutores chamados compiladores convertem os programas em linguagem de alto n\'edvel para linguagem de m\'e1quina. As linguagens de alto n\'edvel permitem que os programadores escrevam instru\'e7\'f5es que parecem quase com o \line *N. de R.T. Denominadas, tamb\'e9m, s\'edmbolos mnem\'f4nicos. \par
56 C++ COMO PROGRAMAR \line ingl\'eas comum e cont\'eam nota\'e7\'f5es matem\'e1ticas comumente usadas. Um programa de folha de pagamento escrito em uma linguagem de alto n\'edvel pode conter um comando como: \line grossPay = basePay + overTimePay \line Obviamente, as linguagens de alto n\'edvel s\'e3o muito mais desej\'e1veis do ponto de vista do programador que as linguagens de m\'e1quina ou as linguagens simb\'f3licas. C e C++ est\'e3o entre as mais poderosas e amplamente utilizadas linguagens de alto n\'edvel. \line O processo de compilar um programa em linguagem de alto n\'edvel para linguagem de m\'e1quina pode tomar um tempo consider\'e1vel do computador. Por isso, foram desenvolvidos programas interpretadores, os quais podem executar diretamente programas em linguagem alto de n\'edvel sem a necessidade de compilar aqueles programas para linguagem de m\'e1quina. Embora programas compilados executem mais r\'e1pido que programas interpretados, os interpretadores s\'e3o populares em ambientes de desenvolvimento de programas em que os mesmos s\'e3o modificados freq\'fcentemente, \'e0 medida que novas caracter\'edsticas s\'e3o acrescentadas aos programas e seus erros s\'e3o corrigidos. Uma vez que o desenvolvimento de um programa tenha terminado, uma vers\'e3o compilada do mesmo pode ser produzida para ser executada de forma mais eficaz. \line 1.7 A hist\'f3ria de C e C++ \line C++ uma evolu\'e7\'e3o de C, que evoluiu de duas linguagens de programa\'e7\'e3o anteriores, BCPL e B. BCPL foi desenvolvida em 1967 por Martin Richards, como uma linguagem para escrever software de sistemas operacionais e compiladores. Ken Thompson modelou muitas caracter\'edsticas de sua linguagem B inspirando-se em suas correspondentes em BCPL e usou B para criar as primeiras vers\'f5es do sistema operacional UNIX no BelI Laboratories, em 1970, em um computador DEC PDP-7. Tanto BCPL como B eram linguagens typeless, ou seja, sem defini\'e7\'e3o de tipos de dados - todo item de dados ocupava uma \ldblquote palavra\rdblquote  na mem\'f3ria e o trabalho de tratar um item de dados como um n\'famero inteiro ou um n\'famero real, por exemplo, era de responsabilidade do programador. \line A linguagem C foi derivada de B por Dennis Ritchie no BelI Laboratories e foi originalmente implementada em um computador DEC PDP-l 1 em 1972. C usa muitos conceitos importantes de BCPL e B, ao mesmo tempo que acrescenta tipos de dados e outras caracter\'edsticas. C se tornou inicialmente conhecida como a linguagem de desenvolvimento do sistema operacional UNIX. Hoje em dia, a maioria dos sistemas operacionais s\'e3o escritos em C ei ou C++. C est\'e1 atualmente dispon\'edvel para a maioria dos computadores. C \'e9 independente de hardware. Com um projeto cuidadoso, \'e9 poss\'edvel se escrever programas em C que s\'e3o port\'e1veis para a maioria dos computadores. \line No final dos anos 70, C evoluiu para o que agora \'e9 chamado de \ldblquote C tradicional\rdblquote , \ldblquote C cl\'e1ssico\rdblquote  ou \ldblquote C de \line Kernighan e Ritchie\rdblquote . A publica\'e7\'e3o pela Prentice HalI, em 1978, do livro de Kemighan e Ritchie, The C Programming Language, chamou muita aten\'e7\'e3o para a linguagem. \line O uso difundido de C com v\'e1rios tipos de computadores (\'e0s vezes chamados de plataformas de hardware) infelizmente levou a muitas varia\'e7\'f5es da linguagem. Estas eram semelhantes, mas freq\'fcentemente incompat\'edveis. Isto era um problema s\'e9rio para desenvolvedores de programas que precisavam escrever programas port\'e1veis que seriam executados em v\'e1rias plataformas. Tornou-se claro que uma vers\'e3o padr\'e3o de Cera necess\'e1ria. Em 1983, foi criado o comit\'ea t\'e9cnico X3J 11 do American National Standards Committee on Computers and Information Processing (X3) para \ldblquote produzir uma defini\'e7\'e3o n\'e3o-amb\'edgua e independente de m\'e1quina da linguagem\rdblquote . Em 1989, o padr\'e3o foi aprovado. O ANSI cooperou com a International Standards Organization (ISO) para padronizar C a n\'edvel mundial; o documento de padroniza\'e7\'e3o conjunta foi publicado em 1990 e \'e9 chamado de ANSI/ISO 9899: 1990. C\'f3pias deste documento podem ser pedidas ao ANSI. A segunda edi\'e7\'e3o de Kernighan e Ritchie, publicada em 1988, reflete esta vers\'e3o chamada ANSI C, uma vers\'e3o da linguagem agora utilizada mundialmente. \line Dica de portabilidade 1.1 \line Como C \'e9 uma linguagem padronizada, independente de hardware e amplamente dispon\'edvel, aplicativos escritos em C podem ser freq\'fcentemente executados com pouca ou nenhuma modifica\'e7\'e3o em uma ampla variedade de sistemas de computa\'e7\'e3o diferentes. \line C++, uma extens\'e3o de C, foi desenvolvida por Bjame Stroustrup no in\'edcio dos anos 80 no Beil Laboratories. C++ \line apresenta v\'e1rias caracter\'edsticas que melhoram a linguagem C, mas o mais importante \'e9 que fornece recursos para a \line programa\'e7\'e3o orientada a objetos. \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 57 \line Existe uma revolu\'e7\'e3o em andamento na comunidade de software. Construir software r\'e1pida, correta e economicamente permanece um objetivo dif\'edcil de se atingir, e isto em uma \'e9poca em que a demanda por softwares novos e mais poderosos est\'e1 aumentando rapidamente. Objetos s\'e3o, essencialmente, componentes de software reutiliz\'e1veis que modelam coisas do mundo real. Os desenvolvedores de software est\'e3o descobrindo que usar uma abordagem de implementa\'e7\'e3o e projeto modulares, orientada a objetos, pode tornar os grupos de desenvolvimento de software muito mais produtivos do que \'e9 poss\'edvel usando-se t\'e9cnicas de programa\'e7\'e3o anteriormente populares, como a programa\'e7\'e3o estruturada. Os programas orientados a objetos s\'e3o mais f\'e1ceis de entender, corrigir e modificar. \line Muitas outras linguagens orientadas a objetos foram desenvolvidas, incluindo Smalltalk, desenvolvida no Palo Alto Research Center da Xerox (PARC). Smalltalk \'e9 uma linguagem orientada a objetos pura - literalmente, tudo nela \'e9 um objeto. C++ \'e9 uma linguagem h\'edbrida - \'e9 poss\'edvel programar em C++ tanto em um estilo semelhante ao de C, como em um estilo orientado a objetos, ou ambos. Na Se\'e7\'e3o 1.9, discutimos a nova e excitante linguagem Java - baseada em C e em C++. \line 1 \line 1.8 A biblioteca padr\'e3o de C++ \line Os programas em C\'f7+ consistem em pe\'e7as chamadas classes e fun\'e7\'f5es. Voc\'ea pode programar cada pe\'e7a que possa precisar para criar um programa em C++. Mas a maioria dos programadores de C++ aproveitam as ricas cole\'e7\'f5es de classes e fun\'e7\'f5es existentes na biblioteca padr\'e3o de C+\'f7. Deste modo, existem realmente duas fases para se aprender o \ldblquote mundo\rdblquote  C++. A primeira \'e9 aprender a linguagem C++ propriamente dita e a segunda \'e9 aprender como utiliz\'e1-las as classes e fun\'e7\'f5es da biblioteca padr\'e3o de C++. Por todo o livro, discutimos muitas destas classes e fun\'e7\'f5es. O livro de Plauger \'e9 leitura obrigat\'f3ria para programadores que precisam de uma compreens\'e3o profunda das fun\'e7\'f5es da biblioteca de ANSI C que est\'e3o inclu\'eddas em C++, como implement\'e1-las e como utiliz\'e1-las para escrever c\'f3digo port\'e1vel. As bibliotecas padr\'e3o de classes s\'e3o geralmente fornecidas pelos fornecedores de compiladores. Muitas bibliotecas de classes para finalidades especiais s\'e3o oferecidas por fornecedores independentes de software. \line\ul JObserva\'e7\'e3o \ulnone de engenharia de software 1.1 \line Use uma \ldblquote abordagem de blocos de constru \'e7\'e3o\rdblquote  para criar programas. Evite reinventar a roda. Use peda\'e7os existentes onde for poss\'edvel - isto \'e9 chamado de \ldblquote reutiliza\'e7\'e3o de software\rdblquote  e \'e9 um aspecto central da programa\'e7\'e3o orientada a objetos. \line Observa\'e7\'e3o de engenharia de software 1.2 \line ______ Quando estiver programando em C++, voc\'ea usar\'e1 tipicamente os seguintes blocos de constru\'e7\'e3o: classes e fun\'e7\'f5es da biblioteca padr\'e3o de C+ +, classes e fun\'e7\'f5es que voc\'ea mesmo cria e classes e fun\'e7\'f5es de \line v\'e1rias bibliotecas populares n\'e3o-padr\'e3o. \line A vantagem de criar suas pr\'f3prias fun\'e7\'f5es e classes \'e9 que voc\'ea saber\'e1 exatamente como funcionam. Voc\'ea poder\'e1 examinar o c\'f3digo em C++. A desvantagem \'e9 o tempo consumido e o esfor\'e7o complexo para projetar, desenvolver \line c e manter novas fun\'e7\'f5es e classes que sejam corretas e que operem de forma eficaz. \line Dica de desempenho 1.1 \line Usarfun\'e7\'f5es e classes de bibliotecas padr\'e3o, em vez de escrever suas pr\'f3prias vers\'f5es equivalentes, pode melhorar o desempenho do programa, porque este software \'e9 cuidadosamente escrito para ser executado deforma correta e eficaz. \line Dica de portabilidade 1.2 \line Usarfun\'e7\'f5es e classes de bibliotecas padr\'e3o, em vez de escrever suas pr\'f3prias vers\'f5es equivalentes, pode melhorar a portabilidade do programa, porque este software \'e9 inclu\'eddo em virtualmente todas as \line implementa\'e7\'f5es de C++. \par
58 C++ COMO PROGRAMAR \line 1 .9 Java e Java Como Programar \line Muitas pessoas acreditam que a pr\'f3xima \'e1rea importante na qual os microprocessadores ter\'e3o um impacto profundo \'e9 na dos aparelhos eletrodom\'e9sticos e eletr\'f4nicos de consumo. Reconhecendo isto, a Sun Microsystems financiou um projeto corporativo interno de desenvolvimento, com nome de c\'f3digo Green, em 1 99 1 . O projeto resultou no desenvolvimento de uma linguagem baseada em C e C\'f7\'f7, que seu criador, James Gosling, denominou Oak (carvalho, em ingl\'eas), em homenagem a um carvalho que ele via atrav\'e9s da janela de seu escrit\'f3rio na Sun. Mais tarde, descobriram que j\'e1 existia uma linguagem de computador denominada Oak. Quando um grupo de pessoas da Sun estava em uma cafeteria local, o nome Java foi sugerido e pegou. \line Mas o projeto Green enfrentou algumas dificuldades. O mercado para aparelhos eletr\'f4nicos de consumo inteligentes n\'e3o estava se desenvolvendo t\'e3o rapidamente quanto a Sun havia previsto. Pior ainda, um importante contrato, de cuja concorr\'eancia a Sun havia participado, foi assinado com outra empresa. Por isto, o projeto corria o risco de ser cancelado. Por pura sorte, a popularidade da World Wide Web explodiu em 1 993 e o pessoal da Sun viu o potencial imediato de usar Java para criar p\'e1ginas da Web com o assim chamado conte\'fado din\'e2mico. \line A Sun anunciou Java formalmente em uma feira comercial em maio de 1 995. Normalmente, um acontecimento como este n\'e3o chamaria muita aten\'e7\'e3o. Entretanto, Java despertou interesse imediato na comunidade comercial devido ao interesse fenomenal na World Wide Web. Java agora \'e9 usada para criar p\'e1ginas da Web com conte\'fado din\'e2mico e interativo, para desenvolver aplicativos empresariais de grande porte, para aumentar a funcionalidade de servidores da Web (os computadores que oferecem o conte\'fado que vemos em nosso navegadores da Web), para oferecer aplicativos para apare- lhos eletr\'f4nicos de consumo (tais como telefones celulares, pagers e assistentes pessoais digitais) e muito mais. \line Em 1995, est\'e1vamos cuidadosamente acompanhando o desenvolvimento de Java pela Sun Microsystems. Em novembro de 1995, participamos de uma confer\'eancia sobre lnternet em Boston. Um representante da Sun Microsystems nos fez uma estimulante apresenta\'e7\'e3o sobre Java. A medida em que as conversa\'e7\'f5es prosseguiram, tomou-se claro para n\'f3s que Java desempenharia um papel importante no desenvolvimento de p\'e1ginas da Web interativas usando multimidia. Mas vimos imediatamente um potencial muito maior para a linguagem. \line Visualisamos Java como uma bela linguagem para ensinar a estudantes de programa\'e7\'e3o do primeiro ano os aspectos fundamentais de gr\'e1ficos, imagens, anima\'e7\'e3o, audio, v\'eddeo, bancos de dados, redes, multithreading e computa\'e7\'e3o colaborativa. Pusemos m\'e3os \'e0 obra para escrever a primeira edi\'e7\'e3o de lava How to Program, que foi publicada em tempo para as aulas do outono americano de 1996. lava: Como Programar - Terceira Edi\'e7\'e3o foi publicada em 1999*. \line Al\'e9m de sua proemin\'eancia no desenvolvimento de aplica\'e7\'f5es baseadas na lnternet - e intranets, Java certamente se tomar\'e1 a linguagem preferida para implementar software para dispositivos que se comuniquem atrav\'e9s de uma rede (tais como telefones celulares, pagers e assistentes pessoais digitais). N\'e3o se surpreendam quando seus novos aparelhos de som e outros aparelhos em sua casa estiverem conectados em rede usando a tecnologia Java! \line 1.10 Outras linguagens de alto n\'edvel \line Centenas de linguagens de alto n\'edvel foram desenvolvidas, mas s\'f3 algumas obtiveram ampla aceita\'e7\'e3o. FORTRAN (FORmula TRANsIator) foi desenvolvida pela IBM Corporation, entre 1954 e 1957, para ser usada no desenvolvimento de aplicativos cient\'edficos e de engenharia que exigem computa\'e7\'f5es matem\'e1ticas complexas. FORTRAN \'e9 ainda amplamente usada, especialmente em aplicativos de engenharia. \line COBOL (COmmon Business Oriented Language) foi desenvolvida em 1959 por fabricantes de computadores, usu\'e1rios do governo e usu\'e1rios industriais de computadores. COBOL \'e9 principalmente utilizada para aplicativos comerciais que exigem manipula\'e7\'e3o precisa e eficiente de grandes quantidades de dados. Hoje em dia, mais da metade de todo o software para aplica\'e7\'f5es comerciais ainda \'e9 programado em COBOL. \line Pascal foi projetada aproximadamente na mesma \'e9poca que C pelo Professor Niklaus Wirth e foi planejada \line para uso acad\'eamico. Falaremos mais sobre Pascal na pr\'f3xima se\'e7\'e3o. \line 1.11 Programa\'e7\'e3o estruturada \line Durante os anos 60, muitos esfor\'e7os de desenvolvimento de software de grande porte enfrentaram s\'e9rias dificuldades. Os cronogramas de software estavam sempre atrasados, os custos excediam em muito os or\'e7amentos e os \line 5N. de R.: A edi\'e7\'e3o brasileira foi publicada pela Bookman Companhia Editora no ano de 2000. \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 59 \line produtos terminados n\'e3o eram confi\'e1veis. As pessoas come\'e7aram a perceber que o desenvolvimento de software era uma atividade muito mais complexa do que haviam imaginado. Atividades de pesquisa na d\'e9cada de 60 resultaram na evolu\'e7\'e3o da programa\'e7\'e3o estruturada - uma abordagem disciplinada \'e0 constru\'e7\'e3o de programas que sejam mais claros que programas n\'e3o-estruturados, mais f\'e1ceis para testar e depurar e mais f\'e1ceis para modificar, O Cap\'edtulo 2 discute os princ\'edpios da programa\'e7\'e3o estruturada. Os Cap\'edtulos 3 a 5 desenvolvem muitos programas estruturados. \line Um dos resultados mais palp\'e1veis desta pesquisa foi o desenvolvimento da linguagem de programa\'e7\'e3o Pascal por Niklaus Wirth em 1971. Pascal, nomeado em homenagem ao matem\'e1tico e fil\'f3sofo do s\'e9culo XVII Blaise Pascal, foi projetada para ensinar programa\'e7\'e3o estruturada em ambientes acad\'eamicos e se tomou rapidamente a linguagem de programa\'e7\'e3o preferida na maioria das universidades. Infelizmente, a linguagem n\'e3o disp\'f5e de muitas das caracter\'edsticas necess\'e1rias para tom\'e1-la \'fatil a aplicativos comerciais, industriais e governamentais; assim, ela n\'e3o foi amplamente aceita fora das universidades. \line A linguagem de programa\'e7\'e3o Ada foi desenvolvida sob o patroc\'ednio do Departamento de Defesa dos Estados Unidos (DOD), durante a d\'e9cada de 70 e in\'edcio dos anos 80. Centenas de linguagens diferentes estavam sendo usadas para produzir os enormes sistemas de software de comando e controle do DOD. O DOD quis uma \'fanica linguagem que preenchesse a maioria de suas necessidades. Pascal foi escolhida como base, mas a vers\'e3o final da linguagem Ada \'e9 bastante diferente de Pascal. A linguagem foi nomeada em homenagem a Lady Ada Lovelace, filha do poeta Lord Byron. Lady Lovelace \'e9 geralmente considerada como tendo escrito o primeiro programa de computador do mundo, no in\'edcio do s\'e9culo 19 (para o Analytical Engine Mechanical Computing Device, projetado por \line = Charles Babbage). Um recurso importante de Ada \'e9 chamado multitasking; permite que os programadores especifiquem que muitas atividades devem acontecer em paralelo. As outras linguagens de alto n\'edvel amplamente utlilizadas que discutimos - inclusive C e C++ - permitem geralmente ao programador escrever programas que executam s\'f3 uma atividade de cada vez. \line a \line 1.12 A tend\'eancia-chave em software: tecnologia de objetos \line Um dos autores, HMD, lembra da grande frustra\'e7\'e3o que era sentida pelas organiza\'e7\'f5es de desenvolvimento de software na d\'e9cada de 60, especialmente por aquelas que desenvolviam projetos de grande porte. Durante seus anos na universidade, HMD teve o privil\'e9gio de trabalhar durante os ver\'f5es nas equipes de desenvolvimento de sistemas operacionais para timesharing, com mem\'f3ria virtual, em uma empresa fabricante de computadores l\'edder de merca- do. Esta era uma grande experi\'eancia para um estudante universit\'e1rio. Mas, no ver\'e3o de 1967, ele caiu na realidade quando a companhia \ldblquote desistiu\rdblquote  de fornecer como produto comercial o sistema particular no qual centenas de pessoas estiveram trabalhando por muitos anos. Era dif\'edcil de fazer este software funcionar corretamente. Software \'e9 \ldblquote coisa complexa\rdblquote . \line Os custos de hardware t\'eam declinado drasticamente nos \'faltimos anos, a ponto de os computadores pessoais terem se tornado uma comodidade. Infelizmente, os custos de desenvolvimento de software t\'eam crescido continuamente, na medida em que os programadores desenvolvem aplicativos cada vez mais poderosos e complexos sem serem capazes de melhorar significativamente as tecnologias de desenvolvimento de software subjacentes. Neste livro, voc\'ea aprender\'e1 muitos m\'e9todos de desenvolvimento de software que podem reduzir os custos de desenvolvimento de software. \line H\'e1 uma revolu\'e7\'e3o em andamento na comunidade de software. Construir software r\'e1pida, correta e economicamente permanece um objetivo dif\'edcil de atingir, e isto em uma \'e9poca em que a demanda por softwares novos e ________ mais poderosos est\'e1 aumentando rapidamente. Objetos s\'e3o, essencialmente, componentes de software reutiliz\'e1veis que modelam coisas do mundo real. Os desenvolvedores de software est\'e3o descobrindo que usar uma abordagem de implementa\'e7\'e3o e projeto modulares, orientada a objetos, pode tornar os grupos de desenvolvimento de software muito mais produtivos do que \'e9 poss\'edvel usando-se t\'e9cnicas de programa\'e7\'e3o anteriormente populares, como a programa\'e7\'e3o estruturada. Os programas orientados a objetos s\'e3o mais f\'e1ceis de entender, corrigir e modificar. \line Melhorias na tecnologia de software come\'e7aram a aparecer com os benef\'edcios da assim chamada programa\'e7\'e3o estruturada (e as disciplinas relacionadas de an\'e1lise e projeto de sistemas estruturados), sendo comprovados na d\'e9cada de 70. Mas foi somente quando a tecnologia de programa\'e7\'e3o orientada a objetos se tomou largamente utilizada na d\'e9cada de 80, e muito mais amplamente utilizada na d\'e9cada de 90, que os desenvolvedores de software finalmente sentiram que eles tinham as ferramentas de que precisavam para obter importantes progressos no processo de desenvolvimento de software. \line Na verdade, a tecnologia de objetos existe desde pelos menos meados da d\'e9cada de 60. A linguagem de programa\'e7\'e3o C++ desenvolvida na AT&T por Bjame Stroustrup no in\'edcio da d\'e9cada de 80 \'e9 baseada em duas \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 61 \par
seus programas), Dicas de desempenho (t\'e9cnicas que v\'e3o ajud\'e1-lo a escrever programas que possam ser executados mais rapidamente e usando menos mem\'f3ria), Dicas de portabilidade (t\'e9cnicas que v\'e3o ajud\'e1-lo a escrever programas que possam ser executados, com pouca ou nenhuma modifica\'e7\'e3o, em diversos computadores) e Dicas de teste e depura\'e7\'e3o (t\'e9cnicas que v\'e3o ajud\'e1-lo a remover erros de seus programas e, mais importante, t\'e9cnicas que v\'e3o ajud\'e1-lo a escrever programas sem erros desde o in\'edcio). Muitas destas t\'e9cnicas e pr\'e1ticas s\'e3o apenas linhas mestras; voc\'ea desenvolver\'e1, sem d\'favida, seu pr\'f3prio estilo preferido de programa\'e7\'e3o.j \line 1.13 Fundamentos de um ambiente t\'edpico de C++ \line Os sistemas de C++ consistem geralmente de v\'e1rias partes: um ambiente de desenvolvimento de programas, a linguagem e a biblioteca padr\'e3o de C\'f7+. A discuss\'e3o a seguir explica um ambiente de desenvolvimento de programas em C++ t\'edpico, mostrado na Fig. 1.1. \line Os programas em C++ passam tipicamente por seis passos, at\'e9 que possam ser executados (Fig. 1 . 1 ). S\'e3o os seguintes: editar, pr\'e9-processar, compilar, \ldblquote ligar\rdblquote , link, carregar e executar. Concentramo-nos, aqui, em um sistema de C++ sob UNIX t\'edpico (Nota: os programas em C++ neste livro executar\'e3o, com pouca ou nenhuma modifica- \'e7\'e3o, na maioria dos sistemas atuais, inclusive em sistemas baseados no Microsoft Windows). Se voc\'ea n\'e3o estiver usando um sistema UNIX, consulte os manuais para seu sistema ou pergunte a seu instrutor como realizar estas \line : tarefas em seu ambiente. \line A primeira fase consiste em editar um arquivo. Isto \'e9 realizado com um programa editor O programador digita um programa em C++ usando o editor e, se necess\'e1rio, faz corre\'e7\'f5es. O programa ent\'e3o \'e9 armazenado em um dispositivo de armazenamento secund\'e1rio, como um disco. Os nomes dos arquivos de programas em \line freq\'fcentemente terminam com as extens\'f5es . cpp. . cxx. ou C (note que C est\'e1 em mai\'fascula). Veja a documenta- \'e7\'e3o de seu ambiente de C+\'f7 para mais informa\'e7\'e3o sobre extens\'f5es de nomes de arquivos. Dois editores amplamente usados em sistemas UNIX s\'e3o ovi e o ernacs. Os pacotes de software de C++, como o Borland C++ e o Microsoft Visual C++ para computadores pessoais, t\'eam editores embutidos que est\'e3o integrados naturalmente ao ambiente de programa\'e7\'e3o. Aqui, assumimos que o leitor saiba como editar um programa. \line Em seguida, o programador d\'e1 o comando para compilar o programa. O compilador traduz o programa em C++ para c\'f3digo em linguagem de m\'e1quina (tamb\'e9m chamado de c\'f3digo objeto). Em um sistema C++, um programa pr\'e9-processador \'e9 executado automaticamente, antes de come\'e7ar a fase de tradu\'e7\'e3o pelo compilador. O pr\'e9- processador do C++ obedece a comandos especiais chamados de diretivas para o pr\'e9-processador, que indicam que certas manipula\'e7\'f5es devem ser feitas sobre o programa antes da compila\'e7\'e3o. Estas manipula\'e7\'f5es normalmente consistem em incluir outros arquivos de texto no arquivo a ser compilado e executam substitui\'e7\'f5es de texto variadas. As diretivas de pr\'e9-processador mais comuns s\'e3o discutidas nos cap\'edtulos iniciais; uma discuss\'e3o detalhada de todas as caracter\'edsticas do pr\'e9-processador \'e9 feita no cap\'edtulo intitulado \ldblquote O pr\'e9-processador\rdblquote . O pr\'e9-processador \'e9 invocado pelo compilador antes de o programa ser convertido para linguagem de m\'e1quina. \line A pr\'f3xima fase \'e9 chamada liga\'e7\'e3o. Os programas em C++ cont\'eam tipicamente refer\'eancias a fun\'e7\'f5es definidas em outro lugar, como nas bibliotecas padr\'e3o ou nas bibliotecas privadas de grupos de programadores que trabalham juntos em um projeto particular. O c\'f3digo objeto produzido pelo compilador C++ cont\'e9m tipicamente \ldblquote buracos\rdblquote  devido a estas partes que est\'e3o faltando. Um editor de liga\'e7\'e3o (linker) liga o c\'f3digo objeto com o c\'f3digo das fun\'e7\'f5es que est\'e3o faltando, para produzir uma imagem execut\'e1vel (sem peda\'e7os faltando). Em um sistema t\'edpico com UNIX, o comando para compilar e \ldblquote ligar\rdblquote  um programa escrito em C++ \'e9 CC. Para compilar e \ldblquote ligar\rdblquote  um programa chamado bemvindo C. , digite \line CC bemvindo.C \line no prompt* do UNIX e aperte a tecla Enter (ou tecla Return). Se o programa compilar e \ldblquote ligar\rdblquote  corretamente, \'e9 produzido um arquivo chamado a out. Isto \'e9 a imagem execut\'e1vel de nosso programa bemvindo. c. \line 5N. de R.T.: Termo utilizado para designar a mensagem ou caractere(s) que indica(m) que um programa est\'e1 solicitando dados de entrada. \par
62 C++ COMO PROGRAMAR \line O programa \'e9 criado \line no editor e armaze Edito \line co J nado em disco. \line O programa pr\'e9-processador \line Pr\'e9-processador o J processa o c\'f3digo. \line\ldblquote  O compilador cria o \line c\'f3digo objeto e o \line Compilador co j armazena em disco. \line N O editor de liga\'e7\'e3o liga o \line ______ c\'f3digo objeto com as \line Editor de liga\'e7\'e3o _______ \line er)DiSco \line > bibliotecas,cria a . out e o \line J armazena em disco. \line __________ ________ Mem\'f3ria \line Prim\'e1ria \line Carregador \line O carregador carrega o \line (Loader) \line co J programa na mem\'f3ria. \line ________________ Mem\'f3ria \line Prim\'e1ria \line A CPU pega cada instru\'e7\'e3o \line CPU ________ \line e a executa, possivelmente \line armazenando novos valores \line ___________ / de dados na medida em que o \line j programa vai sendo executado. \line Fig. 1.1 Um ambiente t\'edpico de C++. \line A pr\'f3xima fase \'e9 chamada de carga (loading). Antes de um programa poder ser executado, o programa deve primeiro ser colocado na mem\'f3ria. Isto \'e9 feito pelo loader* (carregador), que pega a imagem execut\'e1vel do disco e transfere a mesma para a mem\'f3ria. Componentes adicionais de bibliotecas compartilhadas que suportam o programa do usu\'e1rio tamb\'e9m s\'e3o carregados. \line Finalmente, o computador, sob controle de sua CPU, executa o programa, uma instru\'e7\'e3o por vez. Para carregar e executar o programa em um sistema UNIX, digitamos a. out no prompt do UNIX e pressionamos Return. \line *N. de R.T.: Programa normalmente fornecido junto com o sistema operacional, cuja tarefa \'e9 carregar na mem\'f3ria do computador um programa no formato execut\'e1vel. \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 63 \line Programas nem sempre funcionam na primeira tentativa. Cada uma das fases precedentes pode falhar por \line causa de v\'e1rios erros que discutiremos. Por exemplo, um programa, ao ser executado, poderia tentar dividir por zero (uma opera\'e7\'e3o ilegal em computadores, da mesma maneira que \'e9 ilegal em aritm\'e9tica). Isto faria o computador \line ; imprimir uma mensagem de erro. O programador, ent\'e3o, retornaria \'e0 fase editar, faria as corre\'e7\'f5es necess\'e1rias e passaria pelas fases restantes novamente, para determinar se as corre\'e7\'f5es est\'e3o funcionando corretamente. \line Erro comum de programa\'e7\'e3o 1.1 \line Erros como os de divis\'e3o por zero acontecem quando um programa est\'e1 sendo executado; por isso, estes erros s\'e3o chamados de \ldblquote erros durante a execu\'e7\'e3o \ldblquote . Dividir por zero \'e9 geralmente um erro fatal, isto \'e9, um erro que causa o t\'e9rmino imediato do programa sem este ter executado seu trabalho com sucesso. Os erros n\'e3o-fatais permitem que os programas sejam executados at\'e9 a conclus\'e3o, freq\'fcentemente produzindo resultados incorretos. (Nota: em alguns sistemas, dividir por zero n\'e3o \'e9 um erro fatal. Consulte a \line documenta\'e7\'e3o do seu sistema.) \line A maioria dos programas em C++ faz entrada e/ou sa\'edda de dados. Certas fun\'e7\'f5es de C++ recebem sua entrada de cm (o \ldblquote stream padr\'e3o de entrada \ldblquote ; pronunciado \ldblquote c\'ea-in\rdblquote ), o qual normalmente \'e9 o teclado, por\'e9m cm pode ser conectado a outro dispositivo. Os dados s\'e3o freq\'fcentemente enviados para sa\'edda em cout (o \ldblquote stream padr\'e3o de \line sa\'edda \ldblquote  ; pronunciado \ldblquote c\'ea-aut\rdblquote ), que normalmente \'e9 a tela do computador, mas cout pode ser conectado a outro dispositivo. Quando dizemos que um programa imprime um resultado, normalmente queremos dizer que o resultado \line\'e9 exibido na tela. Os dados podem ser enviados para sa\'edda atrav\'e9s de outros dispositivos, como discos e impressoras. Existe tamb\'e9m um \ldblquote stream padr\'e3o de erros\rdblquote , chamado cerr. O stream cerr (normalmente conectado \'e0 tela) \'e9 \line j usado para exibir mensagens de erro. E comum que os usu\'e1rios direcionem os dados de sa\'edda normais, isto \'e9, cout, para um dispositivo diferente da tela, ao mesmo tempo em que mant\'eam cerr direcionado para a tela, de maneira \line que o usu\'e1rio possa ser imediatamente informado de erros. \line 1 .1 4 Tend\'eancias de hardware \line ( A comunidade de programa\'e7\'e3o progride na torrente cont\'ednua de melhorias dr\'e1sticas nas tecnologias de hardware, software e comunica\'e7\'e3o. A cada ano, as pessoas normalmente esperam pagar pelo menos um pouco mais pela maioria dos produtos e servi\'e7os. No caso das \'e1reas de computa\'e7\'e3o e comunica\'e7\'e3o, tem acontecido o contr\'e1rio, \line especialmente no que diz respeito ao custo do hardware para suportar estas tecnologias. Durante muitas d\'e9cadas, e sem perspectivas de mudan\'e7a previs\'edvel no futuro, os custos de hardware t\'eam caido rapidamente, para n\'e3o dizer \line\lquote  precipitadamente. Este \'e9 um fen\'f4meno da tecnologia, uma outra for\'e7a propulsora do estrondoso desenvolvimento econ\'f4mico atual. A cada um ou dois anos, as capacidades dos computadores, especialmente a quantidade de mem\'f3ria que t\'eam para executar programas, a quantidade de mem\'f3ria secund\'e1ria (tal como armazenamento em disco) que \line t\'eam para guardar programas e dados a longo prazo e as velocidades de seus processadores - a velocidade na qual os computadores executam seus programas (isto \'e9, fazem seu trabalho), cada uma delas tende a aproximadamente dobrar. O mesmo tem acontecido no campo das comunica\'e7\'f5es, com os custos despencando, especialmente nos \line\'faltimos anos, com a demanda por largura de banda nas comunica\'e7\'f5es atraindo uma enorme competi\'e7\'e3o. N\'e3o conhe cemos nenhum outro em que a tecnologia evolua t\'e3o depressa e os custos caiam t\'e3o rapidamente. \line Quando o uso de computadores explodiu, nas d\'e9cadas de 60 e 70, falava-se muito nas enormes melhorias que os \line computadores e as comunica\'e7\'f5es trariam para a produtividade humana. Mas estas melhorias n\'e3o se concretizaram. As organiza\'e7\'f5es estavam gastando grandes somas de dinheiro em computadores e certamente empregando-os eficazmente, mas sem obter os ganhos de produtividade que haviam sido esperados. Foi a inven\'e7\'e3o da tecnologia dos \line o microprocessadores em circuitos integrados e sua grande prolifera\'e7\'e3o no fim da d\'e9cada de 70 e na d\'e9cada de 80 que criou a base para as melhorias de produtividade da d\'e9cada de 90 que foram t\'e3o cruciais para a prosperidade econ\'f4mica. \line 1.15 Hist\'f3ria da Internet \line No fim da d\'e9cada de 60, um dos autores (HMD) era um estudante de p\'f3s-gradua\'e7\'e3o no MIT. Sua pesquisa no projeto Mac do MIT (atualmente o Laborat\'f3rio de Ci\'eancia da Computa\'e7\'e3o - a sede do World Wide Web Consortium) foi financiada pela ARPA - a Ag\'eancia para Projetos de Pesquisa Avan\'e7ados do Departamento de Defesa americano. A \par
64 C++ COMO PROGRAMAR \line ARPA patrocinou uma confer\'eancia, realizada na University of Illinois em Urbana-Champaign, reunindo v\'e1rias de- zenas de estudantes de p\'f3s-gradua\'e7\'e3o financiados pela ARPA para compartilhar suas id\'e9ias. Durante esta confer\'eancia, a ARPA divulgou o projeto de interligar em uma rede os principais sistemas de computa\'e7\'e3o de cerca de uma dezena de universidades e institui\'e7\'f5es de pesquisa financiadas pela ARPA. Eles iriam ser conectados com linhas de comunica\'e7\'f5es operando a uma velocidade - espantosa para a ocasi\'e3o - de 56KB (isto \'e9, 56.000 bits por segundo), isto em uma \'e9poca em que a maioria das pessoas (das poucas que podiam) se conectavam atrav\'e9s de linhas telef\'f4nicas a uma taxa de 1 00 bits por segundo. HMD lembra claramente da excita\'e7\'e3o provocada pela confer\'eancia. Pesquisadores de Harvard falavam em se comunicar com o \ldblquote supercomputador\rdblquote  Univac 1 108 instalado no outro lado do pa\'eds, na University of Utah, para executar c\'e1lculos relacionados com suas pesquisas em computa\'e7\'e3o gr\'e1fica. Muitas outras possibilidades excitantes foram levantadas. A pesquisa acad\'eamica estava prestes a dar um grande salto adiante. Pouco tempo depois desta confer\'eancia, a ARPA deu in\'edcio \'e0 implementa\'e7\'e3o da rede que se tornou rapidamente conhecida como ARPAnet, a av\'f3 da internet de hoje. \line As coisas funcionaram de forma diferente do que foi planejado originalmente. Em vez do principal benef\'edcio ser o dos pesquisadores poderem compartilhar os computadores uns dos outros, rapidamente tornou-se claro que simplesmente possibilitar que os pesquisadores se comunicassem r\'e1pida e facilmente entre eles mesmos atrav\'e9s do que se tornou conhecido como correio eletr\'f4nico (abreviatura e-mail) viria a ser o principal benef\'edcio da ARPAnet. Isto \'e9 verdade ainda hoje na Internet, com o e-mau facilitando comunica\'e7\'f5es de todos os tipos entre milh\'f5es de pessoas em todo o mundo. \line Um dos principais objetivos da ARPA para a rede era permitir que diversos usu\'e1rios enviassem e recebessem informa\'e7\'f5es ao mesmo tempo atrav\'e9s das mesmas vias de comunica\'e7\'e3o (tais como linhas telef\'f4nicas). A rede operava com uma t\'e9cnica denominada comuta\'e7\'e3o depacotes, com a qual dados digitais eram enviados em pequenos conjuntos, denominados pacotes. Os pacotes continham dados, informa\'e7\'f5es de endere\'e7amento, informa\'e7\'f5es para controle de erros e informa\'e7\'f5es de seq\'fcenciamento. A informa\'e7\'e3o de endere\'e7amento era usada para indicar a rota dos pacotes de dados at\'e9 seu destino. A informa\'e7\'e3o de seq\'fcenciamento era usada para ajudar a montar novamente os pacotes (que - devido aos mecanismos complexos de roteamento - poderiam na verdade chegar fora de ordem) em sua ordem original para apresenta\'e7\'e3o ao destinat\'e1rio. Pacotes de muitas pessoas eram misturados nas mesmas li- nhas. Esta t\'e9cnica de comuta\'e7\'e3o de pacotes reduziu enormemente os custos de transmiss\'e3o, se comparados aos custos de linhas de comunica\'e7\'e3o dedicadas. \line A rede foi projetada para operar sem controle centralizado. Isto significava que, se uma parte da rede falhasse, \line as partes que continuassem funcionando ainda seriam capazes de rotear pacotes dos remetentes at\'e9 os destinat\'e1rios atrav\'e9s de caminhos alternativos. \line O protocolo para comunica\'e7\'e3o atrav\'e9s da ARPAnet tornou-se conhecido como TCP (o protocolo de controle de transmiss\'e3o - Transmission Control Protocol). O TCP assegurava que as mensagens fossem roteadas adequada- mente do remetente at\'e9 o destinat\'e1rio e que estas mensagens chegassem intactas. \line Paralelamente \'e0 evolu\'e7\'e3o inicial da Internet, organiza\'e7\'f5es em todo o mundo estavam implementando suas pr\'f3prias redes, tanto para comunica\'e7\'e3o intra-organizacional (isto \'e9, dentro da organiza\'e7\'e3o) como interorganizacional (isto \'e9, entre organiza\'e7\'f5es). Surgiu uma enorme variedade de hardware e software para redes. Fazer com que estes se comunicassem entre si era um desafio. A ARPA conseguiu isto com o desenvolvimento do IP (o protocolo de conex\'e3o entre redes - Internetworking Protocol). criando uma verdadeira \ldblquote rede de redes\rdblquote . que \'e9 a arquitetura atual da Internet. O conjunto de protocolos combinados \'e9 agora comumente denominado de TCP/JP. \line Inicialmente, o uso da Internet estava restrito \'e0s universidades e institui\'e7\'f5es de pesquisa; em seguida, as for\'e7as armadas se tornaram um grande usu\'e1rio. Em um determinado momento, o governo decidiu permitir acesso \'e0 Internet para fins comerciais. Inicialmente, houve ressentimento entre as comunidades de pesquisa e das for\'e7as armadas - havia um sentimento de que os tempos de resposta ficariam degradados \'e0 medida que \ldblquote a rede\rdblquote  se tornasse saturada com tantos usu\'e1rios. \line Na verdade, aconteceu exatamente o contr\'e1rio. As empresas rapidamente se deram conta de que, fazendo um uso eficiente da Internet, poderiam ajustar suas opera\'e7\'f5es e oferecer servi\'e7os novos e melhores para seus clientes, de modo que come\'e7aram a gastar enormes quantias em dinheiro para desenvolver e aprimorar a Internet. Isto desencadeou uma ferrenha competi\'e7\'e3o entre as empresas de comunica\'e7\'e3o e os fornecedores de hardware e software para atender esta demanda. O resultado \'e9 que a largura de banda (isto \'e9, a capacidade de transportar informa\'e7\'e3o das linhas de comunica\'e7\'e3o) na Internet aumentou tremendamente e os custos despencaram. E amplamente reconhecido que a Internet desempenhou um papel significativo na prosperidade econ\'f4mica que os Estados Unidos e muitas outras na\'e7\'f5es industrializadas t\'eam experimentado ao longo da \'faltima d\'e9cada e provavelmente continuar\'e3o a experimentar por muitos anos. \par
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 65 \line 1.16 Hist\'f3ria da World Wide Web \line A World Wide Web permite aos usu\'e1rios de computadores localizar e visualizar documentos baseados em multim\'eddia (isto \'e9, documentos com texto, gr\'e1ficos, anima\'e7\'f5es, \'e1udios e/ou v\'eddeos) sobre praticamente qualquer assunto. Embora a Internet tenha sido desenvolvida h\'e1 mais de tr\'eas d\'e9cadas, a introdu\'e7\'e3o da World Wide Web foi um evento relativamente recente. Em 1990, Tim Berners-Lee, do CERN (o Laborat\'f3rio Europeu de F\'edsica de Part\'edculas) desenvolveu a World Wide Web e diversos protocolos de comunica\'e7\'e3o que formam sua espinha dorsal. \line A Internet e a World Wide Web certamente ser\'e3o citadas entre as mais importantes e profundas cria\'e7\'f5es da esp\'e9cie humana. No passado, a maioria dos aplicativos de computadores era executada em computadores \ldblquote isolados\rdblquote , isto \'e9, computadores que n\'e3o estavam conectados uns aos outros. Os aplicativos de hoje podem ser escritos para se comunicar entre as centenas de milh\'f5es de computadores do mundo. A Intemet mistura tecnologias de computa\'e7\'e3o e comunica\'e7\'f5es. Ela facilita nosso trabalho. Torna as informa\'e7\'f5es dispon\'edveis instantaneamente em todo o mundo de forma conveniente. Torna poss\'edvel que indiv\'edduos e pequenas empresas obtenham visibilidade em todo o mundo. Est\'e1 mudando a natureza da forma como os neg\'f3cios s\'e3o feitos. As pessoas podem pesquisar os melhores pre\'e7os de virtualmente qualquer produto ou servi\'e7o. Comunidades com interesses especiais podem se manter em contato umas com as outras. Pesquisadores podem ser instantaneamente informados sobre os \'faltimos avan\'e7os da ci\'eancia em todo o mundo. \line 1.17 Notas gerais sobre C++ e este livro \line C++ \'e9 uma linguagem complexa. Os programadores de C+\'f7 experientes \'e0s vezes se orgulham em poder criar algum uso misterioso, contorcido, \ldblquote enrolado\rdblquote , da linguagem. Isto \'e9 uma pr\'e1tica ruim de programa\'e7\'e3o. Ela torna os programas mais dificeis de serem lidos, mais propensos a apresentar comportamentos estranhos, mais dif\'edceis de testar e depurar e mais dif\'edceis de se adaptar a mudan\'e7as de requisitos. Este livro \'e9 dirigido a programadores novatos; assim, aqui enfatizamos a clareza do programa. A seguinte \'e9 nossa primeira \ldblquote boa pr\'e1tica de programa\'e7\'e3o\rdblquote . \line Boa pr\'e1tica de programa\'e7\'e3o 1.1 \line Escreva seus programas em C+ + de uma maneira simples e direta. Isto \'e9 \'e0s vezes chamado de KIS (\ldblquote mantenha-o simples\rdblquote  - Keep It Simple). N\'e3o \ldblquote force\rdblquote  a linguagem tentando usos estranhos. \line Voc\'ea ouviu que C e C++ s\'e3o linguagens port\'e1veis e que os programas escritos em C e C++ pode ser executados em muitos computadores diferentes. Portabilidade \'e9 um objetivo dif\'edcil de se atingir. O documento padr\'e3o C ANSI cont\'e9m uma longa lista de problemas relacionados com a portabilidade e foram escritos livros inteiros que discutem portabilidade. \line Dica de portabilidade 1.3 \line Embora seja poss\'edvel escrever programas port\'e1veis, existem muitos problemas entre compiladores de C e C+ + diferentes e computadores diferentes, que podem tornar a portabilidade dif\'edcil de ser obtida. Simplesmente escrever programas em C e C+ + n\'e3o garante portabilidade. O programador com frequ\'eancia precisar\'e1 lidar diretamente com varia\'e7\'f5es de compilador e computador \line Fizemos um cuidadoso walkthrough* do documento padr\'e3o ANSIIISO C++ e comparamos nossa apresenta\'e7\'e3o com ele em rela\'e7\'e3o \'e0 completude e precis\'e3o. Por\'e9m, C++ \'e9 uma linguagem rica, e existem algumas sutilezas na linguagem e alguns assuntos avan\'e7ados que n\'e3o cobrimos. Se voc\'ea precisar de detalhes t\'e9cnicos adicionais sobre C++, sugerimos que voc\'ea leia o documento padr\'e3o ANSI/ISO C++. Voc\'ea pode encomendar o documento padr\'e3o C+-i- no site da ANSI na Web \line http://www.ansi.org/ \line O t\'edtulo do documento \'e9 \ldblquote Information Technology - Programming Languages - C++\rdblquote  e o n\'famero do documento \'e9 ISO/IEC 14882-1998. Se voc\'ea preferir n\'e3o comprar o documento, a vers\'e3o antiga da minuta do padr\'e3o pode ser vista no site da World Wide Web \line *N de R.T.: Termo usado para descrever uma das atividades de desenvolvimento de software, que consiste em reunir a equipe de desenvolvimento para analisar o c\'f3digo de um programa e discutir a implementa\'e7\'e3o e as decis\'f5es tomadas pelos programadores; usada como ferramenta de \line treinamento e como pane de um processo de qualidade no desenvolvimento de software. \par
66 C++ COMO PROGRAMAR \line http: //www. cygnus . com/mis c/wp/ \line Inclu\'edmos uma bibliografia extensa de livros e documentos sobre C++ e programa\'e7\'e3o orientada a objetos. Tamb\'e9m inclu\'edmos um ap\'eandice de recursos para C++ que cont\'e9m muitos sites da Internet relativos a C++ e \'e0 programa\'e7\'e3o orientada a objetos. \line Muitas caracter\'edsticas das vers\'f5es atuais de C++ n\'e3o s\'e3o compat\'edveis com implementa\'e7\'f5es mais antigas de \line C++; assim, voc\'ea pode constatar que alguns dos programas deste texto n\'e3o funcionam com compiladores de C++ mais antigos. \line Boa pr\'e1tica de programa\'e7\'e3o 1.2 \line Leia os manuais para a vers\'e3o de C+ + que voc\'ea est\'e1 usando. Consulte estes manuais com freq\'fc\'eancia, para certificar-se de que esteja ciente da rica rela\'e7\'e3o de recursos que C++ apresenta e deque est\'e1 usando estes recursos corretamente. \line Boa pr\'e1tica de programa\'e7\'e3o 1.3 \line Seu computador e seu compilador s\'e3o bons professores. Se, depois de ler cuidadosamente seu nanual da linguagem C++ , voc\'ea n\'e3o tiver certeza de como funciona um recurso de C++, experimente usar um pequeno \ldblquote programa de teste\rdblquote  e veja o que acontece. Configure as op\'e7\'f5es do seu compilador para \ldblquote n\'edvel m\'e1ximo de advert\'eancias \ldblquote . Estude cada mensagem que obtiver ao compilar seus programas e corrija os programas para eliminar as mensagens. \line 1.18 Introdu\'e7\'e3o \'e0 programa\'e7\'e3o de C++ \line A linguagem C++ facilita uma abordagem estruturada e disciplinada ao projeto de um programa de computador. Introduzimos agora a programa\'e7\'e3o C++ e apresentamos v\'e1rios exemplos que ilustram muitas caracter\'edsticas importantes de C++. Cada exemplo \'e9 analisado um comando por vez. No Cap\'edtulo 2, apresentamos um tratamento detalhado da programa\'e7\'e3o estruturada em C++. Ent\'e3o, usamos a abordagem estruturada no Cap\'edtulo 5. Come\'e7ando com o Cap\'edtulo 6, estudamos a programa\'e7\'e3o orientada a objetos em C++. Novamente, por causa da import\'e2ncia central da programa\'e7\'e3o orientada a objetos neste livro, cada um dos primeiros cinco cap\'edtulos conclui com uma se\'e7\'e3o intitulada \ldblquote Pensando em objetos\rdblquote . Estas se\'e7\'f5es especiais introduzem os conceitos da orienta\'e7\'e3o a objetos e apresentam um estudo de caso que desafia o leitor a projetar e implementar em C\'f7+ um programa orientado a objetos de porte significativo. \line 1.19 Um programa simples: imprimindo uma linha de texto \line C++ usa nota\'e7\'f5es que podem parecer estranhas a n\'e3o-programadores. Come\'e7amos considerando um programa simples, que imprime uma linha de texto, O programa e sua sa\'edda na tela s\'e3o mostrados na Fig. 1.2. \line Este programa ilustra v\'e1rias caracter\'edsticas importantes da linguagem C++. Discutiremos cada linha do programa em detalhe. As linhas 1 e 2 \line II Fig. 1.2: figOlO2.cpp \line // Um primeiro programa emC++ \line come\'e7am cada uma com II, indicando que o restante de cada linha \'e9 um coment\'e1rio. Os programadores inserem coment\'e1rios para documentar programas e melhorar a legibilidade dos mesmos. Os coment\'e1rios ajudam tamb\'e9m outras pessoas a ler e entender seu programa. Os coment\'e1rios n\'e3o levam o computador a executar qualquer a\'e7\'e3o quando o programa for executado. Os coment\'e1rios s\'e3o ignorados pelo compilador C++ e n\'e3o causam qualquer gera\'e7\'e3o de c\'f3digo objeto em linguagem de m\'e1quina. O coment\'e1rio Um primeiro programa em C++ simplesmente descreve o prop\'f3sito do programa. Um coment\'e1rio que come\'e7a com II \'e9 chamado de coment\'e1rio de linha \'fanica porque o coment\'e1rio termina no fim da linha em que est\'e1. [Nota: os programadores de C++ podem usar tamb\'e9m o estilo de coment\'e1rio de C, no qual um coment\'e1rio - contendo possivelmente muitas linhas - come\'e7a com / e termina com */.1 \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 67 \par
Boa pr\'e1tica de programa\'e7\'e3o 1.4 \line Todo programa deveria come\'e7ar com um coment\'e1rio descrevendo a finalidade do programa. \par
Fig. 1.2 Programa de impress\'e3o de texto. \par
A linha 3 \par
#include <iostream> \par
\'e9 uma diretiva do pr\'e9-processador isto \'e9, uma mensagem para o pr\'e9-processador C++. As linhas in\'edciando com s\'e3o processadas pelo pr\'e9-processador antes de o programa ser compilado. Esta linha espec\'edfica diz ao pr\'e9-processador para incluir no programa o conte\'fado do arquivo de cabe\'e7alho do stream de entrada/sa\'edda, <iostream>. Este arquivo deve ser inclu\'eddo para qualquer programa que envia dados de sa\'edda para ateia ou recebe dados de entrada do teclado usando o estilo de entrada/sa\'edda com streams de C++. A Fig. 1.2 envia dados de sa\'edda para ateia, como logo veremos, O conte\'fado de iostream ser\'e1 explicado em mais detalhes mais tarde. \line Erro com um de programa\'e7\'e3o 1.2 \line Esquecer de incluir o arquivo ias tream em um programa que recebe dados de entrada do teclado ou envia dados de sa\'edda para a tela faz o compilador emitir uma mensagem de erro. \par
A linha 5 \par
int main( \par
faz parte de todo programa em C++. Os par\'eanteses depois de main indicam que main \'e9 um bloco de constru\'e7\'e3o de programa chamado de fun\'e7\'e3o. Os programas em C++ cont\'eam uma ou mais fun\'e7\'f5es, exatamente uma das quais deve ser main. A Fig. 1.2 cont\'e9m s\'f3 uma fun\'e7\'e3o. Os programas em C++ come\'e7am a executar na fun\'e7\'e3o main, ainda que main n\'e3o seja a primeira fun\'e7\'e3o no programa. A palavra-chave int, \'e0 esquerda de main. indica que main devolve um inteiro (n\'famero inteiro). Explicaremos o que quer dizer para uma fun\'e7\'e3o \ldblquote devolver um valor\rdblquote  quando estudarmos fun\'e7\'f5es a fundo, no Cap\'edtulo 3. Por ora, simplesmente inclua a palavra-chave int \'e0 esquerda de main em cada um de seus programas. \line A chave \'e0 esquerda, \{, linha 6, deve come\'e7ar o corpo de qualquer fun\'e7\'e3o. Uma chave \'e0 direita, \}, linha 10, correspondente deve terminar o corpo de cada fun\'e7\'e3o. A linha 7 \line std::cout \'ab \ldblquote Bem-vindo a C++!\\n\rdblquote ; \line instrui o computador a imprimir na tela o string de caracteres contido entre as aspas. A linha inteira, inclusive std: : cout. o operador\'ab, o string \ldblquote Bem-vindo a c++! \\n\rdblquote  e o ponto-e-v\'edrgula \'e9 chamada de comando. Todo comando deve terminar com um ponto-e-v\'edrgula (tamb\'e9m conhecido como terminador de comando). A entrada/sa\'edda em C++ \'e9 realizada com streams de caracteres. Deste modo, quando o comando precedente for executado, \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx308\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3404\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3693\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4678\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5183\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6072\pard\intbl 1 \cell II Fig. 1.2: figol_02.cpp \cell\cell\cell\cell\cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx308\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3693\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4678\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5183\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6072\pard\intbl 2 \cell II Um primeiro programa em C++ \cell\cell\cell\cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx308\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3404\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3693\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4678\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5183\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6072\pard\intbl 3 \cell #include <iostream> \cell\cell\cell\cell\cell\row
\intbl 4 \cell\cell\cell\cell\cell\cell\row
\intbl 5 \cell intmain () \cell\cell\cell\cell\cell\row
\intbl 6 \cell\{ \cell\cell\cell\cell\cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx308\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3693\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4678\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5183\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6072\pard\intbl 7 \cell std::cout \'ab \ldblquote Bem-vindo a C++!\\n\rdblquote ; \cell\cell\cell\cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx308\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3404\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3693\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4678\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5183\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6072\pard\intbl 8 \cell\cell\cell\cell\cell\cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx308\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3693\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4678\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5183\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6072\pard\intbl 9 \cell return O; II indica que o programa \cell terminou \cell com \cell sucesso \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx308\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3404\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3693\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4678\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5183\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6072\pard\intbl 10 \cell\} \cell\cell\cell\cell\cell\row
\intbl Be \cell m-vindo a C++! \cell\cell\cell\cell\cell\row
\pard\par
\pard\sb100\sa240 68 C++ COMO PROGRAMAR \line isto enviar\'e1 o stream de caracteres Bem-vindo a C++! para o objeto stream de sa\'edda padr\'e3o- s td: : cou t - que normalmente est\'e1 \ldblquote conectado\rdblquote  \'e0 tela. Discutimos as diversas caracter\'edsticas de std: : cout em detalhes no \line Cap\'edtulo 11. \line Note que colocamos std: : antes de cout. Isto \'e9 requerido quando usamos a diretiva do pr\'e9-processador #include <iostream>. A nota\'e7\'e3o std: : cout especifica que estamos usando um nome, neste caso cout, que pertence ao \ldblquote ambiente de nomes\rdblquote  std. Ambientes de nomes s\'e3o um recurso avan\'e7ado de C++. Discutimos ambientes de nomes em profundidade no Cap\'edtulo 21. Por enquanto, voc\'ea deve simplesmente lembrar de incluir std: : antes de cada men\'e7\'e3o a cout, cm e cerr em um programa. Isto pode ser inc\'f4modo - na Fig. 1.14, introduzimos o comando using, que nos permitir\'e1 evitar ter que colocar std: : antes de cada uso de um nome do ambiente de nomes std. \line O operador \'ab \'e9 chamado de operador de inser\'e7\'e3o no stream. Quando este programa for executado, o valor \'e0 direita do operador, o operando \'e0 direita, \'e9 inserido no stream de sa\'edda. Os caracteres do operando \'e0 direita s\'e3o normalmente impressos exatamente como eles aparecem entre as aspas duplas. Note, por\'e9m, que os caracteres \\n n\'e3o s\'e3o exibidos na tela. A barra invertida \'e9 chamada de caractere de escape. Indica que um caractere \ldblquote especial\rdblquote  deve ser enviado para a sa\'edda. Quando uma barra invertida for encontrada em um string de caracteres, o pr\'f3ximo caractere \'e9 combinado com a barra invertida para formar uma seq\'fc\'eancia de escape. A seq\'fc\'eancia de escape \\n significa nova linha. Ela faz com que o cursor (isto \'e9, o indicador da posi\'e7\'e3o corrente na tela) mova-se para o in\'edcio da pr\'f3xima linha na tela. Algumas outras seq\'fc\'eancias de escape comuns s\'e3o listadas na Fig. 1.3. \par
Fig. 1.3 Algumas seq\'fc\'eancias comuns de escape. \line Erro comum de programa\'e7\'e3o 1.3 \line Omitir o ponto-e-v\'edrgula nofim de um comando \'e9 um erro de sintaxe. Um erro de sintaxe ocorre quando o compilador n\'e3o pode reconhecer um comando. O compilador normalmente emite uma mensagem de erro para ajudar o programador a localizar e corrigir o comando incorreto. Os erros de sintaxe s\'e3o viola\'e7\'f5es da linguagem. Os erros de sintaxe s\'e3o tamb\'e9m chamados de erros de compila\'e7\'e3o, erros durante a compila\'e7\'e3o ou erros de compila\'e7\'e3o porque aparecem durante a fase de compila\'e7\'e3o do programa. \line A linha 9 \line return O; II indica que o programa terminou com sucesso \line\'e9 inclu\'edda no fim de toda fun\'e7\'e3o main. A palavra-chave return de C++ \'e9 um dos v\'e1rios meios que usaremos para sair de uma fun\'e7\'e3o. Quando o comando return for usado no fim de main, como mostrado aqui, o valor O indica que o programa terminou com sucesso. No Cap\'edtulo 3, discutimos fun\'e7\'f5es em detalhes, e as raz\'f5es para incluir este comando se tornar\'e3o claras. Por ora, simplesmente inclua este comando em cada programa, ou o compilador pode gerar uma mensagem de advert\'eancia em alguns sistemas. \line A chave \'e0 direita, \}, linha 10, indica o final de main. \line Boa pr\'e1tica de programa\'e7\'e3o 1.5 \line Muitos programadores fazem com que o \'faltimo caractere impresso por uma fun\'e7\'e3o veja uma nova linha \line (\\n). Isto assegura que a fun\'e7\'e3o deixar\'e1 o cursor da tela posicionado no in\'edcio de uma nova linha. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1781\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx8946\pard\intbl Seq\'fc\'eancia de escape \cell Descri\'e7\'e3o  Nova linha. Posiciona o cursor da tela no in\'edcio da pr\'f3xima linha. \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx8946\pard\intbl\\n \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1781\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx8946\pard\intbl\\t \cell Tabula\'e7\'e3o horizontal. Move o cursor da tela para a pr\'f3xima posi\'e7\'e3o de tabula\'e7\'e3o. \cell\row
\intbl\\r \cell Retorno do carro. Posiciona o cursor da tela no in\'edcio da linha atual; n\'e3o avan\'e7a para a pr\'f3xima linha. \cell\row
\intbl\\a \cell Alerta. Faz soar o alarme do sistema. \cell\row
\intbl\\\\ \cell Barra invertida. Usada para imprimir um caractere barra invertida. \cell\row
\intbl\\\ldblquote  \cell Aspas. Usada para imprimir um caractere aspas. \cell\row
\pard\par
\pard\sb100\sa240 CAPITULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 69 \line Conven\'e7\'f5es desta natureza encorajam a reusabilidade de software - uma meta-chave em ambientes de \line desenvolvimento de software. \line Boa pr\'e1tica de programa\'e7\'e3o 1.6 \line Recue o corpo inteiro de cada fun\'e7\'e3o um n\'edvel de indenta\'e7\'e3o nas marcas de tabula\'e7\'e3o que definem o corpo da fun\'e7\'e3o. Isto faz com que a estrutura funcional de um programa se destaque e ajuda a tornar os programas mais f\'e1ceis de ler. \line Boa pr\'e1tica de programa\'e7\'e3o 1.7 \line Estabele\'e7a uma conven\'e7\'e3o para o tamanho dos recuos de indenta\'e7\'e3o que voc\'ea prefere; ent\'e3o, aplique uniformemente essa conven\'e7\'e3o. A tecla de tabula\'e7\'e3o pode ser usada para criar recuos, mas pontos de tabula\'e7\'e3o podem variar Recomendamos usar espa\'e7os entre tabula\'e7\'f5es de 1/4 de polegada ou (prefer\'edvel) tr\'eas espa\'e7os para criar o recuo para um n\'edvel de indenta\'e7\'e3o. \line Bem-vindo a C++! pode ser exibido de v\'e1rios modos. Por exemplo, a Fig. 1.4 usa m\'faltiplos comandos de inser\'e7\'e3o no streum (linhas 7 e 8) e, ainda assim, produz sa\'edda id\'eantica \'e0 do programa da Fig. 1.2. Isto funciona porque cada comando de inser\'e7\'e3o no stream retoma a impress\'e3o no ponto em que o comando anterior havia parado a impress\'e3o. A primeira inser\'e7\'e3o no stream imprime Bem-vindo seguido por um espa\'e7o e a segunda inser\'e7\'e3o no stream come\'e7a a imprimir na mesma linha, imediatamente ap\'f3s o espa\'e7o deixado pela inser\'e7\'e3o anterior. Em geral, C++ permite ao programador expressar comandos de v\'e1rios modos. \line Um \'fanico comando pode imprimir m\'faltiplas linhas usando caracteres nova linha, como na Fig. 1.5. Cada vez que uma seq\'fc\'eancia de escape \\n (nova linha) \'e9 encontrada no stream de sa\'edda, o cursor de tela \'e9 posicionado no in\'edcio da pr\'f3xima linha. Para conseguir uma linha em branco em sua sa\'edda, simplesmente coloque dois caracteres nova linha um atr\'e1s do outro, como na Fig. 1.5. \par
Fig. 1.5 Impress\'e3o em m\'faltiplas linhas com um \'fanico comando usando cout (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5864\pard\intbl 1 II Fig. 1.4: figOlO4.cpp \cell\row
\intbl 2 II Imprimindo uma linha usando m\'faltiplos comandos \cell\row
\intbl 3 #include <iostream> \cell\row
\intbl 4 \cell\row
\intbl 5 int main( \cell\row
\intbl 6 \{ \cell\row
\intbl 7 std: :cout \'ab \ldblquote Bem-vindo \ldblquote ; \cell\row
\intbl 8 std::cout \'ab \ldblquote a C++\rquote\\n\rdblquote ; \cell\row
\intbl 9 \cell\row
\intbl 10 return 0; /1 indica que o programa terminou com sucesso \cell\row
\intbl 11 \cell\row
\intbl Bem-vindo a C++! \cell\row
\intbl Fig. 1.4 Impress\'e3o em uma linha com comandos separados usando cout. \cell\row
\intbl 1 II Fig. 1.5: fig0lo5.cpp \cell\row
\intbl 2 1/ Imprimindo m\'faltiplas linhas com um \'fanico comando \cell\row
\intbl 3 #include <iostream> \cell\row
\intbl 4 \cell\row
\intbl 5 int main( \cell\row
\intbl 6 \{ \cell\row
\intbl 7 std: : cout \'ab \ldblquote Bem-vindo\\na\\n\\nC++! \\n\rdblquote ; \cell\row
\intbl 8 \cell\row
\intbl 9 return 0; II indica que o programa terminou com sucesso \cell\row
\intbl lO ) \cell\row
\pard\par
\pard\sb100\sa240 70 C++ COMO PROGRAMAR \line Bem-vindo \line a \line Fig. 1.5 Impress\'e3o em linhas m\'faltiplas com um \'fanico comando usando cout (parte 2 de 2). \line 1.20 Outro programa simples: somando dois inteiros \line Nosso pr\'f3ximo programa usa o objeto std: : cm para entrada em stream e o operador de extra\'e7\'e3o stream, \'bb, para obter dois inteiros digitados no teclado pelo usu\'e1rio, computa a soma destes valores e exibe, ou imprime, o resultado usando std: : cout. O programa e uma exibi\'e7\'e3o de amostra s\'e3o mostrados na Fig. 1.6. \line Os coment\'e1rios nas linhas 1 e 2 \line II Fig. 1.6: figOlO6.cpp \line II Programa de adi\'e7\'e3o \line descrevem o nome do arquivo e a finalidade do programa. A diretiva para o pr\'e9-processador C++ \line #include <iostream> \line na linha 3 inclui o conte\'fado do arquivo de cabe\'e7alho iostream no programa. \line 1 II Fig. 1.6: figOlO6.cpp \line 2 // Programa de adi\'e7\'e3o \line 3 #include <iostream> \line 4 \line II declara\'e7\'e3o \line II prompt \line // l\'ea um inteiro \line II prompt \line // l\'ea um inteiro \line II atribui\'e7\'e3o da soma \line // imprime a soma \line Digite o primeiro inteiro \line 45 \line Digite o segundo inteiro \line 72 \line A soma \'e9 117 \line Fig. 1.6 Um programa de adi\'e7\'e3o. \line Como j\'e1 dissemos antes, todo programa come\'e7a sua execu\'e7\'e3o com a fun\'e7\'e3o main. A chave \'e0 esquerda marca o in\'edcio do corpo de main e a chave \'e0 direita correspondente marca o fim de main. A linha 7 \par
5 intmain () \line 6 \line 7 int integeri, integer2, sum; \line 8 \line 9 std::cout \'ab \ldblquote Digite o primeiro inteiro\\n\rdblquote ; \line 10 std::cin \'bb integerl; \line 11 std::cout \'ab \ldblquote Digite o segundo inteiro\\n\rdblquote ; \line 12 std::cin \'bb integer2; \line 13 sum = integeri + integer2; \line 14 std: :cout \'ab \ldblquote A soma \'e9 \ldblquote  \'ab sum \'ab std: :endl; \line 15 \line 16 return 0; // indica que o programa terminou com \'eaxito \line 17 \par
int integeri, integer2, sum; II declara\'e7\'e3o \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 71 \line\'e9 uma declara\'e7\'e3o. As palavras integeri. integer2 e sum s\'e3o nomes de vari\'e1veis. Uma vari\'e1vel \'e9 uma posi\'e7\'e3o na mem\'f3ria do computador onde um valor pode ser armazenado para ser usado por um programa. Esta declara\'e7\'e3o especifica que as vari\'e1veis integeri, integer2 e sum s\'e3o dados do tipo int. o que significa que estas vari\'e1veis guardar\'e3o valores inteiros, isto \'e9, n\'fameros inteiros tais como 7, -11, 0, 31914. Todas as vari\'e1veis devem ser declaradas com um nome e um tipo de dados antes de poderem ser usadas em um programa. Diversas vari\'e1veis do mesmo tipo podem ser declaradas em uma declara\'e7\'e3o ou em declara\'e7\'f5es m\'faltiplas. Pod\'edamos ter escrito tr\'eas declara\'e7\'f5es, uma para cada vari\'e1vel, mas a declara\'e7\'e3o precedente \'e9 mais concisa. \line Boa pr\'e1tica de programa\'e7\'e3o L8 \line Alguns programadores preferem declarar cada vari\'e1vel em uma linha separada. Este formato permite a \line f\'e1cil inser\'e7\'e3o de um coment\'e1rio descritivo ap\'f3s cada declara\'e7\'e3o. \line Logo discutiremos os tipos de dados doubie (para especificar n\'fameros reais, isto \'e9, n\'fameros com pontos decimais como 3.4, 0.0, - 11.19) e char (para especificar dados contendo caracteres; uma vari\'e1vel char pode guardar s\'f3 uma \'fanica letra min\'fascula, uma \'fanica letra mai\'fascula, um \'fanico d\'edgito ou um \'fanico caractere especial, tais como x. $, 7, , etc.). \line Boa pr\'e1tica de programa\'e7\'e3o 1.9 \line Coloque um espa\'e7o ap\'f3s cada v\'edrgula ( , ) para tornar os programas mais leg\'edveis. \line Um nome de vari\'e1vel \'e9 qualquer identificador v\'e1lido. Um identificador \'e9 uma s\'e9rie de caracteres que consiste em letras, d\'edgitos e o caractere sublinhado (_), que n\'e3o come\'e7a com um d\'edgito. C++ \'e9 sens\'edvel a mai\'fasculas e min\'fasculas, isto \'e9, letras mai\'fasculas e min\'fasculas para ela s\'e3o diferentes; assim, ai e Ai s\'e3o identificadores diferentes. \line Dica de portabilidade 1.4 \line C++ permite identificadores de qualquer comprimento, mas o sistema e/ou implementa\'e7\'e3o de C++ podem impor algumas restri\'e7\'f5es sobre o comprimento de identificadores. Use identificadores de 3] caracteres, ou menos, para assegurar a portabilidade dos seus programas. \line Boa pr\'e1tica de programa\'e7\'e3o 1. 10 \line Escolher nomes de vari\'e1veis significativos ajuda um programa a ser \ldblquote autodocumentado \ldblquote , isto \'e9, torna mais f\'e1cil de entender o programa simplesmente lendo-o, em vez de ter que ler manuais ou usar coment\'e1rios em excesso. \line Boa pr\'e1tica de programa\'e7\'e3o 1.11 \line Evite identificadores que come\'e7am com sublinhado (_) simples ou duplo, porque compiladores de C+ + podem usar nomes semelhantes para seu pr\'f3prio uso interno. Isto evitar\'e1 que os nomes escolhidos por voc\'ea sejam confundidos com nomes que os compiladores escolhem. \line As declara\'e7\'f5es de vari\'e1veis podem ser colocadas em quase qualquer lugar dentro de uma fun\'e7\'e3o. Por\'e9m, a declara\'e7\'e3o de uma vari\'e1vel deve aparecer antes de a mesma ser usada no programa. Por exemplo, no programa da Fig. 1.6, em vez de usar uma declara\'e7\'e3o \'fanica para todas as tr\'eas vari\'e1veis, poderiam ter sido usadas tr\'eas declara\'e7\'f5es separadas. A declara\'e7\'e3o \line int integeri; \line poderia ter sido colocada imediatamente antes da linha \line std: :cin \'bb integeri; \line a declara\'e7\'e3o \line int integer2; \par
72 C++ COMO PROGRAMAR \line poderia ter sido colocada imediatamente antes da linha \line std::cin \'bb integer2; \line e a declara\'e7\'e3o \line int sum; \line poderia ter sido colocada imediatamente antes da linha \line suni = integeri + integer2; \line Boa pr\'e1tica de programa\'e7\'e3o 1.12 \line Sempre coloque uma linha em branco entre uma declara\'e7\'e3o e comandos execut\'e1veis adjacentes. Isto faz \line com que as declara\'e7\'f5es se destaquem no programa, contribuindo para a clareza do mesmo. \line Boa pr\'e1tica de programa\'e7\'e3o 1.13 \line Se voc\'ea preferir colocar declara\'e7\'f5es no in\'edcio de uma fun\'e7\'e3o, separe essas declara\'e7\'f5es dos comandos execut\'e1veis da fun\'e7\'e3o com uma linha em branco, para destacar onde as declara\'e7\'f5es terminam e os comandos execut\'e1veis come\'e7am. \line A linha 9 \line std::cout \'ab \ldblquote Digite o primeiro inteiro\\n\rdblquote ; 1/ prompt \line imprime o string Digite o primeiro inteiro (tamb\'e9m conhecido como literal de string ou um literal) na tela e posiciona o cursor no in\'edcio da pr\'f3xima linha. Esta mensagem \'e9 um prompt porque ela pede ao usu\'e1rio para tomar uma a\'e7\'e3o espec\'edfica. Gostamos de ler o comando precedente como \ldblquote std: : cout obt\'e9m o string de caracteres \ldblquote Digite o primeiro inteiro\\n\rdblquote . \line A linha 10 \line std::cin \'bb integeri; II l\'ea uni inteiro \line usa o objeto cm de entrada em stream (do ambiente de nomes std) e o operador de extra\'e7\'e3o de srream, \'bb. para obter um valor do teclado. Usar o operador de extra\'e7\'e3o de stream com std: : cm retira caracteres de entrada do stream padr\'e3o de entrada, que normalmente \'e9 o teclado. Gostamos de ler o comando precedente como \ldblquote s td: cm fornece um valor para integeri\rdblquote  ou, simplesmente, \ldblquote std: cm fornece integeri\rdblquote . \line Quando o computador executa o comando precedente, ele espera o usu\'e1rio digitar um valor para a vari\'e1vel integeri. O usu\'e1rio responde digitando um inteiro (como caracteres) e ent\'e3o apertando a tecla Enter (\'e0s vezes chamada de tecla Return) para enviar o n\'famero ao computador. O computador ent\'e3o atribui este n\'famero (ou valor), \'e0 vari\'e1vel integeri. Quaisquer refer\'eancias subseq\'fcentes a integeri tio programa usar\'e3o este mesmo valor. \line Os objetos strearn std: cout e std: : cm facilitam a intera\'e7\'e3o entre o usu\'e1rio e o computador. Como \line esta intera\'e7\'e3o se assemelha a um di\'e1logo, ela \'e9 freq\'fcentemente chamada de computa\'e7\'e3o conversacional ou computa\'e7\'e3o interativa. \line Alinha 11 \line std::cout \'ab \ldblquote Digite o segundo inteiro\\n\rdblquote ; II prompt \line exibe as palavras Digi te o segundo inteiro na tela e, ent\'e3o, posiciona o cursor no in\'edcio da pr\'f3xima linha. Este comando solicita ao usu\'e1rio que execute uma a\'e7\'e3o. A linha 12 \line std::cin \'bb integer2; /1 l\'ea um inteiro \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 73 \par
obt\'e9m um valor fornecido pelo usu\'e1rio para a vari\'e1vel integer2. \line O comando de atribui\'e7\'e3o na linha 13 \line sum = integeri + integer2; \line calcula a soma das vari\'e1veis integeri e integer2 e atribui o resultado \'e0 vari\'e1vel sum usando o operador de atribui\'e7\'e3o =. O comando \'e9 lido como, \ldblquote suin recebe o valor de integeri + integer2.\rdblquote  A maioria dos c\'e1lculos s\'e3o executados em comandos de atribui\'e7\'e3o. O operador = e o operador + s\'e3o chamados de operadores bin\'e1rios porque cada um tem dois operandos. No caso do operador +, os dois operandos s\'e3o integeri e integer2. No caso do operador anterior, os dois operandos s\'e3o sum e o valor da express\'e3o integeri + integer2. \line Boa pr\'e1tica de programa\'e7\'e3o 1.14 \line Coloque espa\'e7os dos dois lados de um operador bin\'e1rio. Isto faz com que o operador se destaque, tornando o programa mais leg\'edvel. \line A linha 14 \line std: :cout \'ab \ldblquote A soma \'e9 \ldblquote  \'ab sum \'ab std: :endl; II imprime a soma \line exibe o string de caracteres A soma \'e9 seguido pelo valor num\'e9rico da vari\'e1vel sum seguido por std: : endi (endi \'e9 uma abrevia\'e7\'e3o para \ldblquote fim de linha;\rdblquote  endi tamb\'e9m \'e9 um nome no ambiente de nomes std) - um assim chamado manipulador de stream. O manipulador std: : endi d\'e1 sa\'edda a um caractere de nova linha e ent\'e3o \ldblquote descarrega o buifer de sa\'edda\rdblquote . Isto simplesmente significa que em alguns sistemas, nos quais os dados de sa\'edda se acumulam na m\'e1quina at\'e9 que existam suficientes para que \ldblquote valha a pena exibir\rdblquote , std: endi for\'e7a a exibi\'e7\'e3o de quaisquer dados de sa\'edda acumulados at\'e9 aquele instante. \line Note que o comando precedente d\'e1 sa\'edda a diversos valores de tipos diferentes, O operador de inser\'e7\'e3o no stream \ldblquote sabe\rdblquote  como dar sa\'edda a cada peda\'e7o dos dados. Usar m\'faltiplos operadores de inser\'e7\'e3o no stream (\'ab)em um \'fanico comando \'e9 chamado de concatenar, encadear ou cascatear as opera\'e7\'f5es de inser\'e7\'e3o no stream. Deste modo, \'e9 desnecess\'e1rio se ter m\'faltiplos comandos de sa\'edda para dar sa\'edda a m\'faltiplos peda\'e7os de dados. \line Os c\'e1lculos podem tamb\'e9m ser executados em comandos de sa\'edda. Poder\'edamos ter combinado os dois comandos das linhas 13 e 14cm um s\'f3 comando \line std::cout \'ab \lquote A soma \'e9 \lquote  \'ab integeri + integer2 \'ab std::endl; \line eliminando assim a necessidade da vari\'e1vel sum. \line A chave \'e0 direita, \}, informa ao computador que se chegou ao fim da fun\'e7\'e3o main. \line Uma caracter\'edstica poderosa de C++ \'e9 que os usu\'e1rios podem criar seus pr\'f3prios tipos de dados (exploraremos este recurso no Cap\'edtulo 6). Assim, os usu\'e1rios podem ent\'e3o \ldblquote ensinar\rdblquote  a C++ como receber entradas e fornecer sa\'eddas com valores destes novos tipos de dados usando os operadores \'bb e \'ab (isto \'e9 chamado de sobrecarga de um operador - um t\'f3pico que exploraremos no Cap\'edtulo 8). \line 1.21 Conceitos de mem\'f3ria \line Nomes de vari\'e1veis, tais como integeri, integer2 e sum, correspondem, na realidade, aposi\'e7\'f5es na memoria do computador. Toda vari\'e1vel tem um nome, um tipo, um tamanho e um valor. \line No programa de adi\'e7\'e3o da Fig. 1.6, quando o comando \line std::cin \'bb integeri; \line\'e9 executado, os caracteres digitados pelo usu\'e1rio s\'e3o convertidos para um inteiro que \'e9 colocado em uma posi\'e7\'e3o de mem\'f3ria \'e0 qual o nome integeri foi associado pelo compilador de C++. Suponha que o usu\'e1rio forne\'e7a o n\'famero 45 como o valor para integeri. O computador colocar\'e1 45 na posi\'e7\'e3o integeri, como mostrado na Fig. 1.7. \par
II atribui\'e7\'e3o a soma \par
74 C++ COMO PROGRAMAR \line integerl 45 \line Fig. 1.7 Posi\'e7\'e3o de mem\'f3ria mostrando o nome e valor de uma vari\'e1vel. \line Sempre que um valor \'e9 colocado em uma posi\'e7\'e3o de mem\'f3ria, o valor substitui o valor anterior que havia \line nessa localiza\'e7\'e3o. O valor anterior \'e9 perdido. \line Retornando ao nosso programa de adi\'e7\'e3o, quando o comando \line std::cin \'bb integer2; \line\'e9 executado, suponha que o usu\'e1rio digite o valor 72. Este valor \'e9 colocado na posi\'e7\'e3o integer2 e a mem\'f3ria fica como mostrado na Fig. 1.8. Note que estas posi\'e7\'f5es n\'e3o s\'e3o, necessariamente, posi\'e7\'f5es adjacentes na mem\'f3ria. \par
Fig. 1.8 Posi\'e7\'f5es de mem\'f3ria depois de os valores para as duas vari\'e1veis terem sido fornecidos como entrada. \line Uma vez que o programa tenha obtido os valores para integeri e integer2. ele soma estes valores e \line coloca a soma na vari\'e1vel sum. O comando \line sum = integeri \'f7 integer2; \line que executa a adi\'e7\'e3o tamb\'e9m substitui qualquer valor que esteja armazenado em suxn. Isto acontece quando a soma calculada de integeri e integer2 \'e9 colocada na posi\'e7\'e3o sum (sem levar em conta que j\'e1 pode haver um valor em sum; esse valor \'e9 perdido). Depois que suin \'e9 calculada, a mem\'f3ria fica como mostrado na Fig. 1.9. Note que os valores de integeri e integer2 aparecem exatamente como estavam antes de serem usados no c\'e1lculo de sum. Estes valores foram usados, mas n\'e3o destru\'eddos, quando o computador executou o c\'e1lculo. Deste modo, quando um valor \'e9 lido de uma posi\'e7\'e3o de mem\'f3ria, o processo \'e9 n\'e3o-destrutivo. \line integeri 45 \line integer2 72 \line suni 117 \line Fig. 1.9 Posi\'e7\'f5es de mem\'f3ria ap\'f3s um c\'e1lculo. \line 1.22 Aritm\'e9tica \line A maioria dos programas executa c\'e1lculos aritm\'e9ticos. Os operadores aritm\'e9ticos est\'e3o resumidos na Fig. 1.10. Note o uso de v\'e1rios s\'edmbolos especiais n\'e3o usados em \'e1lgebra. O asterisco (*) indica multiplica\'e7\'e3o e o sinal de percentagem (%) \'e9 o operador m\'f3dulo que ser\'e1 discutido logo mais \'e0 frente. Os operadores aritm\'e9ticos da Fig. 1.10 \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx877\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1226\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1635\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1871\pard\intbl integeri \cell f \cell 45 \cell\cell\row
\intbl integer2 \cell\cell 72 \cell\cell\row
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 75 \line s\'e3o todos operadores bin\'e1rios, isto \'e9, operadores que recebem dois operandos. Por exemplo, a express\'e3o integerl + integer2 cont\'e9m o operador bin\'e1rio + e o dois operandos integerl e integer2. \par
Fig. 1.10 Operadores aritm\'e9ticos. \line A divis\'e3o inteira (isto \'e9, tanto o numerador como o denominador s\'e3o inteiros) d\'e1 um resultado inteiro; por exemplo, \line a express\'e3o 7 / 4 fornece o valor 1, e a express\'e3o 17 / 5 fornece o valor 3. Note que qualquer parte fracion\'e1ria \line na divis\'e3o inteira \'e9 simplesmente descartada (isto \'e9, truncada) - n\'e3o ocorre nenhum arredondamento. \line C++ oferece o operador m\'f3dulo, %, que d\'e1 o resto da divis\'e3o inteira. O operador m\'f3dulo pode ser usado somente com operandos inteiros. A express\'e3o x % y fornece o resto depois de x ser dividido por y. Assim, 7 % 4 d\'e1 3. e 17 % 5 d\'e1 2. Nos cap\'edtulos mais \'e0 frente, discutiremos muitas aplica\'e7\'f5es interessantes do operador m\'f3dulo, tal como determinar se um n\'famero \'e9 m\'faltiplo de um outro (um caso especial disto \'e9 determinar se um n\'famero \'e9 par ou \'edmpar). \line Erro comum de programa\'e7\'e3o 1.4 \line Tentar usar o operador m\'f3dulo, %, com operandos n\'e3o-inteiros \'e9 um erro de sintaxe. \line As express\'f5es aritm\'e9ticas em C++ devem ser fornecidas para o computador no formato em linha. Deste modo, express\'f5es tais como \ldblquote a dividido por b\rdblquote  devem ser escritas como a / b de forma que todas as constantes, vari\'e1veis e operadores apare\'e7am em linha. A nota\'e7\'e3o alg\'e9brica \line a \line b \line geralmente n\'e3o \'e9 aceit\'e1vel para os compiladores, embora existam alguns pacotes de software para fins especiais que suportam a nota\'e7\'e3o mais natural para express\'f5es matem\'e1ticas complexas. \line Os par\'eanteses s\'e3o usados em express\'f5es de C++ quase do mesmo modo que nas express\'f5es alg\'e9bricas. Por \line exemplo, para multiplicar a pela quantidade b + c escrevemos: \line a * (b + c) \line C++ aplica os operadores em express\'f5es aritm\'e9ticas em uma seq\'fc\'eancia precisa, determinada pelas seguintes regras de preced\'eancia de operadores, que em geral s\'e3o as mesmas que aquelas seguidas na \'e1lgebra: \line 1. Operadores em express\'f5es contidas dentro de pares de par\'eanteses s\'e3o calculados primeiro. Assim, os par\'eanteses podem ser usados para for\'e7ar que a ordem de c\'e1lculo aconte\'e7a em qualquer seq\'fc\'eancia desejada pelo programador Dizemos que os par\'eanteses est\'e3o no \ldblquote n\'edvel mais alto de preced\'eancia\rdblquote . Em casos de par\'eanteses aninhados, ou embutidos, os operadores no par mais interno de par\'eanteses s\'e3o aplicados primeiro. \line 2. As opera\'e7\'f5es de multiplica\'e7\'e3o, divis\'e3o e m\'f3dulo s\'e3o aplicadas em seguida. Se uma express\'e3o cont\'e9m v\'e1rias opera\'e7\'f5es de multiplica\'e7\'e3o, divis\'e3o e m\'f3dulo, os operadores s\'e3o aplicados da esquerda para a \line direita. Dizemos que a multiplica\'e7\'e3o, a divis\'e3o e o m\'f3dulo est\'e3o no mesmo n\'edvel de preced\'eancia. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1669\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3657\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5590\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6684\pard\intbl Opera\'e7\'e3o em C++ \cell Operador aritm\'e9tico \cell Express\'e3o alg\'e9brica \cell Express\'e3o  C++ \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1669\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3657\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5590\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6167\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6684\pard\intbl Adi\'e7\'e3o \cell + \cell f+7 \cell f + \cell 7 \cell\row
\intbl Subtra\'e7\'e3o \cell - \cell p - c \cell p - \cell c \cell\row
\intbl Multiplica\'e7\'e3o \cell * \cell bm \cell b * \cell m \cell\row
\intbl Divis\'e3o \cell / \cell x/yorXorx\'f7y  y \cell x / \cell y \cell\row
\intbl M\'f3dulo \cell % \cell rmods \cell r % \cell s \cell\row
\pard\par
\pard\sb100\sa240 76 C++ COMO PROGRAMAR \line 3. As opera\'e7\'f5es de adi\'e7\'e3o e de subtra\'e7\'e3o s\'e3o aplicadas por \'faltimo. Se uma express\'e3o cont\'e9m v\'e1rias Opera\'e7\'f5es de adi\'e7\'e3o e subtra\'e7\'e3o, os operadores s\'e3o aplicados da esquerda para a direita. A adi\'e7\'e3o e subtra\'e7\'e3o t\'eam, tamb\'e9m, o mesmo n\'edvel de preced\'eancia. \line As regras de preced\'eancia de operadores permitem a C++ aplicar os operadores na ordem correta. Quando dizemos que certos operadores s\'e3o aplicados da esquerda para a direita, estamos nos referindo \'e0 associatividade dos opera- dores. Por exemplo, na express\'e3o \line a+b+c \line os operadores de adi\'e7\'e3o (+) se associam da esquerda para a direita. Veremos que alguns operadores se associam da direita para a esquerda. A Fig. 1.11 resume estas regras de preced\'eancia de operadores. Esta tabela ser\'e1 expandida \'e0 medida que operadores adicionais de C++ sejam introduzidos. Um quadro de preced\'eancia completo se encontra nos ap\'eandices. \par
Fig. 1.11 Preced\'eancia dos operadores aritm\'e9ticos. \line Vamos agora considerar v\'e1rias express\'f5es levando em conta as regras de preced\'eancia de operadores. Cada exemplo lista uma express\'e3o alg\'e9brica e seu equivalente em C++. \line O exemplo a seguir \'e9 uma m\'e9dia aritm\'e9tica de cinco termos: \line a+b+c+d+e \line Algebra: m = \line C+-t-:m= (a+b+c+d+e) /5; \line Os par\'eanteses s\'e3o necess\'e1rios porque a divis\'e3o tem preced\'eancia mais alta que a adi\'e7\'e3o. O valor inteiro (a + b \'f7 \line c + d + e) \'e9 dividido por 5. Se os par\'eanteses s\'e3o erroneamente omitidos, obtemos a + b + c + d + e / \line 5, que \'e9 calculado incorretamente como \line a+b+c+d+ \line 5 \line O seguinte \'e9 um exemplo da equa\'e7\'e3o de uma linha reta: \line\'c1lgebra: y = mx + b \line C++:y=m * x + b; \line Nenhum par\'eantese \'e9 necess\'e1rio. A multiplica\'e7\'e3o \'e9 aplicada primeiro porque a multiplica\'e7\'e3o tem uma preced\'eancia mais alta que a adi\'e7\'e3o. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1253\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2702\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx8946\pard\intbl Operador(es) \cell Opera\'e7\'e3o(\'f5es) \cell Ordem de avalia\'e7\'e3o (preced\'eancia) \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx684\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1253\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2702\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx8946\pard\intbl ) \cell\cell Par\'eanteses \cell Calculados primeiro. Se os par\'eanteses est\'e3o aninhados, primeiro \'e9 calculado o par mais interno na express\'e3o. Se houver v\'e1rios pares de par\'eanteses \ldblquote no mesmo n\'edvel\rdblquote  (isto \'e9, n\'e3o aninhados), eles s\'e3o calculados da esquerda para a direita. \cell\row
\intbl , / ou \cell % \cell Multiplica\'e7\'e3o  Divis\'e3o  M\'f3dulo \cell Calculados em segundo lugar. Se houver v\'e1rios, eles s\'e3o calculados da esquerda para a direita. \cell\row
\intbl + ou - \cell\cell Adi\'e7\'e3o  Subtra\'e7\'e3o \cell Calculados por \'faltimo. Se houver v\'e1rios, eles s\'e3o calculados da esquerda para a direita. \cell\row
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 77 \line O exemplo seguinte cont\'e9m as opera\'e7\'f5es m\'f3dulo (%), multiplica\'e7\'e3o, divis\'e3o, adi\'e7\'e3o e subtra\'e7\'e3o: \line\'c1lgebra: z =pr%q + w/x-y \line C-t-+: z = p * r % q + w / x - \line Os n\'fameros circulados, abaixo do comando, indicam a ordem em que C++ aplica os operadores. Os de multiplica\'e7\'e3o, m\'f3dulo e divis\'e3o s\'e3o aplicados primeiro, na ordem da esquerda para a direita, (isto \'e9, eles se associam da esquerda para a direita), uma vez que eles t\'eam preced\'eancia mais alta que a adi\'e7\'e3o e a subtra\'e7\'e3o. Os de adi\'e7\'e3o e subtra\'e7\'e3o s\'e3o aplicados em seguida. Estes tamb\'e9m s\'e3o aplicados da esquerda para a direita. \line Nem todas as express\'f5es com v\'e1rios pares de par\'eanteses cont\'eam par\'eanteses aninhados. Por exemplo, a express\'e3o \line a * (b + c) + c * (d + e) \line n\'e3o cont\'e9m par\'eanteses aninhados. Neste caso, dizemos que os par\'eanteses est\'e3o \ldblquote no mesmo n\'edvel\rdblquote . \line Para desenvolver uma melhor compreens\'e3o das regras de preced\'eancia de operadores, considere como um \line polin\'f4mio de segundo grau \'e9 calculado: \line y = a * x * x + b * x + e; \line Os n\'fameros circulados, abaixo do comando, indicam a ordem em que C++ aplica os operadores. N\'e3o h\'e1 um operador aritm\'e9tico para exponencia\'e7\'e3o em C++; por isso, representamos x2 como x * x. Logo discutiremos a fun\'e7\'e3o pow (\lquote power\rdblquote ) da biblioteca padr\'e3o; essa fun\'e7\'e3o executa a exponencia\'e7\'e3o. Por causa de alguns problemas sutis relacionados aos tipos de dados exigidos por pow, adiamos uma explica\'e7\'e3o detalhada de pow at\'e9 o Cap\'edtulo 3. \line Suponha que as vari\'e1veis a, b, e e x est\'e3o inicializadas como segue: a = 2, b = 3, e = 7 ex = 5. \line A Figura 1.12 ilustra a ordem em que os operadores s\'e3o aplicados ao polin\'f4mio de segundo grau precedente. \line Podemos acrescentar par\'eanteses desnecess\'e1rios ao comando de atribui\'e7\'e3o precedente, para clareza, como: \line y = (a * x * x) + (b * x) + c; \line Boa pr\'e1tica de programa\'e7\'e3o 1.15 \line Como na \'e1lgebra, \'e9 aceit\'e1vel se colocar par\'eanteses desnecess\'e1rios em uma express\'e3o para torn\'e1-la mais clara. Estes par\'eanteses s\'e3o chamados de redundantes. Par\'eanteses redundantes s\'e3o usados comumente para agrupar subexpress\'f5es de uma express\'e3o grande, para tornar a express\'e3o mais clara. Quebrar um comando longo em uma seq\'fc\'eancia de comandos mais curtos e mais simples tamb\'e9m aumenta a clareza. \line 1.23 Tomada de decis\'f5es: os operadores relacionais e de igualdade \line Esta se\'e7\'e3o introduz uma vers\'e3o simples da estrutura if, a qual permite a um programa tomar decis\'f5es com base na veracidade ou falsidade de alguma condi\'e7\'e3o. Se a condi\'e7\'e3o \'e9 satisfeita, ou seja, se ela for true (verdadeira), o comando no corpo da estrutura if \'e9 executado. Se a condi\'e7\'e3o n\'e3o for satisfeita, ou seja, se for false (falsa), o comando do corpo n\'e3o \'e9 executado. Logo adiante, veremos um exemplo. \line As condi\'e7\'f5es em estruturas if podem ser definidas usando-se os operadores de igualdade e os operadores relacionais, resumidos na Fig. 1 .13. Os operadores relacionais t\'eam todos o mesmo n\'edvel de preced\'eancia e s\'e3o associados da esquerda para a direita. Os dois operadores de igualdade t\'eam o mesmo n\'edvel de preced\'eancia, mais baixo que o n\'edvel de preced\'eancia dos relacionais. Os operadores de igualdade tamb\'e9m s\'e3o associados da esquerda para a direita. \par
78 C++ COMO PROGRAMAR \par
Passo]. y= 2 * 5 * 5 + 3 * 5 + 7 \par
2 * 5 \line Passo2.y=10*5+3*5+ 10 * 5 \line Passo3. y=50\'f73 * 5 \line 3* \line Passo 4. y = 50 + 15 + 7; 50 + 15 \'e9 \line Passo5. y =65 +7; \line 65 + 7 \'e9 E1 \line Passo6. y = 72; \par
7; \par
(multiplica\'e7\'e3o mais \'e0 esquerda) \line (multiplica\'e7\'e3o mais \'e0 esquerda) \line (multiplica\'e7\'e3o antes da adi\'e7\'e3o) \par
(adi\'e7\'e3o mais \'e0 esquerda) \par
(\'faltima adi\'e7\'e3o) \par
(\'faltima opera\'e7\'e3o - colocar 72 em y) \par
Fig. 1.12 Ordem em que um polin\'f4mio de segundo grau \'e9 calculado. \line Erro comum de programa\'e7\'e3o 1.5 \line Ocorrer\'e1 um erro de sintaxe se qualquer um dos operadores ==, =, >= e <= aparece com espa\'e7os entre seus dois s\'edmbolos. \line Erro comum de programa\'e7\'e3o 1.6 \par
Inverter a ordem do par de s\'edmbolos em qualquer dos operadores ! =, >= e <= (escrevendo-os como =!, e <, respectivamente) normalmente \'e9 um erro de sintaxe. Em alguns casos, escrever ! = como ! n\'e3o \'e9 um erro de sintaxe, mas quase certamente ser\'e1 um erro de l\'f3gica. \par
Fig. 1.13 Operadores relacionais e de igualdade. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2937\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5277\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6891\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx8710\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx8946\pard\intbl Operadores de igualdade alg\'e9bricos padr\'e3o e operadores \cell Operador C++ de igualdade ou relacional \cell Exemplo de condi\'e7\'e3o em  C++ \cell Significado da condi\'e7\'e3o em  C++ \cell\cell\row
\intbl relacionais \cell\cell\cell\cell\cell\row
\intbl Operadores de igualdade \cell\cell\cell\cell\cell\row
\intbl > \cell > \cell x > y \cell x \'e9 maior que y \cell\cell\row
\intbl < \cell < \cell x < y \cell x \'e9menorque y \cell\cell\row
\intbl\'12 \cell >= \cell x >= y \cell x \'e9 maior que ou igual a y \cell\cell\row
\intbl\'11 \cell <= \cell x <= y \cell x \'e9 menor que ou igual a y \cell\cell\row
\intbl Operadores relaciona is \cell\cell\cell\cell\cell\row
\intbl = \cell == \cell x == y \cell x \'e9 igual a y \cell\cell\row
\intbl\'10 \cell != \cell x != y \cell x n\'e3o\'e9igualay \cell\cell\row
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 79 \line Erro comum de programa\'e7\'e3o 1.7 \line Confundir o operador de igualdade == com o operador de atribui\'e7\'e3o . O operador de igualdade deveria ser lido como \ldblquote\'e9 iguala\rdblquote  e o operador de atribui\'e7\'e3o como \ldblquote recebe\rdblquote  ou \ldblquote recebe o valor de\rdblquote  ou, ainda, \ldblquote a ele \'e9 atribu\'eddo o valor de \ldblquote . Algumas pessoas preferem ler o operador de igualdade como \ldblquote duplo igual Como logo veremos, confundir estes dois operadores pode n\'e3o necessariamente produzir um erro de sintaxe facilmente identific\'e1vel, mas pode causar erros de l\'f3gica extremamente sutis. \line O exemplo seguinte usa seis comandos if para comparar dois n\'fameros fornecidos pelo usu\'e1rio. Se a condi\'e7\'e3o de um destes ifs \'e9 satisfeita, ent\'e3o o comando de sa\'edda (resposta) associado aquele if \'e9 executado, O programa e os di\'e1logos de entrada/sa\'edda de tr\'eas exemplos de execu\'e7\'e3o s\'e3o mostrados na Fig. 1.14. \line 1 II Fig. 1.14: figOll4.cpp \line 2 II Utilizando comandos if, operadores \line 3 II relacionais e operadores de igualdade \line 4 # include <iostream> \line 5 \line 6 using std: :cout; II o programa usa cout \line 7 using std: :cin; II o programa usa cm \line 8 using std: :endl; II o programa usa endl \line 9 \line 10 int main( \line 11 \line 12 int nurnl, num2; \line 13 \line 14 cout \'ab \ldblquote Digite dois inteiros e lhe direi\\n\rdblquote  \line 15 \'ab \ldblquote quais os relacionamentos que eles satisfazem: \ldblquote ; \line 16 cm \'bb numi \'bb num2; 1/ l\'ea dois inteiros \line 17 \line 18 if (numl==num2) \line 19 cout \'ab numi \'ab \ldblquote  \'e9 igual a \ldblquote  \'ab num2 \'ab endl; \line 20 \line 21 if ( numi != num2 \line 22 cout \'ab numi \'ab \ldblquote  n\'e3o \'e9 igual a \ldblquote  \'ab num2 \'ab endl; \line 23 \line 24 if (numl<num2 \line 25 cout \'ab numi \'ab \ldblquote  \'e9 menor que \ldblquote  \'ab num2 \'ab endl; \line 26 \line 27 if ( numl >num2 \line 28 cout \'ab numi \'ab \ldblquote  \'e9 maior que \ldblquote  \'ab num2 \'ab endi; \line 29 \line 30 if (numl<=num2) \line 31 cout \'ab numi \'ab \ldblquote  \'e9 menor que ou igual a \line 32 \'ab num2 \'ab endl; \line 33 \line 34 if (numl>=num2) \line 35 cout \'ab numi \'ab \ldblquote  \'e9 maior que ou igual a \line 36 \'ab num2 \'ab endi; \line 37 \line 38 return 0; II indica que o programa terminou com sucesso \line 39 \par
Fig. 1.14 Utilizando operadores relacionais e de igualdade (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4813\pard\intbl Digite dois inteiros e lhe direi \cell\row
\intbl quais os relacionamentos que eles satisfazem: 3 7 \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3812\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4312\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4813\pard\intbl 3 n\'e3o \'e9 igual a 7 \cell\cell\cell\row
\intbl 3 \'e9 menor que 7 \cell\cell\cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4312\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4813\pard\intbl\'e9 menor que ou igual a 7 \cell\cell\row
\pard\par
\pard\sb100\sa240 80 C++ COMO PROGRAMAR \line Digite dois inteiros e lhe direi \line quais os relacionamentos que eles satisfazem: 22 12 \line 22 n\'e3o \'e9 igual a 12 \line 22 \'e9 maior que 12 \line 22 \'e9 maior que ou igual a 12 \line Digite dois inteiros e lhe direi \line quais os relacionamentos que eles satisfazem: 7 7 \line\'e9 igual a 7 \line\'e9 menor que ou igual a 7 \line\'e9 maior que ou igual a 7 \line Fig. 1.14 Utilizando operadores de relacionais e de igualdade (parte 2 de 2). \line As linhas 6 a 8 \line using std: :cout; // o programa usa cout \line using std::cin; // o programa usa cm \line using std::endl; // o programa usa endi \line s\'e3o comandos using que nos ajudam a eliminar a necessidade de repelir o prefixo std: : . A partir do ponto em que inclu\'edmos estes comandos using, podemos escrever cout em vez de std: : cout, cm em vez de std: : cm e endl em vez de std: : endi, respectivamente, no resto do programa. [Nota: deste ponto em diante, no livro, cada exemplo cont\'e9m um ou mais comandos usingi. \line Alinha 12 \line int numi, num2; \line declara as vari\'e1veis usadas no programa. Lembre-se de que vari\'e1veis podem ser declaradas em uma declara\'e7\'e3o ou em v\'e1rias declara\'e7\'f5es. Se mais de um nome \'e9 declarado em uma declara\'e7\'e3o (como neste exemplo), os nomes s\'e3o separados por v\'edrgulas (,). Isto se chama uma lista separada por v\'edrgulas. \line O programa usa opera\'e7\'f5es de extra\'e7\'e3o do stream colocadas em cascata (linha 16) para ler dois inteiros. Lembre-se de que podemos escrever cm (em vez de std: : cm) por causa da linha 7. Primeiro, um valor \'e9 lido para a vari\'e1vel numl e depois um valor \'e9 lido para a vari\'e1vel num2. \line A estrutura if nas linhas 18 e 19 \line if ( numi num2 \line cout \'ab numl \'ab \lquote  \'e9 igual a \'ab num2 \'ab endl; \line compara os valores das vari\'e1veis numl e num2 para testar a igualdade. Se os valores s\'e3o iguais, o comando na linha 19 exibe uma linha de texto indicando que os n\'fameros s\'e3o iguais. Se as condi\'e7\'f5es s\'e3o verdadeiras em uma ou mais das estruturas if que iniciam nas linhas 21, 24, 27, 30 e 34, o comando cout correspondente exibe uma linha de texto. \line Note que cada estrutura if na Fig. 1.14 tem um \'fanico comando em seu corpo e que cada corpo est\'e1 indentado. Indentar o corpo de uma estrutura if melhora a legibilidade do programa. No Cap\'edtulo 2, mostraremos como especificar estruturas if cujo corpo \'e9 composto de m\'faltiplos comandos (colocando os comandos que integram o corpo entre um par de chaves, \{ \}). \line Boa pr\'e1tica de programa\'e7\'e3o 1.16 \line Indente o comando que comp\'f5e o corpo de uma estrutura if para fazer com que o corpo da estrutura se \line destaque, melhorando desta forma a legibilidade. \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 81 \line Boa pr\'e1tica de programa\'e7\'e3o 1.17 \line Em um programa n\'e3o deve haver mais que um comando por linha. \line Erro comum de programa\'e7\'e3o 1.8 \line Colocar um ponto-e-v\'edrgula imediatamente ap\'f3s o par\'eantese da direita, em uma estrutura if, \'e9 freq\'fcentemente um erro de l\'f3gica (embora n\'e3o seja um erro de sintaxe). O ponto-e-v\'edrgula pode fazer com o corpo da estrutura if seja considerado vazio, de maneira que a estrutura if n\'e3o execute nenhuma a\'e7\'e3o, independentemente do fato da condi\'e7\'e3o ser verdadeira ou n\'e3o. Pior ainda, o comando do corpo original da estrutura if se tornaria agora um comando em seguida \'e0 estrutura if e seria sempre executado, freq\'fcentemente levando o programa a produzir resultados incorretos. \line Note o uso dos espa\'e7os na Fig. 1.14. Nos comandos em C++, caracteres impressos como espa\'e7os em branco, tais como tabula\'e7\'e3o, nova linha e espa\'e7os, s\'e3o ignorados pelo compilador. Assim, os comandos podem ser separados em v\'e1rias linhas e espa\'e7ados de acordo com a prefer\'eancia do programador. E incorreto separar identificadores, strings (tais como \ldblquote heilo\rdblquote ) e constantes (tais como o n\'famero 1000) ao longo de v\'e1rias linhas. \line Erro comum de programa\'e7\'e3o 1.9 \line\'c9 um erro de sintaxe colocar espa\'e7os no meio de um identificador (por exemplo, main escrito como ma \line in). \line Boa pr\'e1tica de programa\'e7\'e3o 1.18 \line Um comando longo pode ser separado por v\'e1rias linhas. Se um comando \'fanico deve ser dividido em v\'e1rias linhas, escolha pontos de quebra que fa\'e7am sentido, tal como depois de uma vfrgula em uma lista separada por vfrgulas, ou depois de um operador em uma express\'e3o longa. Se um comando \'e9 dividido em duas ou mais linhas, recue todas as linhas subseq\'fcentes. \line A Fig. 1.1.5 mostra a preced\'eancia dos operadores introduzidos neste cap\'edtulo. Os operadores s\'e3o mostrados de cima para baixo, obedecendo \'e0 ordem decrescente de preced\'eancia. Note que todos estes operadores, com exce\'e7\'e3o do operador de atribui\'e7\'e3o, =, se associam da esquerda para a direita. A adi\'e7\'e3o \'e9 associativa \'e0 esquerda, de modo que uma express\'e3o como x + y + z \'e9 calculada como se tivesse sido escrita como (x + y) + z. O operador de atribui\'e7\'e3o = se associa da direita para a esquerda, de modo que uma express\'e3o como x = y = o \'e9 resolvida como se tivesse sido escrita como x = (y = 0), o que, como logo vereremos, primeiro atribui O a y e ent\'e3o atribui o resultado dessa atribui\'e7\'e3o - O - a x. \par
Fig. 1.15 Preced\'eancia e associatividade dos operadores discutidos at\'e9 agora. \line Boa pr\'e1tica de programa\'e7\'e3o 1.19 \line Consulte o quadro de preced\'eancia dos operadores quando escrever express\'f5es contendo muitos operadores. Confirme que os operadores na express\'e3o s\'e3o executados na ordem que voc\'ea espera. Se voc\'ea n\'e3o tem certeza da ordem de avalia\'e7\'e3o de uma express\'e3o complexa, separe a express\'e3o em comandos menores ou \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1474\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1826\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3847\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6449\pard\intbl j Operador(es) \cell\cell Associatividade \cell Tipo \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx417\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx901\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1474\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1826\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3847\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6449\pard\intbl ) \cell\cell\cell\cell esquerda para a direita \cell par\'eanteses \cell\row
\intbl * \cell / \cell % \cell\cell esquerda para a direita \cell multiplicativos \cell\row
\intbl + \cell - \cell\cell\cell esquerda para a direita \cell aditivos \cell\row
\intbl\'ab \cell\'bb \cell\cell\cell esquerda para a direita \cell inser\'e7\'e3o em / extra\'e7\'e3o de stream \cell\row
\intbl < \cell < \cell > \cell >= \cell esquerda para a direita \cell relacional \cell\row
\intbl == \cell\lquote = \cell\cell\cell esquerda para a direita \cell igualdade \cell\row
\intbl = \cell\cell\cell\cell direita para a esquerda \cell atribui\'e7\'e3o \cell\row
\pard\par
\pard\sb100\sa240 82 c++ COMO PROGRAMAR \line use par\'eanteses para frr\'e7ar a ordem, exatamente como voc\'ea faria em uma express\'e3o alg\'e9brica. N\'e3o deixe \line de observar que alguns operado res, tal como atribui\'e7\'e3o (), s\'e3o associados da direita para a esquerda, jel \line em vez de da esquerda para a direita. de \line Introduzimos muitas caracter\'edsticas importantes de C++, incluindo exibir dados na tela, obter dados do tecla d como entrada, executar c\'e1lculos e tomar decis\'f5es. No Cap\'edtulo 2, constru\'edmos sobre estas t\'e9cnicas, na medida em di \line que introduzimos a programa\'e7\'e3o estruturada. Voc\'ea se tornar\'e1 mais familiar com t\'e9cnicas de indenta\'e7\'e3o. Estudare- cl \line mos como especificar e variar a ordem em que os comandos s\'e3o executados - esta ordem \'e9 chamada defluxo de h \line cont role. e \line ri \line 1.24 Pensando em objetos: introdu\'e7\'e3o \'e0 tecnologia de objetos e \'e0 1 \line Unified Modeling LanguageTM \line e \line Agora come\'e7amos nossa introdu\'e7\'e3o antecipada \'e0 orienta\'e7\'e3o a objetos. Veremos que orienta\'e7\'e3o a objetos \'e9 um modo n \line natural de pensar sobre o mundo e de escrever programas de computador. \line Em cada um dos cinco primeiros cap\'edtulos concentramo-nos na metodologia \ldblquote convencional\rdblquote  da programa\'e7\'e3o f \line estruturada, porque os objetos que vamos construir ser\'e3o compostos, em parte, por peda\'e7os de programas estruturados, si \line Ent\'e3o, terminamos cada cap\'edtulo com uma se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote , na qual apresentamos uma introdu\'e7\'e3o d cuidadosamente cadenciada da orienta\'e7\'e3o a objetos. Nosso objetivo, nestas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote , \'e9 ajud\'e1- ii lo a desenvolver uma maneira de pensar orientada a objetos, de modo que voc\'ea possa imediatamente p\'f4r em uso os \line conhecimentos de programa\'e7\'e3o orientada a objetos que voc\'ea come\'e7a a receber no Cap\'edtulo 6. Tamb\'e9m vamos p apresent\'e1-lo \'e0 Unified Modeling Language (UML). A UML \'e9 uma linguagem gr\'e1fica que permite \'e0s pessoas que \line constroem sistemas (isto \'e9, projetistas de software, engenheiros de sistemas, programadores, etc.) representar seus projetos orientados a objetos usando uma nota\'e7\'e3o comum. \line Nesta se\'e7\'e3o obrigat\'f3ria (1.24), apresentamos conceitos b\'e1sicos (isto \'e9, \ldblquote pensar em objetos) e terminologia (isto \'e9, \ldblquote falar em objetos\rdblquote ). Nas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote  opcionais nos finais dos Cap\'edtulos 2 a 5, consideramos aspectos mais substanciais, na medida em que atacamos um problema desafiador com as t\'e9cnicas de projeto orientado a objetos (OOD, object oriented design). \line Analisaremos uma defini\'e7\'e3o de problema t\'edpica, que requer a constru\'e7\'e3o de um sistema, determinaremos os objetos necess\'e1rios para implementar o sistema, determinaremos os atributos que os objetos precisar\'e3o ter, determinaremos os comportamentos que estes objetos dever\'e3o exibir e especificaremos como os objetos necessitar\'e3o interagir uns com os outros para atender aos requisitos do sistema. Faremos tudo isso antes mesmo de termos aprendido como escrever programas orientados a objetos em C++. Nas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote  opcionais nos finais dos Cap\'edtulos 6, 7 e 9, discutimos a implementa\'e7\'e3o em C++ do sistema orientado a objetos que vamos projetar nos cap\'edtulos anteriores. \line Esteestudo de caso vai ajudar a prepar\'e1-lo para os tipos de projetos substanciais encontrados na ind\'fastria. Se voc\'ea \'e9 um estudante e seu professor n\'e3o planeja incluir este estudo de caso em seu curso, considere a possibilidade de cobrir este estudo de caso por conta pr\'f3pria. Acreditamos que lhe valer\'e1 a pena empregar tempo para percorrer este projeto grande e desafiador. Voc\'ea experimentar\'e1 uma introdu\'e7\'e3o s\'f3lida ao projeto orientado a objetos com a UML e ir\'e1 agu\'e7ar sua habilidade de leitura de c\'f3digo passeando por um programa em C++ com mais de 1000 linhas, bem documentado, que resolve o problema apresentado no estudo de caso. \line Come\'e7amos nossa introdu\'e7\'e3o \'e0 orienta\'e7\'e3o a objetos com um pouco da terminologia-chave da orienta\'e7\'e3o a objetos. Olhe em sua volta no mundo real. Para onde quer que voc\'ea olhe, voc\'ea os v\'ea - objetos! Pessoas, animais, plantas, carros, avi\'f5es, constru\'e7\'f5es, computadores, etc. Seres humanos pensam em termos de objetos. Temos a maravilhosa habilidade da abstra\'e7\'e3o que nos permite visualizar imagens em uma tela como objetos, tais como pessoas, avi\'f5es, \'e1rvores e montanhas, em vez de ver pontos coloridos isolados. Podemos, se desejarmos, pensar em termos de praias em vez de gr\'e3os de areia, florestas em vez de \'e1rvores e casas em vez de tijolos. \line Poder\'edamos estar propensos a dividir os objetos em duas categorias - objetos animados e objetos inanimados. Objetos animados, em certo sentido, s\'e3o \ldblquote vivos\rdblquote . Eles se movem ao nosso redor e fazem coisas. Objetos inanimados, como toalhas, parecem n\'e3o fazer mesmo muita coisa. Eles somente parecem \ldblquote ficar ao redor\rdblquote . Todos estes \line objetos, por\'e9m, t\'eam algumas coisas em comum. Todos eles t\'eam atributos, como tamanho, forma, cor, peso, etc. E todos eles exibem comportamentos (por exemplo, uma bola rola, salta, incha e esvazia; um beb\'ea chora, dorme, engatinha, passeia e pisca; um carro acelera, freia e muda de dire\'e7\'e3o; uma toalha absorve \'e1gua; etc.). \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 3 \line Os seres humanos aprendem sobre objetos estudando seus atributos e observando seus comportamentos. Objetos diferentes podem ter atributos semelhantes e podem exibir comportamentos semelhantes. Compara\'e7\'f5es podem ser feitas, por exemplo, entre beb\'eas e adultos e entre seres humanos e chimpanz\'e9s. Carros, caminh\'f5es, pequenas camionetes vermelhas e patins t\'eam muito em comum. \line A programa\'e7\'e3o orientada a objetos (OOP object-orientedprogramming) modela objetos do mundo real com duplicatas em software. Ela se aproveita das rela\'e7\'f5es de classe, nas quais objetos de uma certa classe - tal como uma classe de ve\'edculos - t\'eam as mesmas caracter\'edsticas. Ela tira proveito de rela\'e7\'f5es de heran\'e7a e at\'e9 de rela\'e7\'f5es de heran\'e7a m\'faltipla, nas quais classes de objetos rec\'e9m-criadas s\'e3o derivados absorvendo caracter\'edsticas de classes existentes e adicionando caracter\'edsticas pr\'f3prias suas. Um objeto da classe \ldblquote convers\'edvel\rdblquote  certamente tem as caracter\'edsticas da classe mais gen\'e9rica \ldblquote autom\'f3vel\rdblquote , mas a capota de um convers\'edvel sobe e desce. \line A programa\'e7\'e3o orientada a objetos nos d\'e1 uma maneira mais natural e intuitiva para visualizar o processo de programa\'e7\'e3o, a saber, modelando objetos do mundo real, seus atributos e seus comportamentos. A OOP tamb\'e9m modela a comunica\'e7\'e3o entre objetos. Da mesma maneira que as pessoas enviam mensagens umas \'e0s outras (por exemplo, um sargento que ordena a um soldado que se mantenha em posi\'e7\'e3o de sentido), objetos tamb\'e9m se comunicam atrav\'e9s de mensagens. \line A OOP encapsula dados (atributos) e fun\'e7\'f5es (comportamento) em pacotes chamados de objetos; os dados e fun\'e7\'f5es de um objeto est\'e3o intimamente amarrados. Os objetos t\'eam a propriedade de oculta\'e7\'e3o de informa\'e7\'f5es. Isto significa que, embora os objetos possam saber como se comunicar uns com os outros atrav\'e9s de interfaces bem- definidas, normalmente n\'e3o \'e9 permitido aos objetos saber como outros objetos s\'e3o implementados - os detalhes de implementa\'e7\'e3o ficam escondidos dentro dos pr\'f3prios objetos. Certamente \'e9 poss\'edvel dirigir um carro eficazmente sem ser especialista nos detalhes de como motores, transmiss\'f5es e escapamentos trabalham internamente. Veremos por que a oculta\'e7\'e3o de informa\'e7\'f5es \'e9 t\'e3o crucial para a boa engenharia de software. \line Em C e outras linguagens de programa\'e7\'e3o procedurais, a programa\'e7\'e3o tende a ser orientada a a\'e7\'f5es, enquanto que, em C++, a programa\'e7\'e3o tende a ser orientada a objetos. Em C, a unidade de programa\'e7\'e3o \'e9 afun\'e7\'e3o. Em C++, a unidade de programa\'e7\'e3o \'e9 a classe, a partir da qual os objetos s\'e3o eventualmente instanciados (um termo elegante para \ldblquote criados\rdblquote ). As classes de C++ cont\'eam fun\'e7\'f5es (que implementam os comportamentos da classe) e dados (que implementam os atributos da classe). \line Os programadores de C se concentram em escrever fun\'e7\'f5es. Os grupos de a\'e7\'f5es que executam alguma tarefa comum s\'e3o reunidos para formar fun\'e7\'f5es e as fun\'e7\'f5es s\'e3o agrupadas para formar programas. Certamente, os dados s\'e3o importantes em C, mas o ponto de vista \'e9 que existem dados principalmente para suportar as a\'e7\'f5es que as fun\'e7\'f5es executam. Os verbos em uma especifica\'e7\'e3o de sistema ajudam o programador de C a determinar o conjunto de fun\'e7\'f5es que trabalham juntas para implementar o sistema. \line Os programadores de C+\'f7 se concentram em criar seus pr\'f3prios tipos definidos pelo usu\'e1rio, chamados de classes e componentes. Cada classe cont\'e9m tanto dados como tamb\'e9m o conjunto de fun\'e7\'f5es que manipulam estes dados. Os componentes de dados de uma classe s\'e3o conhecidos como membros de dados. Os componentes fun\'e7\'f5es de uma classe s\'e3o conhecidos como fun\'e7\'f5es membro (tipicamente conhecidas como m\'e9todos, em outras linguagens de programa\'e7\'e3o orientadas a objetos, como Java). Da mesma maneira que uma inst\'e2ncia de um tipo primitivo da linguagem, tal como int, \'e9 chamada de vari\'e1vel, uma inst\'e2ncia de um tipo definido pelo usu\'e1rio (i.e., uma classe) \'e9 conhecida como objeto. O programador usa tipos primitivos como blocos de constru\'e7\'e3o para construir tipos definidos pelo usu\'e1rio. O foco de aten\'e7\'e3o em C++ est\'e1 nas classes (com as quais criamos objetos) ao inv\'e9s de nas fun\'e7\'f5es. Os substantivos em uma especifica\'e7\'e3o de sistema ajudam o programador de C++ a determinar o conjunto de classes a partir das quais ser\'e3o criados objetos que ir\'e3o trabalhar juntos para implementar o sistema. \line Classes est\'e3o para objetos assim como plantas arquitet\'f4nicas est\'e3o para casas. Podemos construir muitas casas a partir de uma planta e tamb\'e9m podemos instanciar (criar) muitos objetos a partir de uma classe. Classes tamb\'e9m podem ter relacionamentos com outras classes. Por exemplo, em um projeto orientado a objetos de um banco, a classe CaixaDeBanco precisa se relacionar com a classe Cliente. Estes relacionamentos s\'e3o chamados de associa\'e7\'f5es. \line Veremos que quando software \'e9 empacotado como classes, estas classes podem ser reutilizadas em sistemas de software futuros. Grupos de classes relacionadas entre si s\'e3o freq\'fcentemente empacotadas como componentes reutiliz\'e1veis. Da mesma maneira que corretores de im\'f3veis dizem a seus clientes que os tr\'eas fatores mais importantes que afetam o pre\'e7o dos im\'f3veis s\'e3o \ldblquote localiza\'e7\'e3o, localiza\'e7\'e3o e localiza\'e7\'e3o\rdblquote , acreditamos que os tr\'eas fatores mais importantes que afetam o futuro do desenvolvimento de software s\'e3o \ldblquote reutilizar, reutilizar e reutilizar.\rdblquote  \line Realmente, com a tecnologia de objetos, construiremos a maior parte do software do futuro combinando \ldblquote pe\'e7as padronizadas e intercambi\'e1veis\rdblquote  chamadas de classes. Este livro lhe ensinar\'e1 a \ldblquote elaborar classes valiosas\rdblquote  \par
84 C++ COMO PROGRAMAR \line para serem reutilizadas, reutilizadas e reutilizadas. Cada nova classe que voc\'ea criar ter\'e1 o potencial para se tornar um valioso patrim\'f4nio de software que voc\'ea e outros programadores podem usar para acelerar e aumentar a qualidade de futuros trabalhos de desenvolvimento de software. Esta \'e9 uma possibilidade fascinante. \line Introdu\'e7\'e3o \'e0 an\'e1lise e projeto orientados a objetos (OOAD, object-oriented analysis and design) \line A esta altura, voc\'ea provavelmente j\'e1 escreveu alguns poucos programas pequenos em C++. Como voc\'ea criou o c\'f3digo para seus programas? Se voc\'ea \'e9 como muitos programadores principiantes, pode ter ligado seu computador e simplesmente come\'e7ado a digitar. Esta abordagem pode funcionar para projetos pequenos, mas o que voc\'ea faria se fosse contratado para criar um sistema de software para controlar as m\'e1quinas de caixa autom\'e1ticas de um banco importante ? Um projeto como este \'e9 muito grande e complexo para que se possa simplesmente sentar e sair digitando. \line Para criar as melhores solu\'e7\'f5es, voc\'ea deveria seguir um processo detalhado para obter uma an\'e1lise dos requisitos de seu projeto e desenvolver um projeto para satisfazer tais requisitos. Voc\'ea passaria por este processo e teria seus resultados revisados e aprovados por seus superiores antes de escrever qualquer c\'f3digo para seu projeto. Se este processo envolve analisar e projetar seu sistema de um ponto de vista orientado a objetos, n\'f3s o denominamos processo pseudoc\'f3digo de an\'e1lise e projeto orientados a objetos (OOAD, object-oriented analysis and design). Programadores experientes sabem que, n\'e3o importa qu\'e3o simples um problema pare\'e7a ser, o tempo gasto em an\'e1lise e projeto pode poupar incont\'e1veis horas que poderiam ser perdidas ao abandonar uma abordagem de desenvolvimento de sistema mal-planejada, a meio caminho de sua implementa\'e7\'e3o. \line OOAD \'e9 o termo gen\'e9rico para as id\'e9ias por tr\'e1s do processo que empregamos para analisar um problema e desenvolver uma abordagem para resolv\'ea-lo. Problemas pequenos como os destes primeiros poucos cap\'edtulos n\'e3o requerem um processo exaustivo. Pode ser suficiente escrever pseudoc\'f3digo antes de come\'e7armos a escrever c\'f3digo. (Pseudoc\'f3digo \'e9 um meio informal de representar o c\'f3digo de um programa. N\'e3o \'e9 uma linguagem de programa\'e7\'e3o de verdade, mas podemos us\'e1-lo como uma esp\'e9cie de \ldblquote esbo\'e7o\rdblquote  para nos guiar \'e0 medida que escrevemos o c\'f3digo. Introduzimos pseudoc\'f3digo no Cap\'edtulo 2). \line Pseudoc\'f3digo pode ser suficiente para problemas pequenos, mas na medida em que os problemas e os grupos de pessoas resolvendo estes problemas aumentam em tamanho, os m\'e9todos do OOAD s\'e3o mais usados. Idealmente, um grupo deveria concordar quanto a um processo estritamente definido para resolver o problema e quanto a uma \line maneira uniforme de comunicar os resultados deste processo uns para os outros. Existem muitos processos diferentes de OOAD; entretanto, uma linguagem gr\'e1fica para informar os resultados de qualquer processo de OOAD se tornou largamente usada. Esta linguagem \'e9 conhecida como UnifiedModeling Language (UML). A UML foi desenvolvida em meados da d\'e9cada de 90, sob a dire\'e7\'e3o inicial de um trio de metodologistas de software: Grady Booch, James Rumbaugh e Ivar Jacobson. \line Hist\'f3ria da UML \line Na d\'e9cada de 80, um n\'famero crescente de organiza\'e7\'f5es come\'e7ou a usar OOP para programar suas aplica\'e7\'f5es e surgiu a necessidade de um processo adequado para abordar a OOAD. Muitos metodologistas - incluindo Booch, Rumbaugh e Jacobson - produziram e promoveram individualmente processos separados para satisfazer esta necessidade. Cada um destes processos tinha sua pr\'f3pria nota\'e7\'e3o, ou \ldblquote linguagem\rdblquote  (sob a forma de diagramas gr\'e1ficos), para comunicar os resultados da an\'e1lise e projeto. \line No in\'edcio da d\'e9cada de 90, empresas diferentes, e at\'e9 mesmo divis\'f5es diferentes de uma mesma empresa, usavam processos e nota\'e7\'f5es distintos. Al\'e9m disso, estas empresas queriam usar ferramentas de software que supor- \line tassem seus processos particulares. Com tantos processos, os vendedores de software achavam dif\'edcil fornecer tais ferramentas. Ficou claro que eram necess\'e1rios processos e nota\'e7\'e3o padronizados. \line Em 1994, James Rumbaugh juntou-se a Grady Booch na Rational Software Corporation e os dois come\'e7aram a trabalhar para unificar seus j\'e1 populares processos. Em seguida, juntou-se a eles Ivar Jacobson. Em 1996, o grupo liberou vers\'f5es preliminares da UML para a comunidade de engenharia de software e pediu um feedback. Mais ou menos na mesma \'e9poca, uma organiza\'e7\'e3o conhecida como Object Mana gement GroupTM (oMJM) solicitou propostas para uma linguagem comum de modelagem. O OMG \'e9 uma organiza\'e7\'e3o sem fins lucrativos que promove o uso da tecnologia de orienta\'e7\'e3o a objetos publicando diretrizes e especifica\'e7\'f5es para tecnologias orientadas a objetos. Diversas corpora\'e7\'f5es - entre elas HP, IBM, Microsoft, Oracle e Rational Software -j\'e1 haviam reconhecido a necessidade de uma linguagem comum para modelagem. Estas empresas constitu\'edram a UML Partners em resposta OMG aceitou a proposta e, em 1997, assumiu a responsabilidade pela manuten\'e7\'e3o e revis\'e3o continuadas da UML. \line\'e0 solicita\'e7\'e3o de propostas do OMG. Este cons\'f3rcio desenvolveu e submeteu a vers\'e3o 1.1 da UML para o OMG. O Em 1999, o OMG liberou a vers\'e3o 1.3 da UML (a vers\'e3o atual por ocasi\'e3o da publica\'e7\'e3o deste livro nos EUA). \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS C\rdblquote  \line Oque\'e9a UML? \line A Unified Modeling Language \'e9 agora o esquema . \line lagem de sistemas orientados a objetos. Ela certamei. \line final da d\'e9cada de 80. Aqueles que projetam sistemas \line modelar seus sistemas. \line Uma das caracter\'edsticas mais atraentes da UML \'e9 s \line muitos processos do OOAD. Modeladores UML ficam livre \line mas todos os desenvolvedores podem agora expressar tais sis \line A UML \'e9 uma linguagem gr\'e1fica complexa e repleta de. \line apresentamos um subconjunto conciso, simplificado, destes recL \line leitor atrav\'e9s de uma primeira experi\'eancia com a UML, voltada \line orienta\'e7\'e3o a objetos. Para uma discuss\'e3o mais completa da UML, coi \line e o documento com as especifica\'e7\'f5es oficiais da UML 1.3 (www. o. \line foram publicados. UML Distilled: Second Edition, por Martin Fowler ( \line detalhada \'e0 vers\'e3o 1.3 da UML, com muitos exemplos. The Unified M& \line Booch, Rumbaugh e Jacobson, \'e9 o tutorial definitivo para a UML. \line A tecnologia de orienta\'e7\'e3o a objetos est\'e1 em toda a parte na ind\'fastria \line ficando assim. Nosso objetivo, nestas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote , \'e9 incenti \line tada a objetos t\'e3o cedo e t\'e3o seguido quanto poss\'edvel. Iniciando na se\'e7\'e3o \ldblquote Pensa. \line 2, voc\'ea ir\'e1 aplicar a tecnologia de objetos para implementar a solu\'e7\'e3o de um proL \line voc\'ea ache este projeto opcional uma introdu\'e7\'e3o agrad\'e1vel e desafiadora ao projeto \line e \'e0 programa\'e7\'e3o orientada a objetos. \line\'e7indo em \line C++ \line Resumo \bullet  tri\'e7\'f5es \line\bullet  Um computador \'e9 um dispositivo capaz de executar computa\'e7\'f5es e tomar decis\'f5es l\'f3gicas em vi \line bilh\'f5es, de vezes mais r\'e1pidas do que podem as pessoas. \line\bullet  Oa dados s\'e3o processados em computadores sob o controle de programas. \line\bullet  Os v\'e1rios dispositivos (tal como o teclado, tela, discos, mem\'f3ria e unidades de processamento) que comp\'fa computador s\'e3o chamados de hardware. \line\bullet  Os programas de computador que s\'e3o executados em um computador s\'e3o chamados de software. \line\bullet  A unidade de entrada \'e9 a \ldblquote se\'e7\'e3o receptora\rdblquote  do computador. A maioria das informa\'e7\'f5es \'e9 hoje em dia fomec. computadores atrav\'e9s de teclados como os das m\'e1quinas de escrever. \line\bullet  A unidade de sa\'edda \'e9 a \ldblquote se\'e7\'e3o de expedi\'e7\'e3o\rdblquote  do computador. Atualmente, a maioria das informa\'e7\'f5es de sa\'edda s\'e3o exibi telas ou impressas em papel pelos computadores. \line\bullet  A unidade de mem\'f3ria \'e9 o \ldblquote dep\'f3sito\rdblquote  do computador, e \'e9 freq\'fcentemente chamada de mem\'f3ria ou mem\'f3ria prim\'e1ria. \line\bullet  A unidade de aritm\'e9tica e l\'f3gica (UAL) executa c\'e1lculos e toma decis\'f5es. \line\bullet  Programas ou dados que n\'e3o est\'e3o sendo ativamente usados pelas outras unidades normalmente s\'e3o colocados em dispositivos de armazenamento secund\'e1rio (tais como discos), at\'e9 que sejam novamente necess\'e1rios. \line\bullet  No processamento em lotes com usu\'e1rio \'fanico, o computador executa um \'fanico programa de cada vez, enquanto processa os dados em grupos ou lotes. \line\bullet  Sistemas operacionais s\'e3o sistemas de software que tomam o uso dos computadores mais conveniente, possibilitando a obten\'e7\'e3o de um melhor desempenho dos mesmos. \line\bullet  Sistemas operacionais multiprogramados possibilitam o processamento \ldblquote simult\'e2neo\rdblquote  de muitos trabalhos no computador - o computador compartilha seu recursos entre v\'e1rios trabalhos. \line\bullet  O timesharing \'e9 um caso especial de multiprograma\'e7\'e3o em que os usu\'e1rios acessam o computador atrav\'e9s de terminais. Os programas dos usu\'e1rios parecem estar sendo executados simultaneamente. \line\bullet  Com a computa\'e7\'e3o distribu\'edda, a computa\'e7\'e3o de uma organiza\'e7\'e3o \'e9 distribu\'edda atrav\'e9s de redes para os diversos locais onde \par
la de dados. \par
o trabalho da organiza\'e7\'e3o \'e9 executado. \par
84 C++ COMO PROGRAMAR \line para serem reutilizadas, reutilizadas e reutilizadas. Cada nova classe que voc\'ea criar ter\'e1 o potencial para se tomar um valioso patrim\'f4nio de software que voc\'ea e outros programadores podem usar para acelerar e aumentar a qualidade de futuros trabalhos de desenvolvimento de software. Esta \'e9 uma possibilidade fascinante. \line Introdu\'e7\'e3o \'e0 an\'e1lise e projeto orientados a objetos (OOAD, object-oriented analysis and design) \line A esta altura, voc\'ea provavelmente j\'e1 escreveu alguns poucos programas pequenos em C+\'f7. Como voc\'ea criou o c\'f3digo para seus programas? Se voc\'ea \'e9 como muitos programadores principiantes, pode ter ligado seu computador e simplesmente come\'e7ado a digitar. Esta abordagem pode funcionar para projetos pequenos, mas o que voc\'ea faria se fosse contratado para criar um sistema de software para controlar as m\'e1quinas de caixa autom\'e1ticas de um banco importante ? Um projeto como este \'e9 muito grande e complexo para que se possa simplesmente sentar e sair digitando. \line Para criar as melhores solu\'e7\'f5es, voc\'ea deveria seguir um processo detalhado para obter uma an\'e1lise dos requisitos de seu projeto e desenvolver um projeto para satisfazer tais requisitos. Voc\'ea passaria por este processo e teria seus resultados revisados e aprovados por seus superiores antes de escrever qualquer c\'f3digo para seu projeto. Se este processo envolve analisar e projetar seu sistema de um ponto de vista orientado a objetos, n\'f3s o denominamos processo pseudoc\'f3digo de an\'e1lise e projeto orientados a objetos (OOAD, object-oriented analysis and design). Programadores experientes sabem que, n\'e3o importa qu\'e3o simples um problema pare\'e7a ser, o tempo gasto em an\'e1lise e projeto pode poupar incont\'e1veis horas que poderiam ser perdidas ao abandonar uma abordagem de desenvolvimento de sistema mal-planejada, a meio caminho de sua implementa\'e7\'e3o. \line OOAD \'e9 o termo gen\'e9rico para as id\'e9ias por tr\'e1s do processo que empregamos para analisar um problema e desenvolver uma abordagem para resolv\'ea-lo. Problemas pequenos como os destes primeiros poucos cap\'edtulos n\'e3o requerem um processo exaustivo. Pode ser suficiente escrever pseudoc\'f3digo antes de come\'e7armos a escrever c\'f3digo. (Pseudoc\'f3digo \'e9 um meio informal de representar o c\'f3digo de um programa. N\'e3o \'e9 uma linguagem de programa\'e7\'e3o de verdade, mas podemos us\'e1-lo como uma esp\'e9cie de \ldblquote esbo\'e7o\rdblquote  para nos guiar \'e0 medida que escrevemos o c\'f3digo. Introduzimos pseudoc\'f3digo no Cap\'edtulo 2). \line Pseudoc\'f3digo pode ser suficiente para problemas pequenos, mas na medida em que os problemas e os grupos de pessoas resolvendo estes problemas aumentam em tamanho, os m\'e9todos do OOAD s\'e3o mais usados. Idealmente, um grupo deveria concordar quanto a um processo estritamente definido para resolver o problema e quanto a uma maneira uniforme de comunicar os resultados deste processo uns para os outros. Existem muitos processos diferentes de OOAD; entretanto, uma linguagem gr\'e1fica para informar os resultados de qualquer processo de OOAD se tornou largamente usada. Esta linguagem \'e9 conhecida como UnifiedModeling Language (UML). A UML foi desen4volvida em meados da d\'e9cada de 90, sob a dire\'e7\'e3o inicial de um trio de metodologistas de software: Grady Booch, James Rumbaugh e Ivar Jacobson. \line Hist\'f3ria da UML \line Na d\'e9cada de 80, um n\'famero crescente de organiza\'e7\'f5es come\'e7ou a usar OOP para programar suas aplica\'e7\'f5es e surgiu a necessidade de um processo adequado para abordar a OOAD. Muitos metodologistas - incluindo Booch, Rumbaugh e Jacobson - produziram e promoveram individualmente processos separados para satisfazer esta necessidade. Cada um destes processos tinha sua pr\'f3pria nota\'e7\'e3o, ou \ldblquote linguagem\rdblquote  (sob a forma de diagramas gr\'e1ficos), \line para comunicar os resultados da an\'e1lise e projeto. \line No in\'edcio da d\'e9cada de 90, empresas diferentes, e at\'e9 mesmo divis\'f5es diferentes de uma mesma empresa, usavam processos e nota\'e7\'f5es distintos. Al\'e9m disso, estas empresas queriam usar ferramentas de software que suportassem seus processos particulares. Com tantos processos, os vendedores de software achavam dif\'edcil fornecer tais \line - ferramentas. Ficou claro que eram necess\'e1rios processos e nota\'e7\'e3o padronizados. \line Em 1994, James Rumbaugh juntou-se a Grady Booch na Rational Software Corporation e os dois come\'e7aram a trabalhar para unificar seus j\'e1 populares processos. Em seguida, juntou-se a eles Ivar Jacobson. Em 1996, o grupo liberou vers\'f5es preliminares da UML para a comunidade de engenharia de software e pediu um feedback. Mais ou menos na mesma \'e9poca, uma organiza\'e7\'e3o conhecida como Object Management GroupTM (0MGTM) solicitou propostas para uma linguagem comum de modelagem. O OMG \'e9 uma organiza\'e7\'e3o sem fins lucrativos que promove o uso da tecnologia de orienta\'e7\'e3o a objetos publicando diretrizes e especifica\'e7\'f5es para tecnologias orientadas a objetos. Diversas corpora\'e7\'f5es - entre elas HP, IBM, Microsoft, Oracle e Rational Software - j\'e1 haviam reconhecido a necessidade de uma linguagem comum para modelagem. Estas empresas constitu\'edram a UML Partners em resposta \'e0 solicita\'e7\'e3o de propostas do OMG. Este cons\'f3rcio desenvolveu e submeteu a vers\'e3o 1.1 da UML para o OMG. O OMG aceitou a proposta e, em 1997, assumiu a responsabilidade pela manuten\'e7\'e3o e revis\'e3o continuadas da UML. Em 1999,0 OMG liberou a vers\'e3o 1.3 da UML (a vers\'e3o atual por ocasi\'e3o da publica\'e7\'e3o deste livro nos EUA). \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 85 \line O que \'e9 a UML? \line A Unified Modeling Language \'e9 agora o esquema de representa\'e7\'e3o gr\'e1fica mais amplamente utilizado para modelagem de sistemas orientados a objetos. Ela certamente unificou os diversos esquemas de nota\'e7\'e3o que existiam no \line final da d\'e9cada de 80. Aqueles que projetam sistemas usam a linguagem (sob a forma de diagramas gr\'e1ficos) para \line modelar seus sistemas. \line Uma das caracter\'edsticas mais atraentes da UML \'e9 sua flexibilidade. A UML \'e9 extens\'edvel e independente dos \line muitos processos do OOAD. Modeladores UML ficam livres para desenvolver sistemas usando diversos processos, mas todos os desenvolvedores podem agora expressar tais sistemas com um conjunto padr\'e3o de nota\'e7\'f5es. \line A UML \'e9 uma linguagem gr\'e1fica complexa e repleta de recursos. Em nossas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote , apresentamos um subconjunto conciso, simplificado, destes recursos. Usamos ent\'e3o este subconjunto para guiar o leitor atrav\'e9s de uma primeira experi\'eancia com a UML, voltada para o programador/projetista principiante em orienta\'e7\'e3o a objetos. Para uma discuss\'e3o mais completa da UML, consulte o site do OMG na Web (www. omg. org) e o documento com as especifica\'e7\'f5es oficiais da UML 1.3 (www. omg. org/uml/). Muitos livros sobre UML foram publicados. UML Distilled: Second Edition, por Martin Fowler (com Kendall Scott), oferece uma introdu\'e7\'e3o detalhada \'e0 vers\'e3o 1.3 da UML, com muitos exemplos. The Unified Modeling Language User Guide, escrito por Booch, Rumbaugh e Jacobson, \'e9 o tutorial definitivo para a UML. \line A tecnologia de orienta\'e7\'e3o a objetos est\'e1 em toda a parte na ind\'fastria de software e a UML est\'e1 rapidamente ficando assim. Nosso objetivo, nestas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote , \'e9 incentiv\'e1-lo a pensar de uma maneira orientada a objetos t\'e3o cedo e t\'e3o seguido quanto poss\'edvel. Iniciando na se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote  no fim do Cap\'edtulo 2, voc\'ea ir\'e1 aplicar a tecnologia de objetos para implementar a solu\'e7\'e3o de um problema substancial. Esperamos que voc\'ea ache este projeto opcional uma introdu\'e7\'e3o agrad\'e1vel e desafiadora ao projeto orientado a objetos com a UML e \'e0 programa\'e7\'e3o orientada a objetos. \line Resumo \line\bullet  Um computador \'e9 um dispositivo capaz de executar computa\'e7\'f5es e tomar decis\'f5es l\'f3gicas em velocidades milh\'f5es, e at\'e9 bilh\'f5es, de vezes mais r\'e1pidas do que podem as pessoas. \line\bullet  Oa dados s\'e3o processados em computadores sob o controle de programas. \line\bullet  Os v\'e1rios dispositivos (tal como o teclado, tela, discos, mem\'f3ria e unidades de processamento) que comp\'f5em um sistema de computador s\'e3o chamados de hardware. \line\bullet  Os programas de computador que s\'e3o executados em um computador s\'e3o chamados de software. \line\bullet  A unidade de entrada \'e9 a \ldblquote se\'e7\'e3o receptora\rdblquote  do computador. A maioria das informa\'e7\'f5es \'e9 hoje em dia fornecida para os computadores atrav\'e9s de teclados como os das m\'e1quinas de escrever. \line\bullet  A unidade de sa\'edda \'e9 a \ldblquote se\'e7\'e3o de expedi\'e7\'e3o\rdblquote  do computador. Atualmente, a maioria das informa\'e7\'f5es de sa\'edda s\'e3o exibidas em telas ou impressas em papel pelos computadores. \line\bullet  A unidade de mem\'f3ria \'e9 o \ldblquote dep\'f3sito\rdblquote  do computador, e \'e9 freq\'fcentemente chamada de mem\'f3ria ou mem\'f3ria prim\'e1ria. \line\bullet  A unidade de aritm\'e9tica e l\'f3gica (UAL) executa c\'e1lculos e toma decis\'f5es. \line\bullet  Programas ou dados que n\'e3o est\'e3o sendo ativamente usados pelas outras unidades normalmente s\'e3o colocados em dispositivos de armazenamento secund\'e1rio (tais como discos), at\'e9 que sejam novamente necess\'e1rios. \line\bullet  No processamento em lotes com usu\'e1rio \'fanico, o computador executa um \'fanico programa de cada vez, enquanto processa os dados em grupos ou lotes. \line\bullet  Sistemas operacionais s\'e3o sistemas de software que tornam o uso dos computadores mais conveniente, possibilitando a obten\'e7\'e3o de um melhor desempenho dos mesmos. \line\bullet  Sistemas operacionais multiprogramados possibilitam o processamento \ldblquote simult\'e2neo\rdblquote  de muitos trabalhos no computador - o computador compartilha seu recursos entre v\'e1rios trabalhos. \line\bullet  O timesharing \'e9 um caso especial de multiprograma\'e7\'e3o em que os usu\'e1rios acessam o computador atrav\'e9s de terminais. Os programas dos usu\'e1rios parecem estar sendo executados simultaneamente. \line\bullet  Com a computa\'e7\'e3o distribu\'edda, a computa\'e7\'e3o de uma organiza\'e7\'e3o \'e9 distribu\'edda atrav\'e9s de redes para os diversos locais onde o trabalho da organiza\'e7\'e3o \'e9 executado. \par
\pard\par
\pard\sb100\sa240 86 C++ COMO PROGRAMAR \par
Servidores armazenam programas e dados que podem ser compartilhados por computadores clientes distribu\'eddos ao lc uma rede, da\'ed o termo computa\'e7\'e3o cliente/servidor. \line Qualquer computador pode entender apenas sua pr\'f3pria linguagem de m\'e1quina. Linguagens de m\'e1quina geralmente c tem em strings de n\'fameros (em \'faltima inst\'e2ncia transformados em Is e Os), que instruem os computadores para executa opera\'e7\'f5es mais elementares, uma de cada vez. As linguagens de m\'e1quina s\'e3o dependentes da m\'e1quina. \line Abrevia\'e7\'f5es semelhantes a palavras da l\'edngua inglesa formam a base das linguagens simb\'f3licas. Os montadores (assernb \line traduzem os programas em linguagem simb\'f3lica para a linguagem de m\'e1quina. \line Os compiladores traduzem os programas em linguagem de alto n\'edvel para a linguagem de m\'e1quina. As linguagens de \line n\'edvel cont\'eam palavras inglesas e nota\'e7\'f5es matem\'e1ticas convencionais. \line Os programas interpretadores executam diretamente programas em linguagem de alto n\'edvel, sem a necessidade de compi \line aqueles programas para a linguagem de m\'e1quina. \line Embora programas compilados executem mais rapidamente que programas interpretados, os interpretadores s\'e3o popular nos ambientes de desenvolvimento de programas nos quais os programas s\'e3o recompilados freq\'fcentemente, \'e0 medida qi novas especifica\'e7\'f5es s\'e3o acrescentadas e erros s\'e3o corrigidos. Uma vez que um programa acabou de ser desenvolvido, um vers\'e3o compilada pode ent\'e3o ser produzida para ser executada de forma mais eficiente. \line\'c9 poss\'edvel se escrever programas em C e C++ que s\'e3o port\'e1veis para a maioria dos computadores. \line FORTRAN (FORmula TRANsIator) \'e9 usada para aplicatisos matem\'e1ticos. COBOL (COmmom Business Oriented Language) \'e9 usada principalmente para aplica\'e7\'f5es comerciais que exigem a manipula\'e7\'e3o precisa e eficiente de grandes volumes de dados. \line A programa\'e7\'e3o estruturada \'e9 uma abordagem disciplinada \'e0 escrita de programas que s\'e3o mais claros que programas n\'e3o- estruturados, mais f\'e1ceis de testar e depurar, e mais f\'e1ceis de modificar. \line Pascal foi projetado para o ensino da programa\'e7\'e3o estruturada em ambientes acad\'eamicos. \line Ada foi desenvolvida sob o patroc\'ednio do Departamento de Defesa dos Estados Unidos (DOD), usando o Pascal como base. \line Multitasking permite que os programadores especifiquem atividades para serem executadas em paralelo. \line Todos os sistemas C++ consistem em tr\'eas partes: o ambiente, a linguagem e as bibliotecas padr\'e3o. As fun\'e7\'f5es de biblioteca n\'e3o s\'e3o parte da linguagem C++ propriamente dita: estas fun\'e7\'f5es executam opera\'e7\'f5es comuns, tais como c\'e1lculos matem\'e1ticos. \line Os programas em C++ tipicamente passam atrav\'e9s de seis fases at\'e9 serem executados: edi\'e7\'e3o, pr\'e9-processamento, compila\'e7\'e3o, \ldblquote liga\'e7\'e3o\rdblquote , carga e execu\'e7\'e3o. \line O programador digita um programa usando um editor e fazendo corre\'e7\'f5es se necess\'e1rio. Os nomes de arquivo em C++ em um sistema t\'edpico baseado em UNIX terminam com a extens\'e3o .c. \line Um compilador traduz um programa em C++ para c\'f3digo em linguagem de m\'e1quina (ou c\'f3digo objeto). \line O pr\'e9-processador obedece a diretivas de pr\'e9-processador que tipicamente indicam os arquivos que devem ser inclu\'eddos no arquivo fonte que est\'e1 sendo compilado e s\'edmbolos especiais que devem ser substituidos por textos de programa. \line Um editor de liga\'e7\'e3o \ldblquote liga\rdblquote  o c\'f3digo objeto com o c\'f3digo de fun\'e7\'f5es que est\'e3o fora do programa, para produzir uma imagem execut\'e1vel (sem partes faltantes). Em um sistema t\'edpico baseado em UNIX, o comando para compilar e \ldblquote ligar\rdblquote  um programa em C\'f7+ \'e9 CC. Se o programa compilar e ligar corretamente, \'e9 gerado um arquivo chamado a . out. Este cont\'e9m a imagem execut\'e1vel do programa. \line Um carregador busca um programa em formato execut\'e1vel no disco, transferindo-o para a mem\'f3ria. \line Um computador, sob o controle de sua CPU, executa um programa uma instru\'e7\'e3o de cada vez. \line Erros como divis\'e3o por zero acontecem quando um programa \'e9 executado: por isso estes erros s\'e3o chamados de erros durante a execu\'e7\'e3o. \line Divis\'e3o por zero geralmente \'e9 um erro fatal, isto \'e9, um erro que faz com que o programa termine imediatamente sem ter executado com sucesso seu trabalho. Os erros n\'e3o-fatais permitem que os programas concluam sua execu\'e7\'e3o, produzindo freq\'fcentemente resultados incorretos. \line Certas fun\'e7\'f5es em C++ recebem seus dados de cm (o stream padr\'e3o de entrada), normalmente associado ao teclado, mas que pode ser conectado a outro dispositivo. Os dados para sa\'edda s\'e3o passados a cout (o stream padr\'e3o de sa\'edda de dados), normalmente conectado \'e0 tela do computador; por\'e9m, cout pode ser conectado a outro dispositivo. \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 87 \line\bullet  O streatn padr\'e3o para erros \'e9 chamado de cerr. O stream cerr (normalmente conectado \'e0 tela) \'e9 usado para exibir mensagens de erro. \line\bullet  Existem muitas varia\'e7\'f5es entre diferentes implementa\'e7\'f5es de C++ em diferentes computadores, o que toma a portabilidade uma meta dif\'edcil de ser atingida. \line\bullet  C++ fornece recursos para a programa\'e7\'e3o orientada a objetos. \line\bullet  Os objetos s\'e3o componentes de software essencialmente reutiliz\'e1veis que modelam coisas no mundo real. Os objetos s\'e3o criados a partir de \ldblquote modelos\rdblquote  chamados de classes. \line\bullet  Coment\'e1rios de uma s\'f3 linha come\'e7am com II. Os programadores inserem coment\'e1rios para documentar os programas e melhorar sua legibilidade. Os coment\'e1rios n\'e3o fazem o computador executar qualquer a\'e7\'e3o quando o programa \'e9 executado. \line\bullet  A linha #include <iostream> diz ao pr\'e9-processador C++ para incluir o conte\'fado do arquivo de cabe\'e7alho do stream de entradaisa\'edda no programa. Este arquivo cont\'e9m informa\'e7\'f5es necess\'e1rias para compilar programas que usam std: : cm, std: : cout e os operadores \'abe\'bb. \line\bullet  A execu\'e7\'e3o de programas escritos em C++ come\'e7a na fun\'e7\'e3o main. \line\bullet  O objeto de siream std: cout. para sa\'edda - normalmente conectado \'e0 tela - \'e9 usado para fazer a sa\'edda de dados. M\'faltiplos itens de dados podem ser concatenados para sa\'edda usando-se os operadores de inser\'e7\'e3o no stream (\'ab). \line\bullet  O objeto de stream std: cm, para entrada - normalmente conectado ao teclado - \'e9 usado para receber entrada de dados. M\'faltiplos itens de dados podem ser udos concatenando-se operadores de extra\'e7\'e3o do stream (\'bb). \line\bullet  Todas as vari\'e1veis em um programa em C++ devem ser declaradas antes de poderem ser usadas. \line\bullet  Um nome de vari\'e1vel em c++ \'e9 qualquer identificador v\'e1lido. Um identificador \'e9 uma s\'e9rie de caracteres consistindo em letras, d\'edgitos e sublinhado ( _). Identificadores em C++ n\'e3o podem come\'e7ar com um d\'edgito. Os identificadores em C++ podem ter qualquer comprimento; por\'e9m, alguns sistemas e/ou implementa\'e7\'f5es de C++ podem impor algumas restri\'e7\'f5es sobre o comprimento dos identificadores. \line\bullet  C++ \'e9 sens\'edvel a mai\'fasculas e min\'fasculas. \line\bullet  A maioria dos c\'e1lculos s\'e3o executados em comandos de atribui\'e7\'e3o. \line\bullet  Toda vari\'e1vel armazenada na mem\'f3ria do computador tem um nome, um valor, um tipo e um tamanho. \line\bullet  Sempre que um novo valor \'e9 colocado em uma posi\'e7\'e3o da mem\'f3ria, ele substitui o valor anterior naquela posi\'e7\'e3o. O valor anterior \'e9 perdido. \line\bullet  Quando um valor \'e9 lido da mem\'f3ria, o processo \'e9 n\'e3o-destrutivo, isto \'e9, uma c\'f3pia do valor \'e9 lida, deixando o valor original inalterado na posi\'e7\'e3o de mem\'f3ria. \line\bullet  C\'f7+ calcula o valor de express\'f5es aritm\'e9ticas em uma seq\'fc\'eancia precisa, determinada pelas regras de preced\'eancia e associatividade de operadores. \line\bullet  O comando if permite a um programa tomar uma decis\'e3o quando uma certa condi\'e7\'e3o \'e9 encontrada. O formato para um comando if \'e9 \line if (condi\'e7\'e3o) \line comando; \line Se a condi\'e7\'e3o \'e9 true (verdadeira), o comando no corpo do if \'e9 executado. Se a condi\'e7\'e3o n\'e3o \'e9 satisfeita, isto \'e9, a condi\'e7\'e3o \'e9 false (falsa), o comando no corpo \'e9 pulado. \line\bullet  As condi\'e7\'f5es em comandos if s\'e3o comumente formadas usando-se operadores de igualdade e operadores relacionais. O \line resultado do uso destes operadores \'e9 sempre true ou false. \line\bullet  Os comandos \line using std::cout; \line using std: :cin; \line using std::endl; \line s\'e3o comandos using que nos ajudam a eliminar a necessidade de repetir o prefixo std: :. A partir do ponto em que inclu\'edmos estes comandos using, podemos escrever cout em vez de std : cout, cm em vez de std: : cm e endi em vez de s td: : endi. respectivamente, no resto do programa. \par
88 C++ COMO PROGRAMAR \line\bullet  A orienta\'e7\'e3o a objetos \'e9 um modo natural de pensar sobre o mundo e de escrever programas de computador. \line\bullet  Os objetos t\'eam atributos (como tamanho, forma, cor, peso, etc.) e exibem comportamentos. \line\bullet  Os seres humanos aprendem sobre objetos estudando seus atributos e observando seus comportamentos. \line\bullet  Objetos diferentes podem ter muitos dos mesmos atributos e exibir comportamentos semelhantes. \line\bullet  A programa\'e7\'e3o orientada a objetos (OOP) modela objetos do mundo real atrav\'e9s de duplicatas em software. Ela tira partido de rela\'e7\'f5es de classe, nos quais os objetos de uma certa classe t\'eam as mesmas caracter\'edsticas. Aproveita-se de rela\'e7\'f5es de heran\'e7a e at\'e9 heran\'e7a m\'faltipla, em que novas classes derivadas s\'e3o criadas herdando caracter\'edsticas de classes existentes e ainda contendo suas pr\'f3prias caracter\'edsticas \'fanicas. \line\bullet  A programa\'e7\'e3o orientada a objetos fornece um modo intuitivo de ver o processo de programa\'e7\'e3o, isto \'e9, modelar objetos do mundo real, seus atributos e seus comportamentos. \line\bullet  A OOP tamb\'e9m modela a comunica\'e7\'e3o entre objetos atrav\'e9s de mensagens. \line\bullet  A OOP encapsula dados (atributos) e fun\'e7\'f5es (comportamentos) em objetos. \line\bullet  Os objetos t\'eam a propriedade de oculta\'e7\'e3o de informa\'e7\'e3o. Embora objetos possam saber como se comunicar uns com os outros atrav\'e9s de interfaces bem-definidas, normalmente os objetos n\'e3o t\'eam permiss\'e3o de saber detalhes de implementa\'e7\'e3o de outros objetos. \line\bullet  A oculta\'e7\'e3o de informa\'e7\'f5es \'e9 crucial para a boa engenharia de software. \line\bullet  Em C e outras linguagens de programa\'e7\'e3o procedurais, a programa\'e7\'e3o tende a ser orientada \'e0 a\'e7\'e3o. Os dados s\'e3o certamente importantes em C, mas o ponto de vista nela adotado \'e9 que os dados existem principalmente para apoiar as a\'e7\'f5es que as fun\'e7\'f5es executam. \line\bullet  Os programadores de C++ se concentram em criar seus pr\'f3prios tipos definidos pelo usu\'e1rio, chamados de classes. Cada classe cont\'e9m tanto os dados como tamb\'e9m o conjunto de fun\'e7\'f5es que manipulam os dados. Os dados componentes de uma classe s\'e3o chamados de membros de dados. As fun\'e7\'f5es componentes de uma classe s\'e3o chamadas de fun\'e7\'f5es membro ou m\'e9todos. \line Terminologia \line abstra\'e7\'e3o coment\'e1rio (II) \line a\'e7\'e3o compilador \line an\'e1lise componente \line an\'e1lise e projeto orientados a objetos (OOAD) comportamento \line associa\'e7\'e3o comportamentos de um objeto \line associatividade da direita para a esquerda computa\'e7\'e3o cliente/servidor \line associatividade da esquerda para a direita computa\'e7\'e3o distribu\'edda \line associatividade de operadores computador \line associatividade de um operador condi\'e7\'e3o \line atributo corpo de uma fun\'e7\'e3o \line atributos de um objeto criando classes valiosas \line biblioteca padr\'e3o C+\'f7 da direita para a esquerda \line Booch, Grady dados \line C decis\'e3o \line C padr\'e3o ANS1ISO declara\'e7\'e3o \line dependente da m\'e1quina \line C++ padr\'e3o ANSIJISO dispositivo de entrada \line caractere de escape (\\) dispositivo de sa\'edda \line caractere nova linha (\\n) divis\'e3o de inteiros \line caracteres de espa\'e7o em branco editor \line carregamento encapsulamento \line clareza entrada/sa\'edda (E/S) \line classe erro de compila\'e7\'e3o \line comando erro de l\'f3gica \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 89 \par
erro de sintaxe \line erro durante a compila\'e7\'e3o erro durante a execu\'e7\'e3o erro fatal \line erro n\'e3o-fatal \line estrutura if \line fluxo de controle \line fun\'e7\'e3o \par
fun\'e7\'e3o membro \line hardware \line heran\'e7a \line heran\'e7a m\'faltipla \line identificador \line independente da m\'e1quina instanciar \par
irit \par
inteiro (int) interface interpretador \par
iostream \par
Jacobson, Ivar \line ligando \line linguagem de alto n\'edvel \line linguagem de m\'e1quina \line linguagem de programa\'e7\'e3o \line linguagem de programa\'e7\'e3o procedural linguagem simb\'f3lica \par
lista separada por v\'edrgulas main \line membro de dados \line mem\'f3ria \par
mem\'f3ria prim\'e1ria \line mensagem \line m\'e9todo \line modelagem \line multiprocessador \line multiprograma\'e7\'e3o \line multitasking \line nome de vari\'e1vel \line Object Managemeni Group (OMG) objeto \line objeto cerr \par
objeto cm \line objeto cout \line objeto padr\'e3o de entrada (cm) objeto padr\'e3o de erro (cerr) objeto padr\'e3o de sa\'edda (cout) oculta\'e7\'e3o de informa\'e7\'e3o \line operador \line operador bin\'e1rio \par
operador de atribui\'e7\'e3o (=) \line operador de multiplica\'e7\'e3o (*) \line operador m\'f3dulo (%) \line operadores aritm\'e9ticos \line operadores de igualdade == \ldblquote\'e9 igual a\rdblquote  \par
= \ldblquote n\'e3o \'e9 igual a\rdblquote  operadores relacionais \line > \ldblquote\'e9 maior que\rdblquote  \line <\ldblquote\'e9 menor que\rdblquote  \line >= \ldblquote\'e9 maior que ou igual a\rdblquote  <= \ldblquote\'e9 menor que ou igual a\rdblquote  \par
operando orientado a a\'e7\'f5es palavras reservadas par\'eanteses () par\'eanteses aninhados \par
patrim\'f4nio em software ponto-e-v\'edrgula (;) posi\'e7\'e3o de mem\'f3ria preced\'eancia \par
pr\'e9-processador \line programa de computador programa tradutor \line programa\'e7\'e3o estruturada programa\'e7\'e3o orientada a objetos (OOP) programa\'e7\'e3o procedural projeto \line projeto orientado a objetos (OOD) \par
prompt \line pseudoc\'f3digo \line Rational Software Corporation regras de preced\'eancia de operadores requisitos \line reusabilidade de software \ldblquote reutilizar, reutilizar, reutilizar\rdblquote  \par
Rumbaugh, James sens\'edvel a ma\'edusculas e min\'fasculas seq\'fc\'eancia de escape servidor de arquivo \par
software \line std: :cerr std: :cin \par
std: :cout \par
std: :endl \par
string \line substantivos em uma especifica\'e7\'e3o de sistema terminador de comando (;) \line tipo definido pelo usu\'e1rio \line unidade central de processamento (CPU) unidade de aritm\'e9tica e l\'f3gica (UAL) Unified Modeling Language (UML) using \line using std: :cerr \line using std::cin \par
using std::cout using std::endl \line valor de uma vari\'e1vel vari\'e1vel \par
verbos em uma especifica\'e7\'e3o de sistema \par
90 C++ COMO PROGRAMAR \line Erros comuns de programa\'e7\'e3o \line 1.1 Erros como os de divis\'e3o por zero acontecem quando um programa est\'e1 sendo executado; por isso, estes erros s\'e3o chamados de \ldblquote erros durante a execu\'e7\'e3o\rdblquote . Dividir por zero \'e9 geralmente um erro fatal, isto \'e9, um erro que causa o t\'e9rmino imediato do programa sem este ter executado com sucesso seu trabalho. Os erros n\'e3o-fatais permitem que os programas sejam executados at\'e9 a conclus\'e3o, freq\'fcentemente produzindo resultados incorretos. (Nota: em alguns sistemas, dividir por zero n\'e3o \'e9 um erro fatal. Consulte a documenta\'e7\'e3o do seu sistema). \line 1.2 Esquecer de incluir o arquivo iostream em um programa que recebe dados de entrada do teclado, ou envia dados de sa\'edda para a tela, faz o compilador emitir uma mensagem de erro. \line 1.3 Omitir o ponto-e-v\'edrgula no fim de um comando \'e9 um erro de sintaxe. Um erro de sintaxe ocorre quando o compilador n\'e3o pode reconhecer um comando. O compilador emite normalmente uma mensagem de erro para ajudar o programador a localizar e corrigir o comando incorreto. Os erros de sintaxe s\'e3o viola\'e7\'f5es da linguagem. Os erros de sintaxe s\'e3o tamb\'e9m chamados de erros de compila\'e7\'e3o, erros durante a compila\'e7\'e3o, ou erros de compila\'e7\'e3o porque aparecem durante a fase de compila\'e7\'e3o do programa. \line 1.4 Tentar usar o operador m\'f3dulo, %, com operandos n\'e3o-inteiros \'e9 um erro de sintaxe. \line 1.5 Ocorrer\'e1 um erro de sintaxe se qualquer um dos operadores ==. =. >=. e <= aparecer com espa\'e7os entre seus dois s\'edmbolos. \line 1.6 Inverter a ordem do par de s\'edmbolos em qualquer dos operadores 1, >, e < (escrevendo-os como = , =>, e =<. respectivamente) normalmente \'e9 erro de sintaxe. Em alguns casos, escrever = como =! n\'e3o \'e9 um erro de sintaxe, mas \line quase certamente ser\'e1 um erro de l\'f3gica. \line 1.7 Confundir o operador de igualdade == com o operador de atribui\'e7\'e3o =. O operador de igualdade deveria ser lido \ldblquote\'e9 igual a\rdblquote  e o operador de atribui\'e7\'e3o como \ldblquote recebe\rdblquote  ou \ldblquote recebe o valor de\rdblquote  ou \ldblquote  a ele \'e9 atribu\'eddo o valor de\rdblquote . Algumas pessoas preferem ler o operador de igualdade como \ldblquote duplo igual\rdblquote . Como logo veremos, confundir estes dois operadores pode n\'e3o necessariamente produzir um erro de sintaxe facilmente identific\'e1vel, mas pode causar erros de l\'f3gica extremamente sutis. \line 1.l Colocar um ponto-e-v\'edrgula logo imediatamente ap\'f3s par\'eantese da direita, em uma estrutura if. \'e9 freq\'fcentemente um erro de l\'f3gica (embora n\'e3o seja um erro de sintaxe). O ponto-e-v\'edrgula faria com que o corpo da estrutura if fosse considerado vazio, assim a estrutura if n\'e3o executaria nenhuma a\'e7\'e3o, independentemente do fato de sua condi\'e7\'e3o ser ou n\'e3o verdadeira. Pior ainda: o comando do corpo original da estrutura if agora se tornaria um comando em seq\'fc\'eancia com a estrutura if, sendo sempre executado, freq\'fcentemente fazendo com que o programa produza resultados incorretus. \line 1.9 E um erro de sintaxe colocar espa\'e7os no meio de um identificador (por exemplo, main escrito como ma in). \line Boas pr\'e1ticas de programa\'e7\'e3o \line 1.1 Escreva seus programas em C++ de uma maneira simples e direta. Isto \'e9 \'e0s vezes chamado de KLS (\ldblquote Mantenha-o simples\rdblquote  - Keep It Simple). N\'e3o \ldblquote force\rdblquote  a linguagem tentando usos estranhos. \line 1.2 Leia os manuais para a vers\'e3o de C++ que voc\'ea est\'e1 usando. Consulte estes manuais com freq\'fc\'eancia, para certificar-se de que esteja ciente da rica rela\'e7\'e3o de recursos que C++ apresenta e de que esteja usando estes recursos \line corretamente. \line 1.3 Seu computador e compilador s\'e3o bons professores. Se, depois de ler cuidadosamente seu manual de linguagem C++, voc\'ea n\'e3o tiver certeza de como funciona um recurso de C++, experimente usar um pequeno \ldblquote programa de teste\rdblquote  e ver o que acontece. Configure as op\'e7\'f5es do seu compilador para \ldblquote n\'edvel m\'e1ximo de advert\'eancias\rdblquote . Estude cada mensagem que obtiver ao compilar seus programas e corrija os programas para eliminar as mensagens. \line 1.4 Todo programa deveria come\'e7ar com um coment\'e1rio descrevendo o prop\'f3sito do programa. \line 1.5 Muitos programadores fazem com que o \'faltimo caractere impresso por uma fun\'e7\'e3o seja um nova linha (\\n). Isto assegura que a fun\'e7\'e3o deixar\'e1 o cursor da tela posicionado no in\'edcio de uma nova linha. Conven\'e7\'f5es deste natureza encorajam \line a reusabilidade de software - uma meta-chave em ambientes de desenvolvimento de software. \line 1.6 Recue o corpo inteiro de cada fun\'e7\'e3o um n\'edvel de indenta\'e7\'e3o nas marcas de tabula\'e7\'e3o que definem o corpo da fun\'e7\'e3o. Isto faz com que a estrutura funcional de um programa se destaque e ajuda a tornar os programas mais \line f\'e1ceis de ler. \line 1.7 Estabele\'e7a uma conven\'e7\'e3o para o tamanho dos recuos de indenta\'e7\'e3o que voc\'ea prefere; ent\'e3o, aplique uniformemente essa conven\'e7\'e3o. A tecla de tabula\'e7\'e3o pode ser usada para criar recuos, mas pontos de tabula\'e7\'e3o podem variar. Recomendamos usar espa\'e7os entre tabula\'e7\'f5es de 1/4 de polegada ou (prefer\'edvel) tr\'eas espa\'e7os para criar o recuo para um n\'edvel de indenta\'e7\'e3o. \line 1.8 Alguns programadores preferem declarar cada vari\'e1vel em uma linha separada. Este formato permite a f\'e1cil inser\'e7\'e3o de um coment\'e1rio descritivo ap\'f3s cada declara\'e7\'e3o. \line 1.9 Coloque um espa\'e7o ap\'f3s cada v\'edrgula (,) para tornar os programas mais leg\'edveis. \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 91 \line 1.10 Escolher nomes de vari\'e1veis significativos ajuda um programa a ser \ldblquote autodocumentado,\rdblquote  isto \'e9, toma mais f\'e1cil de entender o programa simplesmente lendo-o, em vez de ter que ler manuais ou usar coment\'e1rios em excesso. \line 1.11 Evite identificadores que come\'e7am com sublinhado ( _) simples ou duplo, porque compiladores de C++ podem usar nomes semelhantes para seu pr\'f3prio uso interno. Isto evitar\'e1 que nomes escolhidos por voc\'ea sejam confundidos com \line nomes que os compiladores escolhem. \line 1.12 Sempre coloque uma linha em branco entre de uma declara\'e7\'e3o e comandos execut\'e1veis adjacentes. Isto faz com que as declara\'e7\'f5es se destaquem no programa, contribuindo para a clareza do mesmo. \line 1.13 Se voc\'ea preferir colocar declara\'e7\'f5es no in\'edcio de uma fun\'e7\'e3o, separe essas declara\'e7\'f5es dos comandos execut\'e1veis da fun\'e7\'e3o com uma linha em branco, para destacar onde as declara\'e7\'f5es terminam e os comandos execut\'e1veis come\'e7am. \line 1.14 Coloque espa\'e7os do dois lados de um operador bin\'e1rio, Isto faz com que o operador se destaque, tornando o programa mais leg\'edvel. \line 1.15 Como na \'e1lgebra, \'e9 aceit\'e1vel se colocar par\'eanteses desnecess\'e1rios em uma express\'e3o para tom\'e1-la mais clara. Estes par\'eanteses s\'e3o chamados de redundantes. Par\'eanteses redundantes s\'e3o usados comumente para agrupar subexpress\'f5es de uma express\'e3o grande, para tomar a express\'e3o mais clara. Quebrar um comando longo em uma seq\'fc\'eancia de comandos mais curtos e mais simples tamb\'e9m aumenta a clareza. \line 1.16 Indente o comando que comp\'f5e corpo de uma estrutura if para fazer com que o corpo da estrutura se destaque, melhorando dessa forma a legibilidade. \line 1.17 Em um programa n\'e3o deve haver mais que um comando por linha. \line 1.18 Um comando longo pode ser separado em v\'e1rias linhas. Se um comando \'fanico deve ser dividido em v\'e1rias linhas, escolha pontos de quebra que fa\'e7am sentido, tal como depois de uma v\'edrgula em uma lista separada por v\'edrgulas ou depois de um operador em uma express\'e3o longa. Se um comando \'e9 dividido em duas ou mais linhas, recue todas as linhas subseq\'fcentes. \line 1.19 Consulte o quadro de preced\'eancia dos operadores quando escrever express\'f5es contendo muitos operadores. Confirme que os operadores na express\'e3o s\'e3o executados na ordem que voc\'ea espera. Se voc\'ea n\'e3o tem certeza da ordem de avalia\'e7\'e3o de uma express\'e3o complexa, separe a express\'e3o em comandos menores ou use par\'eanteses para for\'e7ar a ordem, exatamente como voc\'ea faria em uma express\'e3o alg\'e9brica. N\'e3o deixe de observar que alguns operadores, tal como atribui\'e7\'e3o (), s\'e3o associados da direita para a esquerda, em vez de da esquerda para a direita. \line Dicas de desempenho \line 1.1 Usar fun\'e7\'f5es e classes da biblioteca padr\'e3o, em vez de escrever suas pr\'f3prias vers\'f5es equivalentes, pode melhorar o desempenho do programa, porque este software \'e9 cuidadosamente escrito para ser executado de forma correta e eficaz. \line 1.2 Reutilizar componentes de c\'f3digo testados em vez de escrever suas pr\'f3prias vers\'f5es pode melhorar o desempenho do programa, pois estes componentes s\'e3o normalmente escritos para rodar de forma eficiente. \line Dicas de portabilidade \line 1.1 Como C \'e9 uma linguagem padronizada, independente de hardware e amplamente dispon\'edvel, aplicativos escritos em C podem ser freq\'fcentemente executados com pouca, ou nenhuma modifica\'e7\'e3o, em uma ampla variedade de sistemas de \line computa\'e7\'e3o diferentes. \line 1.2 Usar fun\'e7\'f5es e classes da biblioteca padr\'e3o, em vez de escrever suas pr\'f3prias vers\'f5es equivalentes, pode melhorar a portabilidade do programa, porque este software \'e9 inclu\'eddo em virtualmente todas as implementa\'e7\'f5es de C++. \line 1.3 Embora seja poss\'edvel escrever programas port\'e1veis, existem muitos problemas entre compiladores de C e C++ diferentes e computadores diferentes, que podem tornar a portabilidade dif\'edcil de ser obtida. Simplesmente escrever programas em C e C++ n\'e3o garante portabilidade. O programador com freq\'fc\'eancia precisar\'e1 lidar diretamente com varia\'e7\'f5es de compilador e computador. \line 1.4 C++ permite identificadores de qualquer comprimento, mas o sistema e/ou sua implementa\'e7\'e3o de C++ podem impor algumas restri\'e7\'f5es sobre o comprimento de identificadores. Use identificadores de 31 caracteres, ou menos, para assegurar a portabilidade dos seus programas. \line Observa\'e7\'f5es de engenharia de software \line 1.1 Use uma \ldblquote abordagem de blocos de constru\'e7\'e3o\rdblquote  para criar programas. Evite reinventar a roda. Use peda\'e7os existentes onde for poss\'edvel - isto \'e9 chamado de\rdblquote reutiliza\'e7\'e3o de software\rdblquote  e \'e9 um aspecto central da programa\'e7\'e3o orientada a objetos. \line 1.2 Quando estiver programando em C++, voc\'ea usar\'e1 tipicamente os seguintes blocos de constru\'e7\'e3o: classes e fun\'e7\'f5es da biblioteca padr\'e3o de C++, classes e fun\'e7\'f5es que voc\'ea mesmo cria e classes e fun\'e7\'f5es de v\'e1rias bibliotecas populares n\'e3o-padronizadas. \par
92 C++ COMO PROGRAMAR \line 1.3 Extensas bibliotecas de classes com componentes de software reutiliz\'e1veis est\'e3o dispon\'edveis na Internet e na World Wide Web. Moitas destas bibliotecas est\'e3o dispon\'edveis gratuitamente. \line Exerc\'edcios de auto-revis\'e3o \line 1.1 Preencha os espa\'e7os em branco em cada uma das seguintes frases: \line a) A empresa que popularizou a computa\'e7\'e3o pessoal foi a ________________ \line b) O computador que tornou a computa\'e7\'e3o pessoal vi\'e1vel nos neg\'f3cios e na ind\'fastria foi o __________________ \line c) Computadores processam dados sob o controle de conjuntos de instru\'e7\'f5es chamados de - do computador. \line d) As seis unidades l\'f3gicas principais do computador s\'e3o _______, , _. e \line e) As tr\'eas classes de linguagens discutidas no cap\'edtulo s\'e3o , e ______________ \line f) Os programas que traduzem programas em linguagem de alto n\'edvel para a linguagem de m\'e1quina s\'e3o chamados de g) C \'e9 amplamente conhecida como a linguagem de desenvolvimento do sistema operacional \line h) A linguagem foi desenvolvida por Wirth para o ensino da programa\'e7\'e3o estruturada nas universida des. i) O Departamento de Defesa dos EUA desenvolveu a linguagem Ada com um recurso chamado ______________ o qual permite que os programadores especifiquem que muitas atividades possam ocorrer em paralelo. \line 1.2 Preencha os espa\'e7os em branco em cada uma das senten\'e7as seguintes sobre o ambiente C\'f7\'f7. \line a) Programas em C\'f7+ s\'e3o normalmente digitados em um computador usando um programa \line b) Em um sistema C++, um programa ________________ \'e9 executado antes de a fase de tradu\'e7\'e3o do compilador come\'e7ar. \line c) O programa combina a sa\'edda do compilador com v\'e1rias fun\'e7\'f5es de biblioteca para produzir uma \line imagem execut\'e1vel. \line d) O programa __________________ transfere a imagem execut\'e1vel de um programa em C++ do disco para a mem\'f3ria. \line 1.3 Preencha os espa\'e7os em branco em cada uma das seguintes frases. \line a) Todo programa em C++ come\'e7a sua execu\'e7\'e3o na fun\'e7\'e3o \line b) A ___________________ come\'e7a o corpo de toda fun\'e7\'e3o e a ________________ termina o corpo de toda fun\'e7\'e3o. \line c) Todo comando termina com _______________________ \line d) A seq\'fc\'eancia de escape \\n representa o caractere _________________, que faz com que o cursor se posicione no in\'edcio da pr\'f3xima linha na tela. \line e) O comando _________________ \'e9 usado para tomar decis\'f5es. \line 1.4 Diga se cada uma das seguintes frases \'e9 verdadeiro ou falsa. Se for falsa, explique por qu\'ea. Suponha que o comando using std: :cout; \'e9 usado. \line a) Coment\'e1rios fazem o computador imprimir o texto depois do / / na tela quando o programa \'e9 executado. \line b) A seq\'fc\'eancia de escape \\n, quando transferida para a sa\'edda com cout, faz com que o cursor se posione no in\'edcio da pr\'f3xima linha da tela. \line c) Todas as vari\'e1veis devem ser declaradas antes de serem usadas. \line d) Todas as vari\'e1veis devem receber um tipo quando s\'e3o declaradas. \line e) C++ considera as vari\'e1veis ni.unber e NuNbEr id\'eanticas. \line f) Declara\'e7\'f5es podem aparecer quase em qualquer lugar no corpo de uma fun\'e7\'e3o em C++. \line g) O operador m\'f3dulo (%) pode ser usado s\'f3 com operandos inteiros. \line h) Os operadores aritm\'e9ticos *, 1, %, + e - t\'eam todos o mesmo n\'edvel de preced\'eancia. \line i) Um programa em C++ que imprime tr\'eas linhas na sa\'edda deve conter tr\'eas comandos de sa\'edda usando cout. \line 1.5 Escreva um \'fanico comando em C++ para realizar cada uma das seguintes frases (Suponha que n\'e3o foram usados comandos using): \line a) Declare as vari\'e1veis c, thislsAVariable, q?6354 e nuxnber como sendo do tipo int. \line b) Solicite ao usu\'e1rio que forne\'e7a um inteiro. Termine sua mensagem de solicita\'e7\'e3o com um sinal de dois pontos (:) seguido por um espa\'e7o e deixe o cursor posicionado depois do espa\'e7o. \line c) Leia um inteiro fornecido pelo usu\'e1rio atrav\'e9s do teclado e armazene o valor fornecido em uma vari\'e1vel de tipo inteiro chamada age. \line d) Se a vari\'e1vel number n\'e3o for igual a 7, imprima \ldblquote O n\'famero na vari\'e1vel n\'e3o \'e9 igual 7\rdblquote . \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 93 \line e) imprima a mensagem \ldblquote Este \'e9 um programa em C++ \ldblquote em uma linha. \line 1) imprima a mensagem \ldblquote Este \'e9 um programa em C++ \ldblquote em duas linhas, na qual a primeira linha termina com c++. \line g) Imprima a mensagem \ldblquote Este \'e9 um programa em C++ \ldblquote com cada palavra da mensagem escrita em uma linha separada. \line h) Imprima a mensagem \ldblquote Este \'e9 um programa em C++ \ldblquote , com cada palavra separada da seguinte por uma marca de tabula\'e7\'e3o. \line 1.6 Escreva um comando (ou coment\'e1rio) para realizar cada uma das seguintes tarefas: (Suponha que foram usados comandos using) \line a) Afirme que um programa calcula o produto de tr\'eas inteiros. \line b) Declare as vari\'e1veis x. y. z e result como sendo do tipo irzt. \line c) Escreva prompt pedindo ao usu\'e1rio para digitar tr\'eas inteiros. \line d) Leia tr\'eas inteiros do teclado e armazene-os nas vari\'e1veis x. y e z. \line e) Compute o produto dos tr\'eas inteiros contidos nas vari\'e1veis x. y e z e atribua o resultado \'e0 vari\'e1vel result. \line O Imprima O produto \'e9 seguido pelo valor da vari\'e1vel result. \line g) Devolva um valor a partir de main para indicar que o programa terminou com sucesso. \line 1.7 Usando os comandos que voc\'ea escreveu no Exerc\'edcio 1.6, escreva um programa completo que calcula e imprime o produto de tr\'eas inteiros. Nota: voc\'ea vai precisar escrever os comandos using necess\'e1rios. \line 1.8 Identifique e corrija os erros em cada um dos seguintes comandos (suponha que o comando using std: : cout; seja usado): \line a)if (c<7) \line cout \'ab \ldblquote c \'e9 menor que 7\\n\rdblquote ; \line b)if (c=>7) \line cout \'ab \ldblquote c \'e9 igual a ou maior que 7\\n\rdblquote  \line 1.9 Preencha com o termo correto em linguagem de objetos\rdblquote  os espa\'e7os em cada uma das seguintes frases: \line a) Pessoas podem olhar para uma tela de TV e ver pontos coloridos, ou elas podem dar um passo atr\'e1s e ver tr\'eas pessoas sentadas em uma mesa de confer\'eancia; este \'e9 um exemplo de uma capacidade chamada ________________________ \line b) Se virmos um carro como um objeto, o fato de que o carro seja um convers\'edvel \'e9 um atributo/comportamento (escolha um) \line e) O fato de um carro poder acelerar ou desacelerar, virar para a esquerda ou virar para a direita, ou ir para frente ou para tr\'e1s s\'e3o todos exemplos de ________________ de um objeto carro. \line d) Quando uma nova classe herda caracter\'edsticas de v\'e1rias classes existentes diferentes, isto \'e9 chamado de heran\'e7a \line e) Objetos se comunicam enviando __________________ uns aos outros. \line f) Objetos se comunicam uns com os outros atrav\'e9s de bem-definidos(as). \line g) Normalmente, n\'e3o \'e9 permitido a um objeto saber como outros objetos s\'e3o implementados; esta propriedade \'e9 chamadade ______________ \line h) Os em uma especifica\'e7\'e3o de sistema ajudam o programador de C++ a determinar as classes que ser\'e3o necess\'e1ria\'e7 para implementar o sistema. \line i) Os componentes de dados de uma classe s\'e3o chamados de____________ e os componentes de fun\'e7\'e3o de uma classe s\'e3o chamados de \line j) Uma inst\'e2ncia de um tipo definido pelo usu\'e1rio \'e9 um (a) \line Respostas aos exerc\'edcios de auto-revis\'e3o \line 1.1 a) Apple. b) IBM Personal Computer. e) programas. d) unidade de entrada, unidade de sa\'edda, unidade de mem\'f3ria, unidade de aritm\'e9tica e l\'f3gica, unidade central de processamento, unidade secund\'e1ria de armazenamento. e) linguagens de m\'e1quina, linguagens simb\'f3licas, linguagens de alto n\'edvel. f) compiladores. g) UNIX. h) Pascal. i) multitasking. \line 1.2 a) editor. b) pr\'e9-processador. e) editor de liga\'e7\'e3o. d) carregador (loader). \line 1.3 a) main. b) chave \'e0 esquerda (\{), chave \'e0 direita (\}). c) ponto-e-v\'edrgula. d) nova linha, e) if. \line 1.4 a) Falso. Os coment\'e1rios n\'e3o fazem qualquer a\'e7\'e3o ser executada durante a execu\'e7\'e3o do programa. Eles s\'e3o usados por documentar programas e melhorar sua legibilidade. \par
94 C++ COMO PROGRAMAR \line b) Verdadeira. \line c) Verdadeira. \line d) Verdadeira. \line e) Falsa. C++ \'e9 sens\'edvel a mai\'fasculas e min\'fasculas; por isso, estas vari\'e1veis n\'e3o s\'e3o iguais. \line O Verdadeira. \line g) Verdadeira. \line h) Falsa. Os operadores , / e % t\'eam a mesma preced\'eancia e os operadores + e - t\'eam uma preced\'eancia mais baixa. \line i) Falsa. Um \'fanico comando de sa\'edda usando cout, contendo seq\'fc\'eancias de escape m\'faltiplas, pode imprimir v\'e1rias linhas. \line 1.5 a) int c, thislsAVariable, q76354, number; \line b) std::cout \'ab \ldblquote Digite um jntejro: \ldblquote ; \line e) std: :cin \'bb age; \line d) if ( number 1= 7 \line std::cout \'ab \ldblquote O mimero na vari\'e1vel n\'e3o \'e9 igual a 7\\n\rdblquote ; \line e) std::cout \'ab \ldblquote Este \'e9 um programa em \line f) std::cout \'ab \ldblquote Este \'e9 um program\\nem C++ \\n\rdblquote ; \line g) std: :cout \'ab \lquote Este\\n\'e9\\num\\nprograma\\nem\\nC++\\n\rdblquote ; \line h) std::cout \'ab Este\\t\'e9\\tum\\tprograina\\tem\\tC++\\n\rdblquote ; \line 1.6 a) II Calcular o produto de tr\'eas inteiros \line b) int x, y, z, result; \line e) cout \'ab \ldblquote Forne\'e7a tr\'eas inteiros: \ldblquote ; \line d) ciii \'bb x \'bb y \'bb z; \line e) result = x * y * \line f) cout \'ab \ldblquote O produto \'e9 \ldblquote  \'ab result \'ab endl; \line g) return O; \line 1.7 II Calcular o produto de tr\'eas inteiros \line #unclude <iostream> \line using std::cout; \line using std::cin; \line using std::endl; \line int mairi \line int x, y, z, result; \line cout \'ab \ldblquote Digite tr\'eas inteiros: \ldblquote ; \line ciii \'bb x \'bb y \'bb z; \line result = x * y * \line cout \'ab \ldblquote O produto \'e9 \ldblquote  \'ab result \'ab endi; \line retunn O; \line 1.8 a) Erro: ponto-e-v\'edrgula depois do par\'eanteses direito da condi\'e7\'e3o no comando if. Corre\'e7\'e3o: remova o ponto-e-vfrgula depois do par\'eanteses direito. Nota: o resultado deste erro \'e9 que o comando de sa\'edda ser\'e1 executado quer a condi\'e7\'e3o no comando if seja verdadeira ou n\'e3o. O ponto-e-v\'edrgula depois do par\'eanteses direito \'e9 considerado um comando vazio \line -um comando que n\'e3o faz nada. Aprenderemos mais sobre o comando vazio no pr\'f3ximo cap\'edtulo. b) Erro: o operador relational =>. Corre\'e7\'e3o: mude => para >=. \line 1.9 a) abstra\'e7\'e3o. b) atributo. c) comportamentos. d) m\'faltipla. e) mensagens. f) interfaces. g) oculta\'e7\'e3o de informa\'e7\'e3o. h) substantivos. i) membros de dados; fun\'e7\'f5es membro ou m\'e9todos. j) objeto. \line Exerc\'edcios \line 1.10 Classifique cada um dos itens seguintes como hardware ou software: \line a) CPU \line b) compilador C++ \line e) UAL \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 95 \line d) pr\'e9-processador C++ \line e) unidade de entrada \line f) um programa editor \line 1.11 Por que voc\'ea poderia querer escrever um programa em uma linguagem independente de m\'e1quina em vez de em uma linguagem dependente de m\'e1quina? Por que uma linguagem dependente de m\'e1quina poderia ser mais apropriada para escrever certos tipos de programas? \line 1.12 Preencha os espa\'e7os em branco em cada uma das seguintes senten\'e7as: \line a) Que unidade l\'f3gica do computador recebe informa\'e7\'f5es de fora do computador para uso pelo computador? \line b) O processo de instruir o computador para resolver problemas espec\'edficos \'e9 chamado de ________________ c) Que tipo de linguagem de computador usa abrevia\'e7\'f5es semelhantes a palavras em ingl\'eas para instru\'e7\'f5es de linguagem de m\'e1quina? \line d) Que unidade l\'f3gica do computador envia as informa\'e7\'f5es que j\'e1 foram processadas pelo computador a v\'e1rios dispositivos, de forma que as informa\'e7\'f5es possam ser usadas fora do computador? \line e) Que unidade l\'f3gica do computador guarda informa\'e7\'f5es? \line f) Que unidade l\'f3gica do computador executa c\'e1lculos? _____________ \line g) Que unidade l\'f3gica do computador toma decis\'f5es l\'f3gicas? \line h) O n\'edvel de linguagem de computador mais conveniente para o programador escrever programas depressa e facilmente \line e ____________ \line i) A \'fanica linguagem que um computador pode entender diretamente \'e9 chamada de _______________________ daquele computador. \line j) Que unidade l\'f3gica do computador coordena as atividades de todas as outras unidades l\'f3gicas ? \line 1.13 Discuta o significado de cada um dos objetos seguintes: \line a)std: :cin \line b)std: :cout \line c)std: :cerr \line 1.14 Por que hoje em dia se d\'e1 tanta aten\'e7\'e3o \'e0 programa\'e7\'e3o orientada a objetos em geral e a C++ em particular? \line 1.15 Preencha os espa\'e7os em branco em cada uma das seguintes senten\'e7as: \line a) s\'e3o usados para documentar um programa e melhorar sua legibilidade. \line b) O objeto usado para exibir informa\'e7\'f5es na tela \'e9 _______________ \line c) Um comando de C++ que toma uma decis\'e3o \'e9 _______________ \line d) C\'e1lculos s\'e3o normalmente executados por comandos \line e) O objeto ____________ recebe como entrada valores fornecidos pelo teclado. \line 1.16 Escreva um \'fanico comando, ou linha, de C++ que realize cada um dos seguintes comandos: \line a) lmprimaamensagem \ldblquote Digite dois n\'fameros\rquote . \line b) Atribua o produto das vari\'e1veis b e c \'e0 vari\'e1vel a. \line c) Afirme que um programa executa um exemplo de c\'e1lculo de folha de pagamento (isto \'e9, use texto que ajuda a documentar o programa). \line d) Recebe como entrada do teclado tr\'eas valores do tipo inteiro e os transfere para as vari\'e1veis inteiras a, b e c. \line 1.17 Diga quais das seguintes afirma\'e7\'f5es s\'e3o verdadeiras e quais s\'e3o falsas. Se falsa, explique sua resposta. \line a) Os operadores de C++ s\'e3o avaliados da esquerda para direita. \line b) Os seguintes nomes s\'e3o todos nomes v\'e1lidos de vari\'e1veis: under_bar , m928134, t5, j7, suas vendas, tota1na_conta_de1e, a, b, c, z, z2. \line c) O comando cout \'ab \ldblquote a = \ldblquote ; \'e9 um exemplo t\'edpico de um comando de atribui\'e7\'e3o. \line d) Uma express\'e3o aritm\'e9tica v\'e1lida em C++, sem par\'eanteses, \'e9 avaliada da esquerda para direita. \line e) Todos os seguintes s\'e3o nomes de vari\'e1veis n\'e3o v\'e1lidos: 3g, 87, 67h2, h22. 2h. \line 1.18 Preencha os espa\'e7os em branco em cada uma das seguintes frases: \line a) Que opera\'e7\'f5es aritm\'e9ticas est\'e3o no mesmo n\'edvel de preced\'eancia que a multiplica\'e7\'e3o?___________________ b) Quando par\'eanteses est\'e3o aninhados, que conjunto de par\'eanteses \'e9 avaliado primeiro em uma express\'e3o aritmetica?_________________ \line e) Uma posi\'e7\'e3o na mem\'f3ria do computador que pode conter valores diferentes em v\'e1rios momentos ao longo da execu\'e7\'e3o de um programa \'e9 uma __________________ \par
96 C++ COMO PROGRAMAR \line 1.19 O que imprime cada um dos seguintes comandos de C++, caso imprimam qualquer coisa, quando s\'e3o executados? Se n\'e3o imprimem nada, ent\'e3o responda \ldblquote nada\rdblquote . Assuma que x = 2 e y = 3. \line a) cout \'ab x; \line b) cout \'ab x + x; \line c) cout \'ab \lquote x&\rquote ; \line d) cout \'ab \ldblquote x = \ldblquote  \'ab x; \line e) cout \'ab x + y \'ab \ldblquote  = \ldblquote  \'ab y + x; \line f) z = x + y; \line g) cm \'bb x \'bb y; \line h) II cout \'ab \ldblquote x + y = \ldblquote  \'ab x + y; \line i) cout \'ab \ldblquote\\n\rdblquote ; \line 1.20 Qual dos comandos de C++ seguintes cont\'eam vari\'e1veis cujos valores s\'e3o substitu\'eddos? \line a) cm \'bb b \'bb c \'bb d \'bb e \'bb f; \line b) p = i + j + k + 7; \line c) cout \'ab \ldblquote vari\'e1veis cujos valores s\'e3o sulstituidos\rdblquote ; \line d) cout \'ab \ldblquote a = 5\rdblquote ; \line 1.21 Dada a equa\'e7\'e3o alg\'e9brica y = ax3 + 7, quais dos seguintes comandos, se houver algum, s\'e3o comandos corretos de C++ para expressar esta equa\'e7\'e3o? \line a) y = a * x * x * x + 7; \line b)y=a*x*x*(x+7); \line c)y= (a * x) * x * ( x+ 7); \line d)y=(a*x)*x*x+7; \line e)y=a*(x*x*x)+7; \line f) y=a*x* (x*x+7) \line 1.22 Indique a ordem de avalia\'e7\'e3o dos operadores em cada um dos seguintes comandos de C++ e mostre o valor de x ap\'f3s cada comando ser executado. \line a) x 7 + 3 * 6 / 2 - 1; \line b) x = 2 % 2 + 2 * 2 - 2 / 2; \line c)x= (3*9* (3+ (9*3/ (3)))); \line 1.23 Escreva um programa que pede ao usu\'e1rio que forne\'e7a dois n\'fameros, obt\'e9m os dois n\'fameros digitados pelo usu\'e1rio e imprime a soma, o produto, a diferen\'e7a e o quociente dos dois n\'fameros. \line 1.24 Escreva um programa que imprima os n\'fameros de 1 a 4 na mesma linha, com cada par de n\'fameros adjacentes separados por um espa\'e7o. Escreva o programa usando os seguintes m\'e9todos: \line a) Usando um comando de impress\'e3o com um operador de inser\'e7\'e3o no stream. \line b) Usando um comando de impress\'e3o com quatro operadores de inser\'e7\'e3o no stream. \line c) Usando quatro comandos de impress\'e3o. \line 1.25 Escreva um programa que pede ao usu\'e1rio que forne\'e7a dois inteiros, obt\'e9m os n\'fameros digitados pelo usu\'e1rio e ent\'e3o imprime o n\'famero maior seguido pelas palavras \ldblquote\'e9 o maior\rdblquote . Se os n\'fameros s\'e3o iguais, imprime a mensagem \lquote Estes n\'fameros s\'e3o iguais\rdblquote . \line 1.26 Escreva um programa que recebe tr\'eas inteiros como entrada do teclado e imprime a soma, a m\'e9dia, o produto, o menor e o maior destes n\'fameros. O di\'e1logo de tela deve aparecer como a seguir: \line 1.27 Escreva um programa que l\'ea o raio de um c\'edrculo e imprime seu di\'e2metro, circunfer\'eancia e \'e1rea. Para it, use o valor constante 3,14159. Fa\'e7a estes c\'e1lculos em comandos de sa\'edda. (Nota: neste cap\'edtulo, discutimos s\'f3 constantes e vari\'e1veis inteiras. No Cap\'edtulo 3, discutiremos n\'fameros de ponto-flutuante, isto \'e9, valores que podem ter pontos decimais.) \par
Digite tr\'eas inteiros diferentes: 13 27 14 \line A soma \'e9 54 \line A m\'e9dia \'e9 18 \line O produto \'e9 4914 \line O menor \'e9 13 \line O maior \'e9 27 \par
CAP\'cdTULO 1 - INTRODU\'c7\'c3O AOS COMPUTADORES E \'c0 PROGRAMA\'c7\'c3O C++ 97 \par
1.30 Escreva um programa que l\'ea cinco inteiros e determina e imprime o maior e o menor inteiro no grupo. Use somente as t\'e9cnicas de programa\'e7\'e3o que voc\'ea aprendeu neste cap\'edtulo. \line 1.31 Escreva um programa que l\'ea um inteiro e determina e imprime se ele \'e9 par ou \'edmpar. (Sugest\'e3o: use o operador m\'f3dulo. Um n\'famero par \'e9 um m\'faltiplo de dois. Qualquer m\'faltiplo de dois deixa resto zero quando dividido por 2.) \line 1.32 Escreva um programa que l\'ea dois inteiros e determina e imprime se o primeiro \'e9 um m\'faltiplo do segundo. (Sugest\'e3o: use o operador m\'f3dulo). \line 1.33 Exiba um padr\'e3o de tabuleiro de damas com oito comandos de sa\'edda, ent\'e3o exiba o mesmo padr\'e3o com t\'e3o poucos comandos de sa\'edda quanto poss\'edvel. \line * \line * \line * \line 1.34 Diga qual a diferen\'e7a entre os termos \ldblquote erro fatal\rdblquote  e \ldblquote erro n\'e3o-fatal\rdblquote . Por que raz\'e3o voc\'ea poderia preferir experimentar um erro fatal em lugar de um erro n\'e3o-fatal? \line 1.35 Aqui espiamos um pouco mais \'e0 frente. Neste cap\'edtulo, voc\'ea aprendeu sobre inteiros e o tipo int. C++ tamb\'e9m pode representar letras mai\'fasculas, letras m\'ednusculas e uma variedade consider\'e1vel de s\'edmbolos especiais. C++ usa inteiros pequenos para representar internamente cada caractere diferente, O conjunto de caracteres que um computador usa e as representa\'e7\'f5es em inteiros correspondentes \'e0queles caracteres \'e9 o que se chama de conjunto de caracteres daquele computador. Voc\'ea pode imprimir um caractere simplesmente incluindo esse caractere entre ap\'f3strofes, como com \line cout \'ab \lquote A\rquote ; \line Voc\'ea pode imprimira inteiro equivalente a um caractere usando static_cast como segue: \line cout \'ab static cast< int > ( \lquote A\rquote  ); \par
1.28 Escreva um programa que imprime uma caixa, um oval, uma seta e um losango, como segue: \par
********* *** * \line 4. \line * * * * *** 4.4C \line * * * * ***** 4. .4\rquote  \line * * * * * 4 .4\rquote  \line 4. 4. \line * * * * * \line * * \line * * 4 4 * \line * * \line * * 4 4. * * * \line * * * ** \line 4. * \line ********* 444 * * \line 1.29 O que o c\'f3digo seguinte imprime? \line cout \'ab \ldblquote *\\n**\\n***\\n****\\n*****\\n\rdblquote ; \par
******* \line ******** \line ******* \par
1 \line 1 \line Ii \par
98 C++ COMO PROGRAMAR \line Isto \'e9 chamado de opera\'e7\'e3o de coer\'e7\'e3o (casi) (introduzimos coer\'e7\'f5es formalmente no Cap\'edtulo 2). Quando o comando precedente for executado, imprimir\'e1 o valor 65 (em sistemas que usam o conjunto de caracteres ASCIJ). Escreva um programa que imprime os valores inteiros equivalentes a algumas letras mai\'fasculas, algumas letras min\'fasculas, d\'edgitos e s\'edmbolos especiais. Pelo menos, imprima os inteiros equivalentes aos seguintes caracteres: A B C a b c O 1 2 $ * + / e o caractere espa\'e7o em branco. \line 1.36 Escreva um programa que recebe como entrada um n\'famero de cinco d\'edgitos, separa o n\'famero em seus d\'edgitos individuais \line e imprime os d\'edgitos separados um do outro por tr\'eas espa\'e7os cada. (Sugest\'e3o: use os operadores para inteiros divis\'e3o e m\'f3dulo). \line Por exemplo, se o usu\'e1rio digitar 42339. o programa deve imprimir \par
4 2 3 3 9 \par
1.37 Usando s\'f3 as t\'e9cnicas que voc\'ea aprendeu neste cap\'edtulo, escreva um programa que calcula os quadrados e cubos dos n\'fameros de 0 at\'e9 10 e usa marcas de tabula\'e7\'e3o para imprimir a seguinte tabela de valores: \line n\'famero quadrado cubo \line o o o \line 1 1 1 \line 2 4 8 \line 3 9 27 \line 4 16 64 \line 5 25 125 \line 6 36 216 \line 7 49 343 \line 8 64 512 \line 9 81 729 \line 10 100 1000 \line l.3S D\'ea uma resposta breve para cada uma das seguintes perguntas sobre \ldblquote pensar objetos\rdblquote : \line a) Por que este texto optou por discutir a programa\'e7\'e3o estruturada em detalhes, antes de continuar com um tratamento detalhado da programa\'e7\'e3o orientada a objetos ? \line b) Quais s\'e3o os passos t\'edpicos (mencionados no texto) de um processo de projeto orientado a objetos? \line c) Como a heran\'e7a m\'faltipla \'e9 exibida por seres humanos? \line d) Que tipos de mensagens as pessoas enviam umas \'e0s outras? \line e) Objetos enviam mensagens uns aos outros atrav\'e9s de interfaces bem-definidas. Que interfaces apresenta um r\'e1dio de carro (objeto) para seu usu\'e1rio (um objeto pessoa) ? \line 1.39 Voc\'ea est\'e1 provavelmente levando em seu pulso um dos tipos mais comuns de objetos do mundo - um rel\'f3gio. Discuta como cada uma das condi\'e7\'f5es e conceitos seguintes se aplica \'e0 no\'e7\'e3o de um rel\'f3gio: objeto, atributos, comportamentos. classe. heran\'e7a (considere, por exemplo, um rel\'f3gio despertador), abstra\'e7\'e3o, modelagem, mensagens, encapsulamento, interface, oculta\'e7\'e3o de informa\'e7\'e3o, membros de dados e fun\'e7\'f5es membro. \par
\pard\lang1033\f1\fs20\par
}
 