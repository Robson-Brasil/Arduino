{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fcharset0 Helvetica, sans-serif;}{\f2\froman\fcharset0 Helvetica Narrow;}{\f3\fmodern\fprq1\fcharset0 Courier;}{\f4\froman\fcharset0 Times New Roman;}}
\viewkind4\uc1\pard\sb100\sa240\lang2070\f0\fs16\par
 \fs24\par
\par
\b\fs70 Classes e \ul abstra\'e7\'e3o de dados \ulnone\line\line\f1\fs22 Objetivos \line\b0\fs12 . \f0\fs20 Compreender os conceitos de engenharia de software de encapsulamento e oculta\'e7\'e3o de dados. \line\f1\fs12 . \f0\fs20 Compreender as no\'e7\'f5es de abstra\'e7\'e3o de dados e tipos de dados abstratos (ADTs). \line\f1\fs12 . \f0\fs20 Ser capaz de criar ADTs em C++, ou seja, classes. \line\f1\fs12 . \f0\fs20 Compreender como criar, usar e destruir objetos de classes. \line\f1\fs12\bullet  \f0\fs20 Ser capaz de controlar o acesso a membros de dados e fun \f1\fs8 - \f0\fs20\'e7\'f5es membro de objetos. \line\bullet  Come\'e7ar a apreciar o valor da orienta\'e7\'e3o a objetos. \line\i\fs18 My object ali subii,ne \line 1 shali achieve in time. \line\i0\f1\fs28 w. s. \f0\fs20 Gilbert \line\i\f2\fs24\'c9 \f0\fs18 este um mundo no qual devemos esconder nossas virtudes? \i0\fs20 William Shakespeare, Twelfth Night \line\i\fs18 Yourpublic servants serve you right. \line\i0\fs20 Adlai Stevenson \line\i\fs18 Rostos privados em lugares p\'fablicos \line S\'e3o mais s\'e1bios e simp\'e1ticos \line Do que rostos p\'fablicos em lugares privados. \line\i0\f1\fs28 w. \f0\fs20 H. Auden \fs24\par
\b\f2\fs146 6 \b0\f0\fs24\par
\b\f1\fs20 396 \b0\fs28 c++ \f0\fs18 COMO \b\fs14 PROGRAMAR \line\ul\f1\fs30 Vis\'e3o geral \ulnone\line\fs20 6.1 Introdu\'e7\'e3o \line 6.2 Defini\'e7\'f5es de estrutura \line 6.3 Acessando membros de estruturas \line 64 Implementando um tipo \f0\fs14 Time \f1\fs20 definido pelo usu\'e1rio com uma \f0\fs14 Struct \line\f1\fs20 6.5 Implementando um tipo de dado abstrato \f0\fs16 Time \f1\fs20 com uma Class \line 6.6 Escopo de classe e acesso a membros de classes \line 6.7 Separando a interface da implementa\'e7\'e3o \line 6.8 Controlando o acesso a membros \line 6.9 Fun\'e7\'f5es de acesso e fun\'e7\'f5es utilit\'e1rias \line 6.10 Inicializando objetos de classes: construtores \line 6.1 1 Usando argumentos default com construtores \line 6.12 Usando destruidores \line 6.13 Quando construtores e destruidores s\'e3o chamados \line 6.14 Usando membros de dados e fun\'e7\'f5es membro \line 6.15 Uma armadilha sutil: retornando uma refer\'eancia para um membro de dados \b0\f0\fs18 private \line\b\f1\fs20 6.16 Atribui\'e7\'e3o usando c\'f3pia membro a membro default \line 6.17 Reutiliza\'e7\'e3o de software \line 6.18 (Estudo de caso opcional) Pensando em objetos: come\'e7ando a programar as classes para \line o simulador de elevador \line\b0\i\f0\fs18 Resumo \i0\f1\fs10 . \i\f0\fs18 Terminologia \i0\f1\fs10\bullet  \i\f0\fs18 Erros comuns de programa\'e7\'e3o \i0\f1\fs10\bullet  \i\f0\fs18 Boas pr\'e1ticas de programa\'e7\'e3o \i0\f1\fs10\bullet  \i\f0\fs18 Dicas de desempenho \i0\f1\fs10\bullet  \i\f0\fs18 Observa\'e7\'f5es de engenharia de software \i0\f1\fs10\bullet  \i\f0\fs18 Dicas de teste e depura\'e7\'e3o \i0\f1\fs10\bullet  \i\f0\fs18 Exerc\'edcios de auto-revis\'e3o\bullet  Respostas aos exerc\'edcios de auto-revis\'e3o \i0\f1\fs10\bullet  \i\f0\fs18 Exerc\'edcios \line\b\i0\f1\fs26 6.1 Introdu\'e7\'e3o \line\b0\f0\fs18 Agora come\'e7amos nossa introdu\'e7\'e3o \'e0 orienta\'e7\'e3o a objetos em C++. Por que adiamos a programa\'e7\'e3o orientada a objetos em C++ at\'e9 o Cap\'edtulo 6? A resposta \'e9 que os objetos que construiremos ser\'e3o compostos, em parte, por segmentos de programas estruturados; assim, precis\'e1vamos primeiro estabelecer uma base em programa\'e7\'e3o estruturada. \line Atrav\'e9s de nossas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote , nos finais dos Cap\'edtulos 1 a 5, introduzimos os conceitos b\'e1sicos (i.e., \ldblquote pensar em objetos\rdblquote ) e a terminologia (i.e., \ldblquote falar em objetos\rdblquote ) de programa\'e7\'e3o orientada a objetos em \f1\fs28 c++. \f0\fs18 Nestas se\'e7\'f5es especiais, tamb\'e9m discutimos as t\'e9cnicas do \i projeto orientado a objetos (OOD, object-oriented design): \i0 analisamos uma defini\'e7\'e3o t\'edpica de problema, que pedia que se constru\'edsse um sistema (um simulador de elevador), determinamos quais classes eram necess\'e1rias para implementar o sistema, determinamos de quais atributos os objetos dessas classes necessitavam possuir, determinamos quais os comportamentos que os objetos dessas classes necessitavam exibir e especificamos como os objetos necessitavam interagir uns com os outros para atingir os objetivos globais do sistema. \line Revisaremos brevemente alguns conceitos-chave e a terminologia da orienta\'e7\'e3o a objetos. A programa\'e7\'e3o orientada a objetos (OOP, \i object-oriented programming) encapsula \i0 dados (atributos) e fun\'e7\'f5es (comportamento) em pacotes chamados de \i classes; \i0 os dados e fun\'e7\'f5es de uma classe est\'e3o intimamente ligados. Uma classe \'e9 como uma planta de uma casa. A partir da planta de uma casa, um construtor pode construir uma casa. A partir de uma \fs24\par
\f2\fs254 r \f0\fs24\par
\b\fs14 CAP\'cdTULO \f1\fs22 6 \b0\fs8 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs22 397 \line\b0\f0\fs18 classe, um programador pode criar um objeto. Uma planta de uma casa pode ser reutilizada muitas vezes para fazer muitas casas. Uma classe pode ser reutilizada muitas vezes para criar muitos objetos da mesma classe. As classes t\'eam a propriedade de \i oculta\'e7\'e3o de informa\'e7\'f5es. \i0 Isso significa que, embora os objetos da classe possam saber como comunicar-se uns com os outros atrav\'e9s de \i inteifaces \i0 bem-definidas, normalmente n\'e3o \'e9 permitido \'e0s classes saber como outras classes s\'e3o implementadas \f1\fs8 - \f0\fs18 os detalhes de implementa\'e7\'e3o est\'e3o escondidos dentro das pr\'f3prias dasses. Certamente, \'e9 poss\'edvel dirigir um carro eficazmente sem conhecer os detalhes de como motores, transmiss\'f5es e sistemas de escapamento funcionam internamente. Veremos por que a oculta\'e7\'e3o de informa\'e7\'f5es \'e9 t\'e3o crucial para a boa engenharia de software. \line Em C e outras \i linguagens de programa\'e7\'e3o procedurais, \i0 a programa\'e7\'e3o tende a ser \i orientada a a\'e7\'f5es, \i0 enquanto que em C++, idealmente, a programa\'e7\'e3o \'e9 \i orientada a objetos. \i0 Em C, a unidade de programa\'e7\'e3o \'e9 \i afun\'e7\'e3o. \i0 Em C++. a unidade de programa\'e7\'e3o \'e9 a \i classe, \i0 a partir da qual os objetos s\'e3o eventualmente \i instanciatados \i0 (i.e., criados). \line Os programadores de C concentram-se em escrever fun\'e7\'f5es. Os grupos de a\'e7\'f5es que executam alguma tarefa s\'e3o reunidos em fun\'e7\'f5es e fun\'e7\'f5es s\'e3o agrupadas para formar programas. Os dados s\'e3o certamente importantes em C, mas a vis\'e3o \'e9 que os dados existem principalmente por causa das a\'e7\'f5es que as fun\'e7\'f5es executam. Os \i verbos \i0 em uma especifica\'e7\'e3o de sistema ajudam o programador de C a determinar o conjunto de fun\'e7\'f5es que trabalhar\'e3o juntas para implementar o sistema. \line Os programadores de C++ concentram-se em criar seus pr\'f3prios \i tipos definidos pelo usu\'e1rio, \i0 chamados de \i classes. \i0 As classes tamb\'e9m s\'e3o chamadas de \i tipos definidos pelo programador \i0 Cada classe cont\'e9m dados, bem como o conjunto de fun\'e7\'f5es que manipulam os dados. Os componentes de dados de uma classe s\'e3o chamados de \i membros de dados. \i0 As fun\'e7\'f5es componentes de uma classe s\'e3o chamadas de \i fun\'e7\'f5es membro \i0 (ou \i m\'e9todos, \i0 em outras linguagens orientadas a objeto). Da mesma maneira que uma inst\'e2ncia de um tipo primitivo da linguagem, tal como int, \'e9 chamada de \i vari\'e1vel, \i0 uma inst\'e2ncia de um tipo definido pelo usu\'e1rio (i.e., uma classe) \'e9 chamada de \i objeto. \i0 [Na comunidade C++, os termos vari\'e1vel e objeto s\'e3o freq\'fcentemente usados de modo intercambi\'e1vel]. O foco da aten\'e7\'e3o em C++ \'e9 sobre as classes e n\'e3o as fun\'e7\'f5es. Os \i substantivos \i0 em uma especifica\'e7\'e3o de sistema ajudam o programador de C++ a determinar o conjunto de classes que ser\'e3o usadas para criar os objetos que trabalhar\'e3o juntos para implementar o sistema. \line As classes em C++ s\'e3o uma evolu\'e7\'e3o natural da no\'e7\'e3o de struct de C. Antes de prosseguir com os aspectos espec\'edficos de classes no desenvolvimento em C++, discutiremos estruturas e construiremos um tipo definido pelo usu\'e1rio baseado em uma estrutura. As fraquezas que exporemos nesta abordagem ajudar\'e3o a motivar a no\'e7\'e3o de \f3\fs20 classe. \line\b\f1\fs26 6.2 Defini\'e7\'f5es de estrutura \line\b0\f0\fs18 As estruturas s\'e3o tipos de dados agregados constru\'eddos usando-se elementos de outros tipos, incluindo outras structs. Considere a seguinte defini\'e7\'e3o de estrutura: \line\b\f3\fs16 struct Time \line int hour; \f1\fs22 // \f3\fs16 0-23 \line int minute; \b0\i\fs22 1/ \b\i0\fs16 0-59 \line int second; \f1\fs22 // \f3\fs16 0-59 \line\b0\f0\fs18 A palavra-chave struct inicia a defini\'e7\'e3o de uma estrutura. O identificador Time \'e9 a \i etiqueta da estrutura, \i0 que d\'e1 nome \'e0 defini\'e7\'e3o da estrutura e \'e9 usado para declarar vari\'e1veis do \i tipo da estrutura. \i0 Neste exemplo, o novo nome de tipo \'e9 Time. Os nomes declarados entre as chaves da defini\'e7\'e3o de estrutura s\'e3o os \i membros \i0 da estrutura. Os mcm- bros de uma mesma estrutura devem ter nomes diferentes, mas duas estruturas diferentes podem conter membros com os mesmos nomes sem que haja conflito. Cada defini\'e7\'e3o de estrutura deve terminar com um ponto-e-v\'edrgula. A explica\'e7\'e3o precedente \'e9 v\'e1lida tamb\'e9m para classes, como logo veremos; estruturas e classes s\'e3o bastante semeIhantes em C++. \line A defini\'e7\'e3o de Time cont\'e9m tr\'eas membros do tipo int \f1\fs8 - \f0\fs18 hour, minute e second. Os membros da \line estrutura podem ser de qualquer tipo e uma estrutura pode conter membros de muitos tipos diferentes. Uma estrutura \fs24\par
\b\f1\fs26 398 \b0\fs28 c++ \b\fs14 COMO PROGRAMAR \line\b0\fs18 no pode, por\'e9m, conter uma \f0 inst\'e2ncia de si pr\'f3pria. Por exemplo, um membro do tipo Time n\'e3o pode ser declarado na defini\'e7\'e3o de estrutura de Time. No entanto, um ponteiro para uma outra estrutura do tipo Time pode ser inclu\'eddo. Uma estrutura contendo um membro que \'e9 um ponteiro para o mesmo tipo de estrutura \'e9 chamada de \i estrutura auto- referente. \i0 As estruturas auto-referentes s\'e3o \'fateis para formar liga\'e7\'f5es entre estruturas de dados, tais como as listas encadeadas, filas, pilhas e \'e1rvores que veremos no Cap\'edtulo \b\i\fs14 15. \line\b0\i0\fs18 A defini\'e7\'e3o de estrutura precedente n\'e3o reserva qualquer espa\'e7o na mem\'f3ria; por\'e9m, essa defini\'e7\'e3o cria um \line novo tipo de dados que \'e9 usado para declarar vari\'e1veis. As vari\'e1veis do tipo estrutura s\'e3o declaradas como as vari\'e1veis de outros tipos. A declara\'e7\'e3o \line\b\f3\fs16 Time timeObject, timeArray[ 10 \b0\fs20 J, \b\fs16 *tjmeptr, \line &timeRef \b0\f1\fs10 = \b\f3\fs16 timeObject; \line\b0\f0\fs18 declara timeObject como uma vari\'e1vel do tipo Time, timeArray como um array com 10 elementos do tipo Time. timePtr como um ponteiro para um objeto do tipo Time e timeRef como uma refer\'eancia para um objeto do tipo Time que \'e9 inicializada com timeObect. \line\b\f1\fs26 6.3 Acessando membros de estruturas \line\b0\f0\fs18 Membros de uma estrutura (ou de uma classe) s\'e3o acessados usando-se os \i operadores de acesso a membros \line\i0\f1\fs8 - \f0\fs18 o \i operadorponto \b\i0 ( \b0\f1\fs8 . \b\f0\fs18 ) \b0 e o \i operador seta \b\fs14 (->). \b0\i0\fs18 O operador ponto acessa um membro de estrutura ou classe atrav\'e9s do nome de vari\'e1vel do objeto ou atrav\'e9s de uma refer\'eancia para o objeto. Por exemplo, para se imprimir o membro hour da estrutura timeObect. usamos o comando \line\b\f3\fs16 cout \'ab timeObject.hour; \line\b0\f0\fs18 Para imprimir o membro hour da estrutura referenciada por timeRef. usa-se o comando \line\b\f3\fs16 cout \'ab timeRef.hour; \line\b0\f1\fs28 o \f0\fs18 operador seta \f1\fs8 - \f0\fs18 que consiste em um sinal de menos \b (-) \b0 e um sinal maior que (>) sem os espa\'e7os intermedi\'e1rios \f1\fs8 - \f0\fs18 acessa um membro de estrutura ou membro de classe atrav\'e9s de um ponteiro para o objeto. Suponha que o ponteiro timePtr tenha sido declarado para apontar para um objeto do tipo Time e que o endere\'e7o da estrutura timeObect tenha sido atribu\'eddo a timePtr. Para imprimir o membro hour da estrutura timeObect com o ponteiro timeptr, use os comandos \line\b\f3\fs16 timePtr \b0\f1\fs10 = \b\f3\fs16 &timeObject; \line cout \'ab timeptr \b0\f1\fs8 -> \b\f3\fs16 hour; \line\b0\f0\fs18 A express\'e3o timeptr \f1\fs8 -> \f0\fs18 hour \'e9 equivalente a (*timeptr) \b\i\fs14 . \b0\i0\fs18 hour, que derreferencia o ponteiro e acessa o membro hour usando o operador ponto. Os par\'eanteses s\'e3o necess\'e1rios aqui porque o operador ponto \b\i\fs14 ( . ) \b0\i0\fs18 tem uma preced\'eancia mais alta que o operador de derreferenciamento de ponteiro \b\i\fs14 (*). \b0\i0\fs18 O operador seta e o operador ponto, juntamente com par\'eanteses e colchetes \b\i\fs14 ( [ \i0\fs18 J ), \b0 t\'eam a segunda preced\'eancia mais alta de operador (depois do operador de resolu\'e7\'e3o de escopo introduzido no Cap\'edtulo 3) e se associa da esquerda para a direita. \line\b\i Erro comum de programa\'e7\'e3o 6.1 \line\b0 A express\'e3o \i0 (*timeptr) .hour \i se refere ao membro \i0 hour \i da \i0 struct \i apontadapor \i0 timePtr. \i Omitir os par\'eanteses, como \i0 cio timePtr \b\i\fs14 . \b0\i0\fs18 hour, \i seria um erro de sintaxe porque \b\fs14 . \b0\fs18 tem uma preced\'eancia mais alta que \i0\f1\fs8 * \i\f0\fs18 assim, a express\'e3o seria executada como se estivesse inclu\'edda entre par\'eanteses, como em ( \i0 timePtr \b\i\fs14 . \b0\i0\fs18 hour \i ) \b\i0 . \b0\i Isso seria um erro de sintaxe porque com um ponteiro voc\'ea deve usar o opera- dor seta para se referir a um membro. \i0\fs24\par
\fs16 CAPfTULO \b\fs20 6 \b0\f1\fs8 - \f0\fs16 CLASSES E \f1\fs14 ABSTRA\'c7\'c3O \f0\fs16 DE \f1\fs14 DADOS \b\f0\fs20 399 \b0\fs24\par
\b\f1\fs26 6.4 Implementando um tipo \f0\fs20 Time \f1\fs26 definido pelo usu\'e1rio com uma \b0\f0\fs22 struct \line\b\fs20 A \b0\fs18 Fig. 6. 1 cria o tipo de estrutura definido pelo usu\'e1rio Time com tr\'eas membros inteiros: hour. minute e second. O programa define uma \'fanica estrutura Time chamada dinnerTime e usa o operador ponto para inicializar os membros da estrutura com os valores 1 8 para hour, 30 para minute e O para second. O programa ent\'e3o imprime a hora em formato militar (tamb\'e9m chamado de \ldblquote formato universal\rdblquote ) e formato padr\'e3o. Note que as fun\'e7\'f5es de impress\'e3o recebe refer\'eancias para estruturas Time constantes. Isto faz com que estruturas do tipo Time sejam passadas para as fun\'e7\'f5es de impress\'e3o por refer\'eancia, deste modo eliminando o \i overhead \i0 de c\'f3pia associado com a passagem de estruturas por valor para fun\'e7\'f5es \f1\fs8 - \f0\fs18 e o uso de const evita que a estrutura Time seja modificada pelas fun\'e7\'f5es de impress\'e3o. No Cap\'edtulo \i 7, \i0 discutimos objetos const e fun\'e7\'f5es membro const. \line\f3\fs16 1 \i\fs22 II \i0\fs16 Fig. 6.1: figO6Ol.cpp \line 2 \b\f0\fs20 // \b0\f3\fs16 Cria uma estrutura, inicializa seus membros e imprime a estrutura. \line 3 #include <iostream> \line 4 \line 5 using std: :cout; \line\f0\fs18 6 \f3\fs16 using std::endl; \line 7 \line 8 struct Time \b\f0\fs20\{ \b0\i\f3 1/ \i0\fs16 defini\'e7\'e3o da estrutura \line 9 int hour; \b\f0\fs20 // \b0\f3\fs16 0-23 \line 10 int minute; \b\f0\fs20 // \b0\f3\fs16 0-59 \line 11 int second; \i\fs20 II \i0\fs16 0-59 \line 12 \line 13 \line 14 void printMilitary \b\f0\fs20 ( \b0\f3\fs16 const Time & \b\f0\fs20 ) \b0\f3\fs16 ; \i\fs20 II \i0\fs16 prot\'f3tipo \line 15 void printStandard \b\f0\fs20 ( \b0\f3\fs16 const Time & \b\f0\fs20 ) \b0\f3\fs16 ; \i\fs22 II \i0\fs16 prot\'f3tipo \line 16 \line 17 int main( \line 18 \b\f0\fs20\{ \line\b0\f3\fs16 19 Time dinnerTime; \i\fs22 II \i0\fs16 vari\'e1vel do novo tipo Time \line 20 \line 21 \i\fs22 II \i0\fs16 inicializa os membros com valores v\'e1lidos \line 22 dinnerTime.hour \f1\fs10 = \f3\fs16 18; \line 23 dinnerTime.minute \f1\fs10 = \f3\fs16 30; \line 24 dinnerTime.second 0; \line 25 \line 26 cout \'ab \ldblquote O jantar ser\'e1 servido \'e0s \line 27 printNilitary( dinnerTime ); \line 28 cout \'ab \f1\fs8\ldblquote  , \f3\fs16 hora militar,\\ncjue \'e9 \f1\fs10\ldblquote ; \line\f3\fs16 29 printStandard( dinnerTime ); \line 30 cout \'ab \f1\fs8\ldblquote  \f0\fs18 na hora padr\'e3o.\\n\rquote ; \line\f3\fs16 31 \line 32 \i\fs22 II \i0\fs16 inicializa os membros com valores inv\'e1lidos \line 33 dinnerTime.hour \f1\fs10 = \f3\fs16 29; \line 34 dinnerTime.minute 73; \line 35 \line 36 cout \'ab \ldblquote\\nHora com valores inv\'e1lidos: \line 37 printNilitary \b\f0\fs20 ( \b0\f3\fs16 dinnerTime ); \line 38 cout \'ab endl; \line 39 return 0; \line 40 \b\f0\fs20\} \line\b0\fs18 41 \line\f3\fs16 42 \i\fs22 /1 \i0\fs16 Imprime a hora no formato militar \line 43 void printMilitary( const Time &t \f0\fs24\par
\b\f1\fs18 Fig. 6.1 \b0 Criando a estrutura, in\'edcializando seus membros e imprimindo a estrutura (parte 1 de 2). \f0\fs24\par
\b\f1\fs20 400 \b0\fs28 c++ \b\fs14 COMO PROGRAMAR \line 44 \fs20\{ \line\fs14 45 \f3\fs16 cout \b0\fs20\'ab \b\f1 ( \f3\fs16 t.hour < 10 ? O\rdblquote  : \b0\f1\fs8\ldblquote\ldblquote  \b\fs20 ) \f3\fs16\'ab t.hour \'ab \b0\f1\fs8\ldblquote :\ldblquote  \line\b\f3\fs16 46 \'ab \f1\fs20 ( \f3\fs16 t.minute < 10 ? \ldblquote O\rdblquote : \b0\f1\fs8\ldblquote\ldblquote  \b\fs20 ) \f3\fs16\'ab t.minute; \line 47 \f1\fs20\} \line\f3\fs16 48 \line 49 \i\f0\fs20 II \i0\f3\fs16 Imprime a hora no formato padr\'e3o \line 50 void printStandard( const Time &t \line 51 \f1\fs20\{ \line\f3\fs16 52 cout \'ab \f1\fs20 ( ( \f3\fs16 t.hour \b0\f1\fs10 == \b\f3\fs16 O \b0\i\f0\fs28 fl \b\i0\f3\fs16 t.hour 12 \f1\fs20 ) \f3\fs16 ? \line 53 12 : t.hour % 12 \line 54 \b0\fs20\'ab \f1\fs8\ldblquote :\ldblquote  \f3\fs20\'ab \b\f1 ( \f3\fs16 t.minute < 10 ? \ldblquote O\rdblquote  : \b0\f1\fs10\ldblquote\lquote  \b\fs20 ) \f3\fs16\'ab t.minute \line 55 \'ab \b0\f1\fs8\ldblquote :\ldblquote  \f3\fs24\'ab \b\f1\fs20 ( \f3\fs16 t.second < 10 ? \ldblquote O\rdblquote  : \b0\f1\fs8\ldblquote  \b\fs20 ) \f3\fs16\'ab t.second \line 56 \'ab \f1\fs20 ( \f3\fs16 t.hour < 12 ? \b0\f1\fs10\lquote  \b\f3\fs16 da manh\'e3\rdblquote  : \b0\f1\fs8\ldblquote  \b\f3\fs16 da tarde\rdblquote  ); \line 57 \f1\fs20\} \line\b0\f3\fs24 o \b\fs16 jantar ser\'e1 servido \'e0s 18:30, hora militar, \line\b0\fs20 qie \b\fs16\'e9 6:30:00 da tarde na hora padr\'e3o. \line Hora com valores inv\'e3lidos: 29:73 \line\b0\f1\fs20 Fig. 6.1 Criando a estrutura, inicializando seus membros e imprimindo a estrutura (parte 2 de 2). \line\ul\fs36 1 \ulnone\i\f0\fs18 Dica de desempenho 6.1 \line\fs28 -F \fs18 As estruturas s\'e3o geralmente passadas atrav\'e9s de chamadas por valor Para evitar o \i0\f1\fs20 overhead \i\f0\fs18 de copiar uma estrutura, passe a estrutura atrav\'e9s de uma chamada por refer\'eancia. \line\b\fs20 Observa\'e7\'e3o de engenharia de software 6.1 \line\b0\i0\f1\fs8 ______ \i\f0\fs18 Para evitar o \i0 overhead \i de u,na chamada por valor e ainda obter o beneficio de que o dados originais da \fs28 f \fs18 un\'e7\'e3o que chamou estejam protegidos contra modifica\'e7\'f5es, passe par\'e2metros de tamanho grande como \line refer\'eancias \b\i0\f3\fs16 const. \line\b0\f0\fs18 Existem desvantagens em se criar novos tipos de dados com estruturas desta maneira. Uma vez que a inicializa\'e7\'e3o n\'e3o \'e9 especificamente exigida, \i\'e9 \i0 poss\'edvel se ter dados n\'e3o-inicializados e os problemas da\'ed decorrentes. Ainda que os dados sejam inicializados, eles podem n\'e3o ser corretamente inicializados. Valores inv\'e1lidos podem ser atribu\'eddos aos membros de uma estrutura (como fizemos na Fig. 6. 1) porque o programa tem acesso direto aos dados. Nas linhas 30 e 31, o programa foi capaz de atribuir facilmente valores inv\'e1lidos aos membros hour e minute do objeto dinnerTime do tipo Time. Se a implementa\'e7\'e3o da struct for mudada (por exemplo, a hora poderia ser representada como o n\'famero de segundos decorridos desde a meia-noite), todos os programas que usam a struct dever\'e3o ser mudados. Isso acontece porque o programador manipula diretamente a representa\'e7\'e3o dos dados. N\'e3o existe nenhuma \ldblquote interface\rdblquote  para ela para assegurar que o programador use os servi\'e7os daquele tipo de dados corre- tamente e para assegurar que os dados permane\'e7am em um estado consistente. \line\b\i\fs20 Observa\'e7\'e3o de engenharia de software 6.2 \line\b0\i0\f1\fs8 ______ \f2\fs26\'c9 \i\f0\fs18 importante escreverprogramas que sejam compreens\'edveis ef\'e1ceis de se manter A mudan\'e7a \'e9 a regia e n\'e3o a exce\'e7\'e3o. Os programadores deveriam prever que seu c\'f3digo ser\'e1 modificado. Como veremos, o uso \line de classes podefacilitar a possibilidade de mudan\'e7as em programas. \line\i0 Existem outros problemas associados com estruturas ao estilo de C. Em C, as estruturas n\'e3o podem ser impressas como uma unidade; em vez disso, seus membros devem ser impressos e formatados um de cada vez. Poderia ser escrita uma fun\'e7\'e3o para imprimir os membros de uma estrutura em algum formato apropriado. O Cap\'edtulo 8, \ldblquote Sobrecarga de operadores\rdblquote , ilustra como sobrecarregar o operador \b\f3\fs16\'ab \b0\f0\fs18 para possibilitar que objetos de um tipo de estrutura ou tipo de classe sejam impressos facilmente. Em C, as estruturas n\'e3o podem ser comparadas em sua totalidade; elas devem ser comparadas membro a membro. O Cap\'edtulo 8 tamb\'e9m ilustra como sobrecarregar opera- dores de igualdade e operadores relacionais para comparar objetos dos tipos estrutura e classe de C++. \fs24\par
\b\fs14 CAP\'cdTULO \b0\fs18 6 \f1\fs8 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs26 401 \line\b0\f0\fs18 A se\'e7\'e3o seguinte reimplementa nossa estrutura Time como uma classe C++ e demonstra algumas das vantagens de se criar \i tipos de dados abstratos \i0 ou classes. Veremos que classes e estruturas podem ser usadas quase que de forma id\'eantica em C++. A diferen\'e7a entre as duas \'e9 a acessibilidade default associada com os membros de cada uma. Isso ser\'e1 explicado em breve. \line\b\f1\fs26 65 Implementando um tipo de dado abstrato \b0\f0\fs18 Time \b\f1\fs26 com uma class \line\b0\f0\fs18 As classes habilitam o programador a modelar objetos que t\'eam \i atributos \i0 (representados como \i membros de dados) \i0 e \i comportamentos \i0 ou \i opera\'e7\'f5es \i0 (representados \i comofun\'e7\'f5es membro). \i0 Tipos contendo membros de dados e fun\'e7\'f5es membro s\'e3o definidos em C++ usando a palavra-chave class. \line As fun\'e7\'f5es membro s\'e3o \'e0s vezes chamadas de \i m\'e9todos \i0 em outras linguagens de programa\'e7\'e3o orientadas a \line objetos, e s\'e3o invocadas em resposta a \i mensagens \i0 enviadas para um objeto. Uma mensagem corresponde a uma chamada da fun\'e7\'e3o membro enviada de um objeto para outro ou enviada de uma fun\'e7\'e3o para um objeto. \line Uma vez que uma classe tenha sido definida, o nome da classe pode ser usado para declarar objetos daquela \line classe. A Figura 6.2 cont\'e9m uma defini\'e7\'e3o simples para a classe Time. \fs24\par
\f1\fs20 Fig. 6.2 Uma defini\'e7\'e3o simples da classe \f0\fs18 Time. \line\f1\fs10 - \f0\fs18 Nossa defini\'e7\'e3o da classe Time come\'e7a com a palavra-chave class. O \i corpo \i0 da defini\'e7\'e3o da classe \'e9 delineado a\'e7ao com chaves \'e0 esquerda e \'e0 direita \f1\fs24 ( \{ \f0\fs18 e \} \f1\fs10 ). \f0\fs18 A defini\'e7\'e3o da classe termina com um ponto-e-v\'edrgula. Nossa defini\'e7\'e3o \line aque da classe Time e nossa defini\'e7\'e3o da estrutura Time cont\'eam tr\'eas membros inteiros cada uma: hour, minute e )UldOs \line\b\f3\fs16 second. \line\b0\f0\fs18 s. Nas \line te do 7lrzl \ul\b\i\fs20 Erro comum de programa\'e7\'e3o 6.2 \ulnone\line\b0\i0\fs18 na ser \line ruct \i Esquecer o ponto-e-v\'edrgula, nofim de uma defini\'e7\'e3o de classe (ou estrutura), \'e9 um erro de sintaxe. \line\i0\f1\fs10 . \f0\fs18 N\'e3o \line ceife- As partes restantes da defini\'e7\'e3o da classe s\'e3o novas. Os r\'f3tulos public : e private : s\'e3o chamados de \line\i especificadores de acesso a membros. \i0 Quaisquer membros de dados ou fun\'e7\'f5es membro declarados depois do \line especificador de acesso a membros public (e antes do pr\'f3ximo especificador de acesso a membro) s\'e3o acess\'edveis \line\f1\fs8 - \f0\fs18 onde quer que o programa tenha que acessar um objeto da classe Time. Qualquer membro de dados ou fun\'e7\'f5es \line co \i e \i0 membro declaradas depois do especificador de acesso a membro private (e at\'e9 o pr\'f3ximo especificador de \line\i g \i0 acesso a membro) s\'e3o acess\'edveis somente a fun\'e7\'f5es membro da classe. Os especiticadores de acesso a membros s\'e3o \line\i o uso \i0 sempre seguidos por um dois-pontos ( : ) e podem aparecer v\'e1rias vezes, e em qualquer ordem, em uma defini\'e7\'e3o de \line classe. No restante do texto, referir-nos-emos aos especificadores de acesso a membros como publie e private \line ressas (sem o dois-pontos). No Cap\'edtulo \b\i\fs20 9, \b0\i0\fs18 introduziremos um terceiro especificador de acesso a membro, protected, ia ser quando estudarmos heran\'e7a e o papel que ela desempenha na programa\'e7\'e3o orientada a objetos. \line poSdO \ul\b\i\fs20 Boa pr\'e1tica de programa\'e7\'e3o 6.1 \ulnone\line\i0\fs14 1 \b0\fs18 sua \i Para maior clareza e legibilidade, use cada especificador de acesso a membro s\'f3 uma vez em uma defini- \i0 )pera- \i\'e7\'e3o de classe. Coloque membros \i0 public \i em primeiro lugar, onde eles s\'e3o maisf\'e1ceis de se localizar \i0\fs24\par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\pard\intbl\b\f3\fs16 1 \b0\f0\fs24\cell\b\f3\fs16 class Time \b0\f0\fs24\cell\cell\cell\fs20\row
\b\fs14\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl 2 \b0\fs24\cell\fs18 publie: \fs24\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl 3 \b0\f0\fs24\cell\b\f3\fs16 Time( ); \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl 4 \b0\f0\fs24\cell\b\f3\fs16 void setTime( int, \b0\f0\fs24\cell\b\f3\fs16 int, \b0\f0\fs24\cell\b\f3\fs16 int ); \b0\f0\fs24\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl 5 \b0\f0\fs24\cell\b\f3\fs16 void printMilitary( \b0\f0\fs24\cell\b\f3\fs16 ); \b0\f0\fs24\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl 6 \b0\f0\fs24\cell\b\f3\fs16 void printStandard( \b0\f0\fs24\cell\b\f3\fs16 ); \b0\f0\fs24\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl 7 \b0\f0\fs24\cell\b\f3\fs16 private: \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl 8 \b0\f0\fs24\cell\b\f3\fs18 inthour; \b0\i\fs22 II \b\i0\fs18 O \b0\f0\fs24\cell\f1\fs12 - \b\f3\fs16 23 \b0\f0\fs24\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl 9 \b0\f0\fs24\cell\b\f3\fs18 intminute; \b0\i\fs22 /1 \b\i0\fs18 O \b0\f0\fs24\cell\f1\fs12 - \b\f3\fs16 59 \b0\f0\fs24\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl lo \b0\f0\fs24\cell\b\f3\fs18 intsecond \b0\i\fs22 II \b\i0\fs18 O \b0\f0\fs24\cell\f1\fs12 - \b\f3\fs16 59 \b0\f0\fs24\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx325\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2366\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2967\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3760\intbl 11 \b0\f0\fs24\cell\b\f3\fs18 ); \b0\f0\fs24\cell\cell\cell\fs20\row
\pard\fs24\par
\pard\sb100\sa240\fs16 CAPfTULO \f1\fs20 6 \fs8 - \f0\fs16 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs24 403 \line\f3\fs16 e 12 void setTime( int, int, int \f1\fs20 ) \f0\fs16 ; \f1\fs20 /1 \f3\fs16 inicializa hora, minuto, segundo \line\i\fs20 s \i0\fs16 13 void printMilitary() \f0 ; \i\f3\fs20 II \i0\fs16 imprime no formato de hora militar \line\f0 D \f3 14 void printStandard() \f0 ; \i\f3\fs22 II \i0\fs16 imprima hora no formato padr\'e3o \line 15 private: \line s 16 int hour; \f1\fs20 /1 \f3\fs16 O \f1\fs8 - \f3\fs16 23 \line 17 int minute; \f1\fs20 /1 \f3\fs16 O \f1\fs8 - \f3\fs16 59 \line 18 int second; \i\fs20 1/ \i0\fs16 O \f1\fs8 - \f3\fs16 59 \line 19 \line 20 \line 21 \f1\fs20 1/ \f3\fs16 construtor de Time inicializa cada membro de dados com zeros para \line e 22 \f1\fs20 /1 \f3\fs16 garantir que todos os objetos do tipo Time come\'e7am em um estado consistente. \line 23 Time::Time() \f1\fs20\{ \f3\fs16 hour \b\fs12 = \b0\fs16 minute \b\fs12 = \b0\fs16 second 0; \line 24 \line 25 \i\fs20 /1 \i0\fs16 Inicializa um novo valor de Time usando hora militar. Executa testes \line 26 \f1\fs20 1/ \f3\fs16 de validade sobre os valores de dados. Zera valores inv\'e1lidos. \line 27 void Time::setTime( int h, int m, int s \line 28 \f1\fs20\{ \line\f3\fs16 s 29 hour (h>0 &&h<24 \f1\fs20 ) \f3\fs16 ?h :0; \line s 30 minute \b\fs12 = \b0\f1\fs20 ( \f3\fs16 m \b\fs12 >= \b0\fs16 O && m < 60 \f1\fs20 ) \f0\fs16 ? \f3 m : 0; \line s 31 second=(s>=0&&s<60)?s:0; \line\f2\fs20 e \f3\fs16 32 \f1\fs20\} \line\f3\fs16 33 \line s 34 \i\fs22 II \i0\fs16 Imprime Time no formato militar \line\f0 ) \f3 35 void Time: :printMilitary() \line 36 \f1\fs20\{ \line\f0\fs16 37 cout \'ab \f1\fs20 ( \f0\fs16 hora < 10 ? \ldblquote 0\rdblquote  : \f1\fs8\ldblquote\ldblquote  \fs20 ) \f0\fs16\'ab hour \'ab \f1\fs8\ldblquote  \f0\fs16 : \line 38 \'ab \f1\fs20 ( \f0\fs16 minuto < 10 ? \ldblquote 0\rdblquote  : \f1\fs8\ldblquote  \fs20 ) \f0\fs16\'ab minute; \line\f3 39 \line 40 \line 41 \f1\fs20 1/ \f3\fs16 Imprime Time no formato padr\'e3o \line 42 void Time: :printStandard() \line\f0 43 \f1\fs20\{ \line\f3\fs16 44 cout\'ab \f1\fs20 ( ( \f3\fs16 hour \b\fs12 == O \b0\f1\fs24 I \f3\fs16 hour \b\fs12 == 12 \b0\f1\fs20 ) \f0\fs16 ? \f3 12 : hour % 12 \line\f0 45 \'ab \f1\fs8\ldblquote  \f0\fs16 : \f1\fs8\ldblquote  \f0\fs16\'ab \f1\fs20 ( \f0\fs16 minute < 10 ? 0\rquote  : \f1\fs8\ldblquote\ldblquote  \fs20 ) \f0\fs16\'ab minute \line 46 \'ab \f1\fs8 ,, \f0\fs16 : \f1\fs8\ldblquote  \f0\fs16\'ab \f1\fs20 ( \f0\fs16 second < 10 ? \ldblquote 0\rdblquote  : \f1\fs20 ) \f0\fs16\'ab second \line\f3 47 \'ab \f1\fs20 ( \f0\fs16 hour < 12 ? \f1\fs8\ldblquote  \f3\fs16 da manh\'e3\rdblquote  : \f1\fs8\ldblquote  \f3\fs16 da tarde\rquote  ); \line 48 \line 49 \line 50 \i\fs22 II \i0\fs16 Programa para testar a classe Time simples \line 51 int main() \line\f0 52 \f1\fs20\{ \line\f3\fs16 53 Time t; \i\fs20 II \i0\fs16 instancia (cria) objeto t da classe Time \line 54 \line 55 cout \'ab \lquote A hora militar inicial \'e9 \line 56 t.printNilitary(); \line 57 cout \'ab \ldblquote\\nA hora padr\'e3o inicial \'e9 \line 58 t.printStandard(); \line 59 \line 60 t.setTime( 13, 27, 6 ); \line 61 cout \'ab \\n\\nA hora militar depois de setTime \'e9 \f1\fs10\ldblquote ; \line\f0\fs16 62 t.printMilitary(); \line\f3 63 cout \'ab \ldblquote\\nA hora padr\'e3o depois de setTime \'e9 \f1\fs10\lquote ; \line\b\f3\fs12 64 \b0\f0\fs16 t.printStandardo); \line 65 \line\f3 66 t.setTime( 99, 99, 99 ); \f1\fs20 // \f3\fs16 tenta inicializa\'e7\'e3o inv\'e1lida \line 67 cout\'ab \lquote\\n\\nAp\'f3s tentar inicializa\'e7\'e3o inv\'e1lida:\rdblquote  \line 68 \'ab \ldblquote\\n Hora militar: \f1\fs10\ldblquote ; \line\f3\fs16 69 t.printMilitary(); \line\b\f1\fs18 Fig. 6.3 \b0\fs20 Implementa\'e7\'e3o do tipo de dados abstrato \f0\fs16 Time \f1\fs20 como uma classe (parte 2 de 3). \f0\fs24\par
\b\f1\fs22 404 \b0\f0\fs28 c++ \b\f1\fs14 COMO PROGRAMAR \line\f3\fs18 70 \b0\f0\fs20 cout \b\f3\fs18\'ab \ldblquote\\nHora padr\'e3o: \b0\f1\fs10\ldblquote ; \f0\fs20 Uma \line\b\f3\fs18 71 t.printStandard() ; \b0\f0\fs20 dessa \line\b\f3\fs18 72 cout \'ab endi; \b0\f0\fs20 destri \line\b\f3\fs18 73 return O; pe1o \line 74 \f1\fs22\} \b0\f0\fs20 Discu \fs24\par
\f1\fs20 Fig. 6.3 Implementa\'e7\'e3o do tipo de dados abstrato \b\fs14 Time \b0\fs20 como uma classe (parte 3 de 3). \line\f0\fs18 Repetindo, note que os membros de dados hour, minute e second s\'e3o precedidos pelo especificador de acesso a membros private. Os membros de dados privados de uma classe normalmente n\'e3o est\'e3o acess\'edveis fora da classe. (Repetindo, veremos no Cap\'edtulo 7 \i quefriends \i0 de uma classe podem acessar os membros privados da mesma). A filosofia aqui \'e9 que a representa\'e7\'e3o real dos dados usados dentro da classe n\'e3o interessa aos clientes da mesma. Por exemplo, seria perfeitamente razo\'e1vel para a classe representar a hora internamente como o n\'famero de segundos decorridos desde a meia-noite. Os clientes poderiam usar as mesmas fun\'e7\'f5es membro public e obter os mesmos resultados, sem estarem cientes disso. Neste sentido, diz-se que a implementa\'e7\'e3o de uma classe est\'e1 \i escondida \i0 de seus clientes. Tal \i oculta\'e7\'e3o de informa\'e7\'f5es \i0 promove a possibilidade de mudan\'e7as dos programas e simplifica a percep\'e7\'e3o do cliente de uma classe. \line\i Observa\'e7\'e3o de engenharia de software 6.3 \line\i0\f1\fs8 ______ \i\f0\fs18 Os clientes de uma classe usam-na sem conhecer os detalhes internos de como a classe \'e9 implementada. Se a implementa\'e7\'e3o de classe for mudada (por exemplo, para melhorar o desempenho), desde que a interface da classe permane\'e7a constante, o c\'f3digofonte do cliente da classe n\'e3o necessita mudar (embora o cliente possa necessitar ser recompilado). Isso torna muito maisf\'e1cil modificar sistemas. \line\i0 Neste programa, o construtor de Time inicializa os membros de dados com O (i.e., o equivalente em hora militar a 12 da manh\'e3). Isto assegura que o objeto est\'fa em um estado consistente quando \'e9 criado. Valores inv\'e1lidos n\'e3o podem ser armazenados nos membros de dados de um objeto do tipo Time porque o construtor \'e9 automaticamente chamado quando o objeto de tipo Time \'e9 criado e todas as tentativas subseq\'fcentes de um cliente de modificar os dados membros s\'e3o verificadas pela fun\'e7\'e3o setTime. \line\i Observa\'e7\'e3o de engenharia de software 6.4 \line\i0\f1\fs8 ______ \i\f0\fs18 As fun\'e7\'f5es membro s\'e3o normalmente menores que as fun\'e7\'f5es em programas n\'e3o-orientados a objetos porque os dados armazenados nos membros de dados, idealmente, j\'e1foram validados por um construtor e/ou porfun\'e7\'f5es membro que armazenam novos dados. Como os \ldblquote dados j\'e1 est\'e3o no objeto \i0\f1\fs8\ldblquote , \i\f0\fs18 a fun\'e7\'e3o membrofreq\'fcentemente chamada n\'e3o tem nenhum argumento ou, pelo menos, menos argumentos que as chamadas t\'edpicas de fun\'e7\'e3o em linguagens n\'e3o-orientadas a objetos. Deste modo, as chamadas s\'e3o pequenas, as defini\'e7\'f5es defun\'e7\'e3o idem e os prot\'f3tipos defun\'e7\'e3o tamb\'e9m s\'e3o pequenos. \line\i0 Note que os dados membros de uma classe n\'e3o podem ser inicializados onde s\'e3o declarados no corpo da classe. Estes membros de dados deveriam ser inicializados pelo construtor da classe ou poderiam ter valores atribu\'eddos a eles por fun\'e7\'f5es de inicializa\'e7\'e3o. \line\i Erro comum de programa\'e7\'e3o 6.4 \line Tentar inicializar um membro de dados de uma classe explicitamente, na defini\'e7\'e3o da classe, \'e9 um erro de \line sintaxe. \i0\fs24\par
\fs20 memi client \line A dei decla meml defini \line Note defin fun\'e7\'ed class \line\b\f3\fs18 dach \line\b0\i\f0\'e9 \i0\fs20 pre \b\f3\fs18 ter os \b0\f0\fs20 class \line Embi \line a fun \line a mei \line para \line\fs28 mi: \line\fs20 expli coloc \fs24\par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4429\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4838\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5535\pard\intbl\b\f3\fs18 A hora militar inicial \'e9 00:00 \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4429\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4838\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5535\intbl A hora padr\'e3o inicial \'e9 12:00:00 da manh\'e3 \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4429\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4838\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5535\intbl A hora militar depois de setTime \'e9 13:27 \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4429\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4838\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5535\intbl A hora padr\'e3o depois de setTime \'e9 1:27:06 \b0\f0\fs24\cell\b\f3\fs16 da \b0\f0\fs24\cell\b\f3\fs16 tarde \b0\f0\fs24\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4429\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4838\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5535\intbl Ap\'f3s tentar inicializa\'e7\'e3o inv\'e1lida: \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4429\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4838\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5535\intbl Hora militar: 00:00 \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4429\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4838\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5535\intbl Hora padr\'e3o: 12:00:00 da manh\'e3 \b0\f0\fs24\cell\cell\cell\fs20\row
\pard\fs24\par
\pard\sb100\sa240\b\fs14 CAP\'cdTULO \i\f1\fs18 6 \b0\i0\fs8 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \i\f1\fs18 405 \line\b0\i0\f0 Uma \f1 fun\'e7\'e3o \f0 com o mesmo nome que a classe, mas precedida por um \i\f1 caractere \f0 til \b\f1 (-), \'e9 \b0\i0\f0 chamada de \i destruidor \i0 dessa classe (este exemplo n\'e3o inclui um destruidor explicitamente, assim o sistema inclui um para voc\'ea). O destruidor faz a \ldblquote faxina de t\'e9rmino\rdblquote  em cada objeto da classe antes de a mem\'f3ria para o objeto ser recuperada pelo sistema. Destruidores n\'e3o podem aceitar argumentos e n\'e3o podem, conseq\'fcentemente, ser sobrecarregados. Discutiremos construtores e destruidores em maiores detalhes mais \'e0 frente, neste cap\'edtulo e no Cap\'edtulo 7. \line Note que as fun\'e7\'f5es que a classe oferece ao mundo exterior s\'e3o precedidas pelo especificador de acesso a \line membro public. As fun\'e7\'f5es p\'fablicas implementam os comportamentos ou servi\'e7os que a classe oferece a seus clientes \f1\fs8 - \f0\fs18 comumente chamados de \i inteiface \i0 da classe ou \i interface \i0 public. \line\i Observa\'e7\'e3o de engenharia de software 6.5 \line\i0\f1\fs8 ______ \i\f0\fs18 Clientes t\'eam acesso \'e0 interftwe de uma classe, mas n\'e3o devem ter acesso \'e0 implementa\'e7\'e3o de uma classe. \line\i0 A defini\'e7\'e3o de classe cont\'e9m declara\'e7\'f5es dos membros de dados da classe e das fun\'e7\'f5es membro da classe. As declara\'e7\'f5es das fun\'e7\'f5es membro s\'e3o os prot\'f3tipos de fun\'e7\'e3o que discutimos nos cap\'edtulos anteriores. As fun\'e7\'f5es membro podem ser definidas dentro de uma classe. mas \'e9 uma boa pr\'e1tica de programa\'e7\'e3o definir as fun\'e7\'f5es fora da defini\'e7\'e3o da classe. \line\i Observa\'e7\'e3o de engenharia de software 6.6 \line Declararfun\'e7\'f5es membro dentro da defini\'e7\'e3o de uma classe (atrav\'e9s de seus prot\'f3tipos) e definir essas \f1\fs26 f \f0\fs18 un\'e7\'f5esfora da defini\'e7\'e3o da classe separa a inteiface da implementa\'e7\'e3o da classe. Isso promove a boa engenharia de software. Os clientes de uma classe n\'e3o podem ver a implementa\'e7\'e3o dasfun\'e7\'f5es membro da classse e n\'e3o precisam ser recompilados se a implementa\'e7\'e3o muda. \line\i0 Note o uso do \i operador bin\'e1rio de resolu\'e7\'e3o de escopo \b\f1 ( \b0\i0\f0 : : \b\i\f1 ) \b0\i0\f0 em cada defini\'e7\'e3o de fun\'e7\'e3o membro em seguida \'e0 defini\'e7\'e3o da classe na Fig. 6.3. Uma vez que \'e9 definida uma classe e s\'e3o declaradas suas fun\'e7\'f5es membros, as fun\'e7\'f5es membros devem ser definidas. Cada fun\'e7\'e3o membro da classe pode ser diretamente definida no corpo da classe (em lugar de incluir o prot\'f3tipo de fun\'e7\'e3o da classe) ou a fun\'e7\'e3o membro pode ser definida depois do corpo da classe. Quando uma fun\'e7\'e3o membro \'e9 definida depois da defini\'e7\'e3o da classe correspondente, o nome da fun\'e7\'e3o \'e9 precedido pelo nome da classe e o operador bin\'e1rio de resolu\'e7\'e3o de escopo \b\i\f1 ( \b0\i0\f0 : : \b\i\f1 ). \b0\i0\f0 Como classes diferentes podem ter os membros com os mesmos nomes, o operador de resolu\'e7\'e3o de escopo \ldblquote amarra\rdblquote  o nome do membro ao nome da classe para identificar de maneira \'e1nica as fun\'e7\'f5es membro de uma classe particular. \line\b\i\fs20 Erro comum de programa\'e7\'e3o 6.5 \line\f1\fs18 Q \b0\f0 uando estiver definindo fun\'e7\'f5es membro de uma classe fora dessa classe, omitir o nome da classe e \line operador de resolu\'e7\'e3o de escopo aplicado ao nome dafun\'e7\'e3o \'e9 um erro de sintaxe. \line\i0 Embora uma fun\'e7\'e3o membro declarada em uma defini\'e7\'e3o de classe possa ser definida fora da defini\'e7\'e3o dessa classe, \line a fun\'e7\'e3o membro ainda est\'e1 dentro do \i escopo da classe, \i0 i.e., seu nome \'e9 conhecido s\'f3 dos outros membros da classe, \line a menos que seja referenciado atrav\'e9s de um objeto da classe, uma refer\'eancia a um objeto da classe ou um ponteiro \line para um objeto da classe. Falaremos mais sobre escopo de classes mais \'e0 frente. \line Se uma fun\'e7\'e3o membro \'e9 definida em uma defini\'e7\'e3o de classe, a fun\'e7\'e3o membro \'e9 automaticamente colocada mime. Fun\'e7\'f5es membro definidas fora de uma defini\'e7\'e3o de classe podem ser transformadas em fun\'e7\'f5es mime explicitamente, usando-se a palavra-chave mnimne. Lembre-se de que o compilador reserva-se ao direito de n\'e3o colocar mnimne qualquer fun\'e7\'e3o. \line\ul\f1\fs32 1 \ulnone\b\i\f0\fs20 Dica de desempenho 6.2 \line\b0\i0\f1\fs32 .1:. \fs8 . \i\f0\fs18 Definir uma pequenafun\'e7\'e3o membro dentro da defini\'e7\'e3o de uma classe automaticamente a coloca \i0 inimne \i (se o compilador decidir assim). Isto pode melhorar o desempenho, mas n\'e3o promove a melhor engenharia de software porque os clientes da classe ser\'e3o capazes de ver a implementa\'e7\'e3o dafun\'e7\'e3o, e seu c\'f3digo deve ser recompilado se a defini\'e7\'e3o dafun\'e7\'e3o \i0\fs22 mnimne \i\fs18 muda. \i0\fs24\par
\fs18 CAP\'cdTULO \b\f1 6 \b0\fs8 - \f0\fs18 CLASSES E ABSTRA\'c7\'c3O DE DADOS \b\f1 407 \line\fs26 6.6 Escopo de classe e acesso a membros de classes \line\b0\f0\fs18 Os membros de dados de uma classe (vari\'e1veis dec\rquote aradas na defini\'e7\'e3o da classe) e fun\'e7\'f5es membro (fun\'e7\'f5es declaradas na defini\'e7\'e3o da classe) pertencem ao \i escopo da classe. \i0 As fun\'e7\'f5es n\'e3o-membro s\'e3o definidas como \i escopo de arquivo. \line\i0 Dentro do escopo de uma classe, os membros da classe s\'e3o imediatamente acess\'edveis por todas as fun\'e7\'f5es membro daquela classe e podem ser referenciados por nome. Fora do escopo de uma classe, os membros da classe s\'e3o referenciados atrav\'e9s de um dos \i handles* \i0 de um objeto \f1\fs8 - \f0\fs18 um nome de objeto, uma refer\'eancia a um objeto ou um ponteiro para um objeto. [Veremos no Cap\'edtulo 7 que um \i handie \i0 impl\'edcito \'e9 inserido pelo compilador em toda refer\'eancia a um membro de dados ou a uma fun\'e7\'e3o membro em um objetoj. \line As fun\'e7\'f5es membro de uma classe podem ser sobrecarregadas, mas s\'f3 por outras fun\'e7\'f5es membro da classe. \line Para sobrecarregar uma fun\'e7\'e3o membro. simplesmente forne\'e7a na defini\'e7\'e3o de classe um prot\'f3tipo para cada vers\'e3o da fun\'e7\'e3o sobrecarregada e forne\'e7a uma defini\'e7\'e3o de fun\'e7\'e3o separada para cada vers\'e3o da fun\'e7\'e3o. \line Vari\'e1veis definidas em uma fun\'e7\'e3o membro t\'eam \i escopo defun\'e7\'e3o \i0\f1\fs8 - \f0\fs18 s\'e3o conhecidas somente naquela fun\'e7\'e3o. Se uma fun\'e7\'e3o membro define uma vari\'e1vel com o mesmo nome que uma vari\'e1vel com escopo de classe. a vari\'e1vel com escopo de classe \i\'e9 \i0 escondida pela vari\'e1vel com escopo de fun\'e7\'e3o no escopo da fun\'e7\'e3o. Uma vari\'e1vel escondida como essa pode ser acessada precedendo-se o seu nome com o nome da classe seguido pelo operador de resolu\'e7\'e3o de escopo \b\f1 ( \b0\f0 : : \b\f1 ). \b0\f0 Vari\'e1veis globais escondidas podem ser acessadas com o operador de resolu\'e7\'e3o de escopo un\'e1rio (ver Cap\'edtulo 3). \line Os operadores utilizados para acessar membros de classes s\'e3o id\'eanticos aos operadores usados para acessar membros de estruturas. O \i operadorde sele\'e7\'e3o de membroponto \b\i0\f1 ( \b0\fs8 . \b\fs18 ) \b0\i\f0\'e9 \i0 combinado com o nome de um objeto ou com uma refer\'eancia a um objeto para acessar os membros do objeto. O \i operador de sele\'e7\'e3o de membro seta \b\i0\f1 (->) \'e9 \b0\f0 combinado com um ponteiro para um objeto para acessar os membros daquele objeto. \line A Fig. 6.4 usa uma classe simples, chamada Count, com o membro de dados public x, do tipo int. e a fun\'e7\'e3o membro public print, para ilustrar o acesso aos membros de uma classe com os operadores de sele\'e7\'e3o de membro. O programa cria (define) tr\'eas vari\'e1veis relacionadas ao tipo Count \b\f1 - \b0\f0 counter. \b counterRef (uma \b0 refer\'eancia a um objeto do tipo Count) e counterPtr (um ponteiro para um objeto do tipo Count). A vari\'e1vel \b counterRef \b0\i\'e9 \i0 definida para fazer refer\'eancia a counter e a vari\'e1vel counterPtr \'e9 definida para apontar para \b counter. \b0\i E importante notar que o membro de dados xfoi criado aqui como \i0 public \i simplesmente para de- inonstrar como membros p\'fablicos s\'e3o acessados usando \i0 handles \i (i.e., um nome, uma refer\'eancia ou um ponteiro). Como j\'e1 falamos, dados s\'e3o tipicamente declarados como \b\i0 private. \b0\i como faremos na maioria dos exemplos subseq\'fcentes. \i0 No Cap\'edtulo \b\f1 9, \b0\f0\ldblquote Heran\'e7a\rdblquote , \'e0s vezes declararemos dados como protected. \line\b\f3\fs16 1 \b0\i\fs20 II \b\i0\fs16 Fig. 6.4: figO6O4.cpp \line 2 \f1\fs18 // \f3\fs16 Demonstrando os operadores de acesso a membros de classes \f1\fs18 . \f3\fs16 e \b0\f1\fs8 -> \line\b\f3\fs16 3 \b0\i\fs20 II \line\b\i0\fs16 4 \b0\i\fs20 II \b\i0\fs16 ATEN\'c7\'c3O \b0\f1\fs12\lquote  \b\f3\fs16 NOS EXEMPLOS FUTUROS EVITAREMOS DADOS P\'daBLICOS \line 5 #include <iostream> \line 6 \line 7 using std: :cout; \line 8 using std: :endl; \line 9 \line lo \b0\i\fs20 II \b\i0\fs16 Classe Count simples \line 11 class Count \f1\fs18\{ \line\f3\fs16 12 public: \line 13 int x; \line 14 void print() \f1\fs18\{ \f3\fs16 cout \'ab x \'ab endi; \f1\fs18\} \line\f3\fs16 15 \}; \line\f0\fs18 16 \line\f3 17 int main() \line 18 \line\f1 Fig. 6.4 \b0\fs20 Acessando os membros de dados e as fun\'e7\'f5es membro de um objeto atrav\'e9s de cada tipo de \i handie \i0 de objeto \fs8 - \fs20 atrav\'e9s do nome do objeto, atrav\'e9s de uma refer\'eancia e atrav\'e9s de um ponteiro para o objeto (parte 1 de 2). \line\fs10 * \f0\fs18 N. de R.T.: Uma tradu\'e7\'e3o seria \i\f1\fs14 man\'edpulo, \i0\f0\fs18 ou seja, algo que se pode usar para acessar e manipular outro objeto; no entanto, o termo original em ingl\'eas \'e9 largamente usado e, por isso, foi mantido no texto. \fs24\par
\fs18 40S \f1\fs28 c++ \b\fs14 COMO PROGRAMAR \line\f3\fs16 19 Count counter, \b0\i\fs22 1/ \b\i0\fs16 cria objeto contador \line 20 *counterptr \b0\f1\fs10 = \b\f3\fs16 &counter, \b0\i\fs22 1/ \b\i0\fs16 ponteiro para contador \line 21 &counterRef \b0\f1\fs10 = \b\f3\fs16 counter; \b0\f0\fs18 /1 \b\f3\fs16 refer\'eancia para contador \line\f1\fs14 22 \line\f3\fs16 23 cout \'ab \ldblquote Atribui 7 a x e imprime usando o nome do objeto: \line 24 counter.x \b0\f1\fs10 = \b\f3\fs16 7; \b0\f0\fs18 /1 \b\f3\fs16 atribui 7 para o membro de dados x \line 25 counter.print() ; \b0\i\fs22 II \b\i0\fs16 chama a fun\'e7\'e3o membro print \line 26 \line\f1\fs14 27 \f3\fs16 cout \'ab \ldblquote Atribui 8 para x e imprime usando \b0 urna \b refer\'eancia: \b0\f1\fs10\ldblquote ; \line\b\f3\fs16 28 counterRef.x 8; \b0\f0\fs18 1/ \b\f3\fs16 atribui 8 para o membro de dados x \line 29 counterRef.print() \b0\f1\fs14 ; \i\f3\fs20 II \i0\fs16 chama a \b fun\'e7\'e3o membro print \line 30 \line 31 cout \'ab \ldblquote Atribui 10 para x e imprime usando um ponteiro: \b0\f1\fs10\ldblquote ; \line\b\f3\fs16 32 counterPtr->x \b0\f1\fs10 = \b\f3\fs16 10; \b0\i\fs20 II \b\i0\fs16 atribui 10 para membro de dados x \line 33 counterPtr->print() ; \b0\i\fs22 II \b\i0\fs16 chama a fun\'e7\'e3o membro print \line 34 return 0; \line 35 \line Atribui 7 para x e imprime usando o nome do objeto: 7 \line Atribui 8 para x e imprime usando \b0 uma \b refer\'eancia: 8 \line Atribui 10 para x e imprime usando um ponteiro: 10 \line\b0\f1\fs20 Fig. 6.4 Acessando os membros de dados e as fun\'e7\'f5es membro de um objeto atraves ae caoa upo ae \i\fs18 handie \i0\fs20 de objeto \fs8 - \fs20 atrav\'e9s do nome do objeto, atrav\'e9s de uma refer\'eancia e atrav\'e9s de um ponteiro para o objeto (parte 2 de 2). \line\b\fs26 6.7 Separando a interface da implementa\'e7\'e3o \line\b0\f0\fs18 Um dos princ\'edpios fundamentais da boa engenharia de software \'e9 separar a interface da implementa\'e7\'e3o. Isso torna mais f\'e1cil modificar os programas. At\'e9 onde interessa aos clientes de uma classe, mudan\'e7as na implementa\'e7\'e3o da classe n\'e3o afetam o cliente, desde que a interface da classe originalmente fornecida ao cliente se mantenha inalterada (a funcionalidade da classe pode ser expandida para al\'e9m da interface original). \line\i\f1 Observa\'e7\'e3o de \f0\fs20 engenharia de software 6.10 \line\i0\f1\fs8 _______ \i\f0\fs18 Coloque a declara\'e7\'e3o da classe em um arquivo de cabe\'e7alho para ser inclu\'eddo por qualquer cliente que queira usar a classe. Isso constitui a interface p\'fablica da classe (e fornece ao cliente os prot\'f3tipos de \line\f1\fs26 f \f0\fs18 un\'e7\'e3o de que ele necessita para poder chamar asfun\'e7\'f5es membro da classe). Coloque as defini\'e7\'f5es das \line\f1\fs26 f \f0\fs18 un\'e7\'f5es membro da classe em um arquivo-fonte. Isso constitui a implementa\'e7\'e3o da classe. \line Observa\'e7\'e3o de engenharia de software 6.11 \line\i0\f1\fs8 _______ \i\f0\fs18 Os clientes de uma classe n\'e3o necessitam de acesso ao c\'f3digo-fonte da classe para utiliz\'e1-la. Por\'e9m, os clientes necessitam poder ligar seu c\'f3digo ao c\'f3digo objeto da classe. Isto encoraja vendedores de sofiware independente (JSVs, \i0 independent software vendors) \i a oferecer bibliotecas de classes para venda ou licen\'e7a de uso. Os ISVs oferecem em seus produtos somente os arquivos de cabe\'e7alho e os m\'f3dulos objeto. Nenhuma informa\'e7\'e3o propriet\'e1ria \'e9 revelada \i0\f1\fs8 - \i\f0\fs18 como seria o caso sefossefornecido c\'f3digo-fonte. A comunidade de usu\'e1rios de C+ \b\i0\f3\fs16 + \b0\i\f0\fs18 se beneficia tendo mais bibliotecas de classe dispon\'edveis, produzidas por ISVs. \line\i0 Na realidade, as coisas n\'e3o s\'e3o t\'e3o cor-de-rosa. Os arquivos de cabe\'e7alho cont\'eam partes da implementa\'e7\'e3o e sugest\'f5es sobre outras partes da implementa\'e7\'e3o. Fun\'e7\'f5es membro mime, por exemplo, necessitam estar em um arquivo de cabe\'e7alho, de forma que quando o compilador compilar um c\'f3digo-fonte cliente, o cliente possa incluir (com a diretiva #include do pr\'e9-processador) a defini\'e7\'e3o da fun\'e7\'e3o mime no seu lugar. Os membros privados s\'e3o listados na defini\'e7\'e3o da classe no arquivo de cabe\'e7alho, de modo que estes membros sejam vis\'edveis para os clientes, \fs24\par
\i\fs18 Por\'e9m, os software ou licen\'e7a l\rquote o. Nenhuomunidar ISVs. \line\i0 o e sugesum arquiIuir (com vados s\'e3o s clientes, \fs24\par
\b\fs14 CAP\'cdTULO \b0\fs18 6 \f1\fs8 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \b0\f1\fs20 409 \line\f0\fs18 embora n\'e3o possam acessar os membros private. No Cap\'edtulo 7, mostramos como usar uma assim denominada \i classe proxy \i0 para esconder at\'e9 os dados private de uma classe dos clientes da mesma. \line\i\fs20 Observa\'e7\'e3o de engenharia de software 6.12 \i0\fs24\par
\i\fs18 As infrrnia\'e7\'f5es importantes sobre a interface de uma classe deveriam ser inclu\'eddas no arquivo de cabe\'e7a- lho. As informa\'e7\'f5es que ser\'e3o usadas s\'f3 internamente na classe e n\'e3o ser\'e3o necessitadas por clientes da classe deveriam ser inclu\'eddas no arquivo-fonte n\'e3o-divulgado. Isso \'e9 outro exemplo do princ\'edpio do m\'ednimo privil\'e9gio. \i0\fs24\par
\fs18 A Fig. 6.5 divide o programa da Fig. 6.3 em m\'faltiplos arquivos. Quando se desenvolve um programa em C++, cada defini\'e7\'e3o de classe normalmente \'e9 colocada em um \i arquivo de cabe\'e7alho \i0 e as defini\'e7\'f5es das fun\'e7\'f5es membro daquela classe s\'e3o colocadas em \i arquivos de c\'f3digo-fonte \i0 com o mesmo nome b\'e1sico. Os arquivos de cabe\'e7alho s\'e3o inclu\'eddos (atrav\'e9s de #include ) em cada arquivo em que a classe \'e9 usada e o arquivo de c\'f3digo-fonte \i\'e9 \i0 compilado e ligado com o arquivo contendo o programa principal. Veja a documenta\'e7\'e3o do seu compilador para determinar como compilar e ligar programas que consistem de m\'faltiplos arquivos-fonte. \line A Fig. 6.5 consiste no arquivo de cabe\'e7alho timel \f1\fs8 . \f0\fs18 h em que a classe \f1\fs20 Time \i\f0\'e9 \i0\fs18 declarada. o arquivo timel \f1\fs8 . \fs20 cpp \line\f0\fs18 em que as fun\'e7\'f5es membro da classe Time s\'e3o definidas e o arquivo figO6O5 \f1\fs8 . \f0\fs18 cpp em que a fun\'e7\'e3o main \i\fs20\'e9 \i0\fs18 definida. A sa\'edda deste programa \'e9 id\'eantica \'e0 do programa da Fig. 6.3. \line\b\f3\fs16 1 \b0\i\fs22 II \b\i0\fs16 Fig. 6.5: timel.h \line 2 \b0\i\f0\fs18 1/ \b\i0\f3\fs16 Declara\'e7\'e3o da classe Time \line 3 \b0\i\fs22 II \b\i0\fs16 As fun\'e7\'f5es membro s\'e3o definidas em timel.cpp \line 4 \line 5 \b0\i\fs22 II \b\i0\fs16 evita inclus\'f5es m\'faltiplas de arquivo de cabe\'e7alho \line 6 #ifndef TIME1H \line 7 #define TIME1H \b0\f0\fs24\par
\b\fs14 23 \line\f3 24 \line 25 \line 26 \line 27 using std::cout; \line 28 \b0\f0\fs24\par
\fs20 aa tipo \f1 cie teiro para \f0\fs24\par
\fs20 Isso torna enta\'e7\'e3o da inalterada \line\i\fs18 1iente que t\'f3tipos de ni\'e7\'f5es das \i0\fs24\par
\b\f3\fs14 8 \line 9 \line\f0 lo \line\f3 11 \line 12 \line 13 \line 14 \line 15 \line 16 \line 17 \line 18 \line 19 \line 20 \line 21 \b0\f0\fs24\par
\i\f3\fs22 II \b\i0\fs16 Defini\'e7\'e3o do tipo de dados abstrato Time class Time \line\b0\f0\fs20 public: \line\b\f3\fs16 Time(); \line void setTime( int, int, int ); void printMilitary(); \line void printStandard(); \line private: \line int hour; \line int minute; \line int second; \b0\f0\fs24\par
\b\fs14\}; \b0\fs24\par
\i\f3\fs22 II \b\i0\fs16 construtor \line\b0\i\fs22 II \b\i0\fs16 inicializa hora, minuto, segundo \line\b0\i\fs22 II \b\i0\fs16 imprime no formato de hora militar \line\b0\i\fs22 II \b\i0\fs16 imprime no formato de hora padrao \b0\f0\fs24\par
\i\f3\fs22 II \i0\fs24 o \f1\fs8 - \b\f3\fs16 23 \line\b0\i\fs22 II \i0\f1\fs20 o \fs8 - \b\f3\fs16 59 \line\b0\i\fs22 II \i0\f1\fs20 o \fs8 - \b\f3\fs16 59 \b0\f0\fs24\par
\b\f3\fs16 22 #endif \b0\f0\fs24\par
\f1\fs16 Fig. 6.5 Separando a interface da classe \b\f0 Time \b0\f1 da implementa\'e7\'e3o \fs8 - \b\f0\fs16 timel \b0\f1\fs8 . \b\f0\fs16 h. \b0\fs24\par
\i\f3\fs22 II \b\i0\fs16 Fig. 6.5: timel.cpp \line\b0\i\fs22 II \b\i0\fs16 Defini\'e7\'f5es das fun\'e7\'f5es membro para a classe Time #include <iostream> \b0\f0\fs24\par
\b\f3\fs16 29 #include \ldblquote timel.h \line 30 \line 31 \b0\i\f0\fs18 1/ \i0\f3\fs24 o \b\fs16 construtor de Time inicializa cada membro de dados com zeros. \b0\f0\fs24\par
\f1\fs18 Fig. 6.5 Separando a intertace da classe \f0\fs16 Time \f1\fs18 da implementa\'e7\'e3o \fs8 - \b\f0\fs16 timel \b0\f1\fs8 . \fs18 cpp (parte 1 de 2). \f0\fs24\par
\b\f1\fs20 410 \b0\fs28 c++ \f0\fs14 COMO PROGRAMAR \line\f3\fs16 32 \i\fs22 II \i0\fs16 Para \fs10 que \fs16 todos os objetos do tipo Time comecem em um estado consistente. \line 33 Time::Time() \b\f1\fs20\{ \b0\f3\fs16 hour \f1\fs10 = \f3\fs16 minute \f1\fs10 = \f3\fs16 second \f1\fs10 = \f3\fs16 O;\} \line 34 \line 35 \i\fs22 II \i0\fs16 Inicializa um novo valor do tipo Time usando hora militar. Testa a \line 36 \i\fs22 /1 \i0\fs16 validade dos dados. Inicializa valores inv\'e1lidos com zeros. \line 37 void Time::setTime( int h, int m, int s \line 38 \b\f1\fs20\{ \line\b0\f3\fs16 39 hour \f1\fs10 = \f3\fs16 (h>=O &&h<24 \b\f1\fs20 ) \b0\f3\fs16 ?h :0; \line 40 minute \f1\fs10 = \b\fs20 ( \b0\f3\fs16 m \f0\fs14 >= \f3\fs16 O && m < 60 \b\f1\fs20 ) \b0\f0\fs14 ? \f3\fs16 m : 0; \line 41 second \f0\fs14 = \b\f1\fs20 ( \b0\f3\fs16 s \f0\fs14 >= \f3\fs16 O && s < 60 \b\f1\fs20 ) \b0\f0\fs14 ? \f3\fs16 s : 0; \line 42 \b\f1\fs20 ) \line\b0\f3\fs16 43 \line 44 \i\fs22 II \i0\fs16 Imprime Time no formato militar \line 45 void Time: :printNilitary() \line 46 \b\f1\fs20\{ \line\b0\f0\fs14 47 cout \f1\fs20\'ab \b ( \b0\f0\fs16 hour < 10 ? \ldblquote 0\rdblquote  : \f1\fs8\ldblquote\ldblquote  \b\fs20 ) \b0\'ab \f0\fs16 hour \'ab \f3\fs10 :\ldblquote  \line\fs16 48 \'ab \b\f1\fs20 ( \b0\f3\fs16 minute < 10 ? \lquote 0\rdblquote  : \fs10\ldblquote  \b\f1\fs20 ) \b0\'ab \f3\fs16 minute; \line 49 \b\f1\fs20\} \line\b0\f3\fs16 50 \line 51 \b\f1\fs20 // \b0\f3\fs16 Imprime hora no formato padr\'e3o \line 52 void Time: :printStandard() \line\f0 53 \b\f1\fs20\{ \line\b0\f3\fs16 54 cout\'ab \b\f1\fs20 ( ( \b0\f3\fs16 hour \f0\fs14 == \f3\fs16 O hour \f0\fs14 == \f3\fs16 12 \b\f1\fs20 ) \b0\f0\fs14 ? \f3\fs16 12 : hour % 12 \line\f0 55 \'ab \f3\fs10\ldblquote :\ldblquote  \f1\fs20\'ab \b ( \b0\f0\fs16 minute < 10 ? \ldblquote 0\rdblquote  : \f1\fs10\ldblquote  \b\fs20 ) \b0\'ab \f0\fs16 minute \line 56 \'ab \f3\fs10\ldblquote :\ldblquote  \f1\fs20\'ab \b ( \b0\f0\fs16 second < 10 ? \ldblquote 0\rdblquote  : \f1\fs10\ldblquote  \b\fs20 ) \b0\'ab \f0\fs16 second \line\f3 57 \'ab \b\f1\fs20 ( \b0\f3\fs16 hour < 12 ? da manh\'e3\rdblquote  : \fs10\ldblquote  \fs16 da tarde\rdblquote  ); \line 58 \b\f1\fs20\} \line\b0 Fig. 6.5 Separando a inter\'edace da classe \f0\fs16 Time \f1\fs20 da implementa\'e7\'e3o \fs8 - \f0\fs16 timel \f1\fs8 . \fs20 cpp (parte 2 de 2). \line\f3\fs16 59 \i\fs22 II \i0\fs16 Fig. 6.5: figO6O5.cpp \line 60 \i\fs22 II \i0\fs16 Programa para testar a classe Timel \line 61 \i\fs22 /1 \i0\fs16 NOTA: Compilar com timel.cpp \line 62 #include <iostream> \line 63 \line 64 using std::cout; \line 65 using std::endl; \line 66 \line 67 #include \ldblquote timel.h\rdblquote  \line 68 \line 69 \i\fs22 II \i0\fs16 Programa para testar a classe Time simples \line 70 int maia O \line\f0 71 \b\f1\fs20\{ \line\b0\f3\fs16 72 Time t; \i\fs22 II \i0\fs16 instancia o objeto t da classe Time \line 73 \line 74 cout \'ab A hora militar inicial \'e9 \f1\fs10\lquote ; \line\f3\fs16 75 t.printNilitary(); \line 76 cout \'ab \ldblquote\\nA hora padr\'e3o inicial \'e9 \line 77 t.printStandard(); \line 78 \line 79 t.setTime( 13, 27, 6 \b\f1\fs20 ) \line\b0\f3\fs16 80 cout \'ab \\n\\nHora militar depois de setTime \'e9 \f1\fs10\ldblquote ; \line\f3\fs16 81 t.printNilitary(); \line 82 cout \'ab \ldblquote\\nHora padr\'e3o depois de setTime \'e9 \line 83 t.printStandard O; \line 84 \line\f1\fs20 Fig. 6.5 Separando a interface da classe \f0\fs16 Time \f1\fs20 da implementa\'e7\'e3o \fs8 - \fs20 figo6_05 \fs8 . \fs20 cpp (parte 1 de 2). \f0\fs24\par
\b\fs14 CAP\'cdTULO \b0\f1\fs20 6 \fs8 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs22 411 \line\f3\fs16 risistente. 85 t.setTime( 99, 99, 99 \b0\f1\fs20 ) \b\f0\fs14 ; \b0\i\f3\fs20 II \b\i0\fs16 tenta inicializa\'e7\'e3o inv\'e1lida \line 86 cout \b0\i\f0\fs18\'ab \b\i0\f3\fs16\ldblquote\\n\\nAp\'f3s tentar inicializa\'e7\'e3o inv\'e1lida:\\n\rdblquote  \line 87 \b0\i\f0\fs18\'ab \b\i0\f3\fs16\ldblquote Hora militar: \b0\f1\fs10\ldblquote ; \line\b\f3\fs16\lquote esta a 88 t.printMilitary(); \line 89 cout \'ab \\nHora padr\'e3o: \f0\fs14 ; \line\f3\fs16 90 t.printStandard(); \line 91 cout \'ab endi; \line 92 return O; \line 93 \line A hora militar inicial \'e9 00:00 \line A hora padr\'e3o inicial \'e9 12:00:00 da manh\'e3 \line Hora militar depois de setTime \'e9 13:27 \line Hora padr\'e3o depois de setTime \'e9 1:27:06 PM \line Depois de tentar inicializa\'e7\'e3o inv\'e1lida: \line Hora militar: 00:00 \line Hora padr\'e3o: 12:00:00 da manh\'e3 \b0\fs40 1 \line\f1\fs20 Fig. 6.5 Separando a interface da classe \f0\fs18 Time \f1\fs20 da implementa\'e7\'e3o \fs8 - \fs20 figO6O5 \fs8 . \fs20 cpp (parte 2 de 2). \line\f0\fs18 Note que a declara\'e7\'e3o da classe est\'e1 inclusa no seguinte c\'f3digo para o pr\'e9-processador: \line\i\f3\fs20 II \b\i0\fs16 evita inclus\'f5es m\'faltiplas de arquivo de cabe\'e7alho \line #ifndef TIME1H \line #define TIME1H \line\b0\f1\fs20 Je 2). \line\b\f3\fs16 #endif \line\b0\f1\fs24 Q \f0\fs18 uando construirmos programas maiores, outras defini\'e7\'f5es e declara\'e7\'f5es tamb\'e9m ser\'e3o colocadas em arquivos de cabe\'e7alho. As diretivas para o pr\'e9-processador precedentes evitam que o c\'f3digo entre #ifndef e #endif seja inclu\'eddo novamente no programa se o nome TIME1Hj\'e1 foi definido. Se o cabe\'e7alho ainda n\'e3o foi inclu\'eddo em um arquivo, o nome TI1H \'e9 definido pela diretiva #define e os comandos do arquivo de cabe\'e7alho s\'e3o inclu\'eddos. Se o cabe\'e7alhoj\'e1 foi inclu\'eddo anteriormente, TIlHj\'e1 est\'e1 definido e o arquivo de cabe\'e7alho n\'e3o \'e9 inclu\'eddo novamente. As tentativas de incluir (inadvertidamente) v\'e1rias vezes um arquivo de cabe\'e7alho acontecem tipicamente em programas grandes, com muitos arquivos de cabe\'e7alho, os quais, eles mesmos, podem incluir outros arquivos de cabe\'e7alho. Nota: a conven\'e7\'e3o que usamos para o nome constante simb\'f3lico nas diretivas para o pr\'e9-processador \'e9 simplesmente o nome do arquivo de cabe\'e7alho com o caractere sublinhado \b\fs14 (_) \b0\fs18 substituindo o ponto. \line\f2\fs78\'ae \ul\i\f0\fs18 Dica de teste e depura\'e7\'e3o 6.2 \ulnone\line Use as diretivas para o pr\'e9-processador \i0 #ifndef, #define \i e \i0 #endif \i para evitar que arquivos de \line cabe\'e7alho sejam inclu\'eddos mais de uma vez em um programa. \line\ul Boa pr\'e1tica de programa\'e7\'e3o 6.2 \ulnone\line Use o nome do arquivo de cabe\'e7alho com o ponto substitu\'eddo por um sublinhado nas diretivas para o pr\'e9- \line processador \i0 #ifndef \i e \i0 #define \i de um arquivo de cabe\'e7alho. \line\b\i0\f1\fs26 6.8 Controlando o acesso a membros \line\b0\f0\fs18 Os especiticadores de acesso a membro public e private (e protected. como veremos no Cap\'edtulo 9, \ldblquote Heran\'e7a\rdblquote ) s\'e3o usados para controlar o acesso a membros de dados e fun\'e7\'f5es membro de uma classe. O modo de acesso default para classes \'e9 private: assim, todos os membros depois do cabe\'e7alho da classe e antes do primeiro especificador de acesso a membro s\'e3o private. Ap\'f3s cada especificador de acesso a membro, o modo que foi \line\f1\fs20 1 de 2). \f0\fs18 invocado por esse especificador de acesso a membro se aplica at\'e9 o pr\'f3ximo especificador de acesso a membro ou \fs24\par
\b\f1\fs22 412 \b0\fs28 c++ \b\fs14 COMO PROGRAMAR \line\b0\f0\fs18 at\'e9 a chave \'e0 direita de t\'e9rmino \b\f1\fs22 ( \} ) \b0\f0\fs18 da defini\'e7\'e3o da classe. Os especificadores de acesso a membro public, private e protected podem ser repetidos, por\'e9m tal uso \'e9 raro e pode ser confuso. \line Os membros privados de uma classe podem ser acessados somente por fun\'e7\'f5es membro (e friends, como \line veremos no Cap\'edtulo 7) dessa classe. Os membros public de uma classe podem ser acessados por qualquer fun\'e7\'e3o no programa. \line O prop\'f3sito prim\'e1rio dos membros public \'e9 apresentar aos clientes da classe uma vis\'e3o dos \i servi\'e7os \i0 (com- portamentos) que a classe oferece. Este conjunto de servi\'e7os forma a \i interface p\'fablica \i0 (public) da classe. Os clientes da classe n\'e3o precisam se preocupar com a forma como a classe realiza suas tarefas. Os \i membros privados \i0 (private) de uma classe, assim como as defini\'e7\'f5es de suas fun\'e7\'f5es membro p\'fablicas, n\'e3o s\'e3o acess\'edveis aos clientes de uma classe. Esses componentes formam a \i implementa\'e7\'e3o \i0 da classe. \line\b\i\fs20 Observa\'e7\'e3o de engenharia de software 6.13 \line\b0\i0\f1\fs8 ______ \i\fs28 c++ \f0\fs18 encoraja a constru\'e7\'e3o de programas que sejam independentes da implementa\'e7\'e3o. Quando muda a implementa\'e7\'e3o de uma classe usada por c\'f3digo independente de implementa\'e7\'e3o, aquele c\'f3digo n\'e3o necessita ser modificado. Se qualquer parte da interface da classe muda, o c\'f3digo independente de implementa\'e7\'e3o precisa ser recompilado. \line\b\fs20 Erro comum de programa\'e7\'e3o 6.6 \line\b0\fs18 Uma tentativa por uma fun\'e7\'e3o que n\'e3o \'e9 um membro de uma classe particular (ou um \i0 friend \i dessa \line classe) de acessar um membro privado dessa classe \'e9 um erro de sintaxe. \line\i0 A Fig. 6.6 demonstra que membros de classe private s\'f3 s\'e3o acess\'edveis atrav\'e9s da interface p\'fablica da classe \line usando fun\'e7\'f5es membro public. Quando este programa \'e9 compilado, o compilador gera dois erros. declarando \line que o membro private especificado em cada comando n\'e3o est\'e1 acess\'edvel. A Fig. 6.6 faz a inclus\'e3o de timel \f1\fs8 . \f0\fs18 h \line e \'e9 compilada com timel \f1\fs8 . \f0\fs18 cpp da Fig. 6.5. \line\b\i\fs20 Boa pr\'e1tica de programa\'e7\'e3o 6.3 \line\b0\fs18 Se voc\'ea optarpor listar os membros \i0 private \i primeiro, em uma defini\'e7\'e3o de classe, use explicitamente o espec(ficador de acesso a membro \i0 private, \i apesar dofato de que \i0 private \'e9 \i assumido por default. Isso melhora a clareza do programa. Nossa prefer\'eancia \'e9 listar primeiro os membros \i0 public \i de uma classe para enfatizar a interface da classe. \line\b\i0\f3\fs16 1 \b0\i\fs22 II \b\i0\fs16 Fig. 6.6: figO6O6.cpp \line 2 \b0\i\fs22 /1 \b\i0\fs16 Demonstra erros resultantes de tentativas \line 3 \b0\i\fs22 II \b\i0\fs16 para acessar membros private de classes. \line 4 #include <iostreain> \line 5 \line 6 using std: :cout; \line 7 \line 8 #include \ldblquote timel.h \line 9 \line\b0\fs18 lo \b\fs16 int main \b0\fs20 O \line 11 \b\f1\fs22\{ \line\f3\fs16 12 Time t; \line 13 \line 14 \b0\i\fs22 II \b\i0\fs16 Erro: \lquote Time: :hour\rquote  n\'e3o est\'e1 acess\'edvel \line 15 t.hour \b0\f1\fs12 = \b\f3\fs16 7; \line 16 \line 17 \b0\i\fs22 II \b\i0\fs16 Erro: \lquote Time::minute\rquote  n\'e3o est\'e1 acess\'edvel \line 18 cout \'ab \ldblquote minuto \b0\f1\fs10 = \ldblquote  \b\f3\fs16\'ab t.minute; \line 19 \line 20 return O; \line 21 \f1\fs22\} \line Fig. 6.6 \b0\fs20 Tentativa err\'f4nea de acessar membros private de uma classe (parte 1 de 2). \f0\fs24\par
\b\fs14 CAP\'cdTULO \b0\i\fs20 6 \i0\f1\fs8 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \b0\f1\fs20 413 \f0\fs24\par
\f1\fs20 Fig. 6.6 Tentat\'edva err\'f4nea de acessar membros \f0\fs18 private \f1\fs20 de uma classe (parte 2 de 2). \line\i\f0 Boa pr\'e1tica de programa\'e7\'e3o 6.4 \line Apesar dofato de que os especificadores de acesso a membro \i0\fs18 public \i e \i0 private \i podem ser repetidos e misturados, liste todos os membros \i0 public \i de uma classe em um grupoprimeiro e ent\'e3o liste todos os membros \i0 private \i em outro grupo. Issofocaliza a aten\'e7\'e3o do cliente sobre a interfacep\'fablica da classe, em vez de sobre a implementa\'e7\'e3o da classe. \line Observa\'e7\'e3o de engenharia de software 6.14 \line\i0\f1\fs8 ______ \i\f0\fs18 Mantenha todos os membros de dados de uma classe \i0 private. \i Forne\'e7afun\'e7\'f5es membro \i0 public \i para inicializar os valores dos membros de dados \i0 private \i e obter os valores dos membros de dados \i0 private. \line\i Esta arquitetura ajuda a esconder a implementa\'e7\'e3o de uma classe de seus clientes, o que reduz bugs e aumenta afacilidade do programa ser modificado. \line\i0 Um cliente de uma classe pode ser uma fun\'e7\'e3o membro de outra classe ou pode ser uma fun\'e7\'e3o global (i.e., uma fun\'e7\'e3o ao estilo de C \ldblquote solta\rdblquote  ou \ldblquote livre\rdblquote  no arquivo e que n\'e3o \'e9 uma fun\'e7\'e3o membro de qualquer classe). \line\f1\fs28 o \f0\fs18 acesso default a membros de uma classe \'e9 private. O acesso a membros de uma classe pode ser explicitamente inicializado com public, protected (como veremos no Cap\'edtulo 9) ou private. O acesso default a membros de struct \'e9 pub].ic. O acesso a membros de uma struct tamb\'e9m pode ser explicitamente inicializado com public, protected ou private. \line\i\fs20 Observa\'e7\'e3o de engenharia de software 6.15 \line\i0\f1\fs8 ______ \i\f0\fs20 Os projetistas de classes usam membros \i0\fs18 private, protected \i e \i0 publie \i para garantir a no\'e7\'e3o de oculta\'e7\'e3o de informa\'e7\'f5es e seguir o princ\'edpio do m\'ednimo privil\'e9gio. \line\i0\f1\fs20 S\'f3 \f0\fs18 porque dados de classe s\'e3o private n\'e3o significa necessariamente que os clientes n\'e3o possam fazer mudan\'e7as nesses dados. Os dados podem ser mudados atrav\'e9s de fun\'e7\'f5es membro ou, ainda, por friends daquela classe. Como veremos, estas fun\'e7\'f5es devem ser projetadas visando-se a assegurar a integridade dos dados. \line O acesso a dados private de uma classe deveria ser cuidadosamente controlado pelo uso de fun\'e7\'f5es membro chamadas de \i fun\'e7\'f5es de accesso \i0 (tamb\'e9m chamadas de \i accessor methods). \i0 Por exemplo, para permitir aos clientes ler o valor de dados private, a classe pode oferecer uma fun\'e7\'e3o \i get. \i0 Para permitir aos clientes modificar \fs24\par
\fs16 riO \line\fs18 ao \fs24\par
\i\fs16 Mensagens de erro do compilador Borland C+ \b\i0\fs14 + \b0\i\fs16 com linha de comando \i0\fs24\par
\b\fs14 ii- \line\b0\i\fs18 os \line\i0\fs16 os \fs24\par
\b\f3\fs14 Timel \b0\f1\fs8 . \b\f3\fs14 cpp: \line Fig0606 \b0\f1\fs8 . \b\f3\fs14 cpp: \line Error E2247 figO6O6.cpp 15: \line\lquote Time: :hour\rquote  is not accessible in function main() Error E2247 figO6_06.cpp 18: \line\lquote Time::minute\rquote  is not accessible in function main()) \line\b0\f1\fs12 *** \b\f3\fs14 2 errors in Compile \line\b0\i\f0\fs18 Mensagens de erro do compilador Microsofi Visual C+ \b\i0\fs14 + \b0\fs24\par
\i\fs18 a \line e- \line\fs20 le \i0\fs24\par
\fs20 Compiling \f1\fs8 ... \line\b\f3\fs14 FigO6_06 \b0\f1\fs8 . \b\f3\fs14 cpp: \line D:\\figO6O6.cpp(15) : error C2248: \lquote hour\rquote  : cannot access private member declared in class \lquote Time\rquote  \line D:\\FigO6_06\\timel.h(18) : see declaration of \lquote hour\rquote  \line D:\\FigO6_06.cpp(18) : error C2248: \lquote minute\rquote  : cannot access private member declared in class \lquote Time\rquote  \line D:\\timel.h(19) : see declaration of \lquote minute\rquote  \line Error executing cl.exe. \line test.exe \b0\f1\fs8 - \b\f3\fs14 2 error(s) \b0\f1\fs8 , \b\f3\fs14 O warning(s) \b0\f0\fs24\par
\fs20 se lo \fs24\par
\i\fs18 te Ir. \i0\fs24\par
\b\f1\fs20 414 \b0\fs28 c++ \b\f0\fs14 COMO PROGRAMAR \line\b0\f1\fs20 dados \f0\fs18 private. a classe pode oferecer uma fun\'e7\'e3o \i set. \i0 Tal modifica\'e7\'e3o pode parecer que viola a no\'e7\'e3o de dados private. Mas uma fun\'e7\'e3o membro \i set \i0 pode oferecer recursos para a valida\'e7\'e3o de dados (tal como uma verifica\'e7\'e3o de intervalo de validade) para assegurar que o valor seja corretamente inicializado. Uma fun\'e7\'e3o \i set \i0 pode tamb\'e9m fazer a tradu\'e7\'e3o entre a forma dos dados usados na interface e a forma usada na implementa\'e7\'e3o. Uma fun\'e7\'e3o \i get \i0 n\'e3o necessita expor os dados em seu formato \ldblquote bruto\rdblquote ; em vez disso, a fun\'e7\'e3o \i get \i0 pode editar os dados e limitar a vis\'e3o deles que o cliente ter\'e1. \line\i Observa\'e7\'e3o de engenharia de software 6.16 \line\i0\f1\fs12 ______ \i\f0\fs18 O projetista de classes n\'e3o necessitafornecerfun\'e7\'f5es \i0 set \i e/ou \i0 get \i para cada item de dados \i0 private; \i esses recursos devem serfornecidos somente quando for apropriado. Se o servi\'e7o \'e9 \'fatil para o c\'f3digo \line cliente, esse servi\'e7o deve ser inclu\'eddo na interface \i0 public \i da classe. \line\i0\f2\fs80\'ae \i\f0\fs18 Dica de teste e depura\'e7\'e3o 6.3 \line Tornar os membros de dados de uma classe \i0 private \i e asfun\'e7\'f5es membro da classe pub].icfacilita a depura\'e7\'e3o porque os problemas com manipula\'e7\'f5es de dados ficam restritos ou a fun\'e7\'f5es membro da classe ou a \i0 friends \i da classe. \line\b\i0\f1\fs26 6.9 Fun\'e7\'f5es de acesso e fun\'e7\'f5es utilit\'e1rias \line\b0\f0\fs18 Nem todas as fun\'e7\'f5es membro necessitam ser tornadas public para atuar como parte da interface de uma classe. Algumas fun\'e7\'f5es membro permanecem private e servem \i comofun\'e7\'f5es utililit\'f3rias \i0 para as outras fun\'e7\'f5es da classe. \line\i Observa\'e7\'e3o de engenharia de software 6.17 \line Fun\'e7\'f5es membro tendem a se enquadrar em v\'e1rias categorias diferentes: fun\'e7\'f5es que l\'eaem e retornam o \line valor de membros de dados \i0 private: \i fun\'e7\'f5es que inicializam o valor de membros de dados \i0 private: \line\i\fs26 f \fs18 un\'e7\'f5es que implementam os servi\'e7os da classe; efun\'e7\'f5es que executam v\'e1rias tarefas mec\'e2nicas para a \line classe, tais como inicializar objetos da classe, atribuir a objetos da classe, fazer a convers\'e3o entre classes \line e tipos primitivos ou entre classes e outras classes e administrar a mem\'f3ria para objetos da classe. \line\i0 As fun\'e7\'f5es de acesso podem ler ou exibir dados. Outro uso comum das fun\'e7\'f5es de acesso \'e9 testar a verdade ou falsidade de condi\'e7\'f5es \f1\fs8 - \f0\fs18 tais fun\'e7\'f5es s\'e3o freq\'fcentemente denominadasfun\'e7\'f5es \i predicado. \i0 Um exemplo de uma fun\'e7\'e3o predicado seria uma fun\'e7\'e3o isEmpty para uma classe cont\'eainer qualquer \f1\fs8 - \f0\fs18 uma classe capaz de manter muitos objetos \f1\fs8 - \f0\fs18 tal como uma lista encadeada, uma pilha ou uma fila. Um programa testaria isEmpty antes de tentar ler outro item do objeto cont\'eainer. Uma fun\'e7\'e3o predicado isFuil poderia testar um objeto de uma classe cont\'eainer para determinar se ele n\'e3o tem mais espa\'e7o para novos items. Um conjunto de fun\'e7\'f5es predicado \'fateis para nossa classe Time poderia ser isAN e isPM. \line A Fig. 6.7 demonstra a no\'e7\'e3o de \i umafun\'e7\'e3o utilit\'e1ria \i0 (tamb\'e9m chamada \i defun\'e7\'e3o auxiliar). \i0 Uma fun\'e7\'e3o utilit\'e1ria n\'e3o faz parte da interface de uma classe; por\'e9m, \'e9 uma fun\'e7\'e3o membro private que suporta a opera\'e7\'e3o \f1\fs20 das \f0\fs18 fun\'e7\'f5es membro public da classe. As fun\'e7\'f5es utililit\'e1rias n\'e3o s\'e3o projetadas para serem usadas pelos clientes de uma classe. \fs24\par
\b\f1\fs20 Fig. 6.7 Usando \b0\fs16 uma fun\'e7\'e3o utilit\'e1ria \fs8 - \b\f0\fs16 salesp \b0\f1\fs8 . \b\f0\fs16 h \b0\f1 (parte 1 de 2). \f0\fs24\par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3290\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3699\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5176\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\pard\intbl\b\f3\fs16 1 \b0\f0\fs24\cell\i\f3\fs22 II \b\i0\fs16 Fig. 6.7: salesp.h \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5176\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\pard\intbl\b\f3\fs16 2 \b0\f0\fs24\cell\i\f3\fs22 /1 \b\i0\fs16 Defini\'e7\'e3o da classe SalesPerson \b0\f0\fs24\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3290\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3699\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5176\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\pard\intbl\b\f3\fs16 3 \b0\f0\fs24\cell\i\f3\fs22 II \b\i0\fs16 Fun\'e7\'f5es membro definidas \b0\f0\fs24\cell\b\f3\fs16 em \b0\f0\fs24\cell\b\f3\fs16 salesp.cpp \b0\f0\fs24\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3290\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3699\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5176\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\intbl 4 \b0\f0\fs24\cell\b\f3\fs16 #ifndef SALESPH \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3290\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3699\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5176\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\intbl 5 \b0\f0\fs24\cell\b\f3\fs16 #define SALESPH \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3290\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3699\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5176\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\intbl 6 \b0\f0\fs24\cell\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3290\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3699\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5176\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\intbl 7 \b0\f0\fs24\cell\b\f3\fs16 class SalesPerson \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3290\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3699\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5176\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\intbl 8 \b0\f0\fs24\cell\b\f3\fs16 public: \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3290\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3699\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\pard\intbl\b\f3\fs16 9 \b0\f0\fs24\cell\b\f3\fs16 SalesPersonO; \b0\f0\fs24\cell\cell\i\f3\fs18 II \b\i0\fs16 construtor \b0\f0\fs24\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx373\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3290\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3699\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5176\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7313\pard\intbl\f3\fs22 lo \f0\fs24\cell\b\f3\fs16 void getSalesFromUserO; \b0\f0\fs24\cell\cell\i\f3\fs22 II \b\i0\fs18 l\'ea dados \b0\f0\fs24\cell\b\f3\fs16 de vendas do teclado \b0\f0\fs24\cell\fs20\row
\pard\fs24\par
\pard\sb100\sa240\fs16 CAP\'cdTULO \f1\fs20 6 \fs8 - \f0\fs16 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs20 415 \line\f3\fs16 11 void setSales( int, double ); \i\fs22 II \i0\fs16 Usu\'e1rio fornece dados \line 12 \i\fs22 II \i0\fs16 de vendas de um m\'eas \line 13 void printAnnua1Sa1es \line 15 private: \line 16 double totaiAnnua1Sa1es \f1\fs20 // \f3\fs16 fun\'e7\'e3o utilit\'e1ria \line 17 double sales[ 12 ]; \f1\fs20 // \f3\fs16 12 dados de vendas mensais \line 18 ); \line 19 \line 20 #endif \line\f1\fs20 Fig. 6.7 Usando a fun\'e7\'e3o utilit\'e1ria \fs8 - \fs20 salesp \fs8 . \fs20 h (parte 2 de 2). \line\f3\fs16 21 \f1\fs20 // \f3\fs16 Fig. 6.7: salesp.cpp \line 22 \i\fs22 II \i0\fs16 Fun\'e7\'f5es membro para a classe SalesPerson \line\f0 23 #include <iostream> \line\f3 24 \line 25 using std: :cout; \line 26 using std::cin; \line 27 using std::endl; \line 28 \line 29 4include <iomanip> \line 30 \line 31 using std::setprecision; \line 32 using std: :setiosflags; \line 33 using std::ios; \line 34 \line 35 #include \ldblquote salesp.h\rdblquote  \line 36 \line 37 \i\fs22 II \i0\fs16 Fun\'e7\'e3o construtor inicializa array \line 38 SalesPerson: :SalesPerson() \line 39 \line 40 for \f1\fs20 ( \f3\fs16 int i = 0; i \f0 < \f3 12; i++ \line 41 sales[ i J 0.0; \line 42 \line 43 \line 44 \i\fs22 II \i0\fs16 Fun\'e7\'e3o para obter 12 dados de vendas \line 45 \i\fs22 II \i0\fs16 fornecidos pelo usu\'e1rio pelo teclado \line 46 void SalesPerson: :getSalesFromUser(.) \line 47 \line 48 double salesFigure; \line 49 \line 50 for(inti1;i<=12;i+4-)\{ \line 51 cout \'ab \lquote Digite o volume de vendas para o m\'eas \f1\fs8\ldblquote  \f0\fs16\'ab \f3 i \'ab \f1\fs8\ldblquote  \f0\fs16 : \f1\fs10\ldblquote ; \line\f3\fs16 52 \line 53 cm \'bb salesFigure; \line 54 setSales \f1\fs20 ( \f3\fs16 i \f1\fs8 , \f3\fs16 salesFigure ); \line 55 \f1\fs20 ) \line\f3\fs16 56 \f1\fs20\} \line\f3\fs16 57 \line 58 \i\fs22 1/ \i0\fs16 Fun\'e7\'e3o para inicializar um dos 12 dados de vendas mensais. \line 59 \i\fs22 II \i0\fs16 Note que o valor de m\'eas deve ser de O at\'e9 11. \line 60 void SalesPerson: :setSales \f1\fs20 ( \f3\fs16 int month, double amount \line 61 \f1\fs20\{ \line\f3\fs16 62 if \f1\fs20 ( \f3\fs16 month >= 1 && month <= 12 && amount \f0 > \f3 O \line 63 sales[ month \f1\fs8 - \f3\fs16 1 \f1\fs20 ] \f3\fs16 amount; \i\fs22 /1 \i0\fs16 ajusta para subscritos de O a 11 \line 64 else \line 65 cout \'ab \ldblquote M\'eas ou valor de vendas inv\'e1lido\rdblquote  \'ab endi; \line 66 \f1\fs20\} \line\f3\fs16 67 \line\f1\fs20 Fig. 6.7 Usando uma fun\'e7\'e3o utIit\'e1ria \fs8 - \fs20 salesp \fs8 . \fs20 cpp (parte 1 de 2). \f0\fs24\par
\b\f1\fs20 416 \b0\fs30 c++ \f0\fs14 COMO PROGRAMAR \line\f3\fs16 68 \i\fs20 1/ \i0\fs16 Imprime o total anual de vendas \line 69 void SalesPerson: :printAnnualSales() \line 70 \b\f1\fs20\{ \line\b0\f3\fs16 71 cout \'ab setprecision( 2 \line 72 \'ab setiosflags( ios::fixed \f1\fs26 1 \f3\fs16 ios::showpoint \line 73 \'ab \fs22\ldblquote\\no \fs16 total anual de vendas \'e9: \f0\fs14 $\lquote  \line\f3\fs16 74 \'ab totalAnnualSales() \'ab endl; \line 75 \b\f1\fs20\} \line\b0\f3\fs16 76 \line 77 \i\fs20 1/ \i0\fs16 Fun\'e7\'e3o utilit\'e1ria private para totalizar vendas do ano \line 78 double Salesperson: :totalAnnualSales() \line 79 \b\f1\fs20\{ \line\b0\f3\fs16 80 double total 0.0; \line\f0\fs14 81 \line\f3\fs16 82 for \b\f1\fs20 ( \b0\f3\fs16 int i \f1\fs12 = \f3\fs16 0; i < 12; i++ \line 83 total \f0\fs14 += \f3\fs16 sales[ i ]; \line 84 \line 85 return total; \line 86 \b\f1\fs20\} \line\b0\f0\fs18 Fig. 6.7 \f1\fs20 Usando uma fun\'e7\'e3o utilit\'e1ria \fs8 - \f0\fs18 salesp \f1\fs8 . \fs20 cpp (parte 2 de 2). \line\f0\fs18 A classe SalesPerson tem um array com 12 valores de vendas mensais inicializados pelo constmtorcom zeros \line e preenchidos com valores fornecidos pelo usu\'e1rio atrav\'e9s da fun\'e7\'e3o setSales. A fun\'e7\'e3o membro p\'fablica \line printAnnualSales imprime o total das vendas para os \'faltimos 12 meses. A fun\'e7\'e3o utilit\'e1ria \line totalAnnualSales totaliza os 12 dados de vendas mensais para auxiliar printAnnualSales. A fun\'e7\'e3o \line membro printAnnualSales edita os dados de vendas para o formato de quantia em d\'f3lares. Note que main s\'f3 cont\'e9m uma seq\'fc\'eancia simples de chamadas de fun\'e7\'f5es membro n\'e3o existe nenhuma \line estrutura de controle. \line\f3\fs16 87 \i\fs20 1/ \i0\fs16 Fig. 6.7: f\'edgO6O7.cpp \line 88 \i\fs20 1/ \i0\fs16 Demonstrando uma fun\'e7\'e3o utilit\'e1ria \line 89 \i\fs20 II \i0\fs16 Compila com salesp.cpp \line 90 #include \ldblquote salesp.h\rdblquote  \line 91 \line\f0\fs20 92 int \f3\fs16 main \f0\fs20 O \line\f3\fs16 93 \b\f1\fs20\{ \line\b0\f3\fs16 94 SalesPerson s; \b\f1\fs20 // \b0\f3\fs16 cria objeto s da classe SalesPerson \line 95 \line 96 s.getSalesFromUserO; \i\fs22 II \i0\fs16 note a sequ\'eancia simples do c\'f3digo \line 97 s.printAnnualSalesO; \i\fs22 /1 \i0\fs16 n\'e3o h\'e1 nenhuma estrutura de controle em main \line 98 return 0; \line 99 \b\f1\fs20\} \line\b0\f3\fs16 Digite o voluiie de vendas para o m\'eas 1: 5314.76 \line Digite o volume de vendas para o m\'eas 2: 4292.38 \line Digite o volume de vendas para o m\'eas 3: 4589.83 \line Digite o volume de vendas para o m\'eas 4: 5534 .03 \line Digite o volume de vendas para o m\'eas 5: 4376.34 \line Digite o volume de vendas para o m\'eas 6: 5698.45 \line Digite o volume de vendas para o m\'eas 7: 4439.22 \line Digite o volume de vendas para o m\'eas 8: 5893.57 \line Digite \i\fs18 o \i0\fs16 volume de vendas para o m\'eas 9: 4909.67 \line Digite o volume de vendas para o m\'eas 10: 5123.45 \line Digite o volume de vendas para o m\'eas 11: 4024.97 \line Digite o volume de vendas para o m\'eas 12: 5923.92 \line\fs22 o \fs16 total anual de vendas \'e9: $60120.59 \line\f1\fs20 Fig. 6.7 Usando uma fun\'e7\'e3o utilit\'e1ria \fs8 - \fs20 figO6O7 \fs8 . \f0\fs18 cpp. \fs24\par
\pard\par
\pard\sb100\sa240\fs18 CAP\'cdTULO \b\f1\fs20 6 \b0\fs8 - \b\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \fs20 417 \b0\f0\fs24\par
\b\i\fs20 Observa\'e7\'e3o de engenharia de software 6.18 \line\b0\i0\f1\fs12 ______ \i\f0\fs16 Um fen\'f4meno observado na programa\'e7\'e3o orientada a objetos \'e9 que, uma vez que esteja definida uma classe, criar e manipular objetos daquela classe geralmente envolve apenas efetuar uma seq\'fc\'eancia simples de chamadas a fun\'e7\'f5es membro \i0\f1\fs8 - \i\f0\fs16 poucas, sen\'e3o nenhuma, estruturas de controle s\'e3o necess\'e1rias. Em contraste com isso, \'e9 comum ter-se estruturas de controle na implementa\'e7\'e3o das fun\'e7\'f5es membro de uma classe. \i0\fs24\par
\b\f1\fs26 6.10 Inicializando objetos de classes: construtores \b0\f0\fs24\par
\fs18 Quando um objeto de uma classe \'e9 criado, seus membros podem ser inicializados pela fun\'e7\'e3o \i construtor \i0 daquela classe. Um construtor \'e9 uma fun\'e7\'e3o membro da classe com o mesmo nome da classe. O programador fornece o construtor, que \'e9 ent\'e3o invocado automaticamente toda vez que \'e9 criado (instanciado) um objeto daquela classe. Construtores podem ser sobrecarregados para oferecer v\'e1rias maneiras de inicializar objetos de uma classe. Os membros de dados devem ser inicializados em um construtor da classe, ou ent\'e3o seus valores podem ser \i estabelecidos \i0 mais \'e0 frente, depois de o objeto ser criado. Entretanto, \'e9 considerada uma boa pr\'e1tica de programa\'e7\'e3o e engenharia de software assegurar que um objeto seja completamente inicializado antes que o c\'f3digo cliente invoque as fun\'e7\'f5es membro do objeto. Em geral, voc\'ea n\'e3o deve confiar no c\'f3digo cliente para assegurar que um objeto seja inicializado adequadamente. \fs24\par
\b\i\fs20 Erro comum de programa\'e7\'e3o 6.7 \line\b0\fs18 Os membros de dados de uma classe n\'e3o podem ser inicializados na defini\'e7\'e3o da classe. \i0\fs24\par
\b\i\fs20 Erro comum de programa\'e7\'e3o 6.8 \line\b0\fs18 Tentar declarar um tipo de retorno para um construtor e/ou tentar retornar um valor de um construtor s\'e3o \line erros de sintaxe. \i0\fs24\par
\b\i\fs20 Boa pr\'e1tica de programa\'e7\'e3o 6.5 \line\b0\fs18 Quando for apropriado (quase sempre), forne\'e7a um construtor para assegurar que todo objeto seja corretamente inicializado com valores que tenham significado. Em particular membros de dados do tipo ponteiro deveriam ser inicializados com algum valor de ponteiro v\'e1lido ou com O. \i0\fs24\par
\f2\fs78\'ae \b\i\f0\fs20 Dica de teste e depura \'e7\'e3o 6.4 \line\b0 Toda fun\'e7\'e3o membro (e \i0 friend) \i que modifica membros de dados \i0 private \i de um objeto deve assegurar que os dados permane\'e7am em um estado consistente. \i0\fs24\par
\fs18 Quando um objeto de uma classe \'e9 declarado, podem ser fornecidos \i inicializadores \i0 entre par\'eanteses, \'e0 direita do nome do objeto e antes do ponto-e-v\'edrgula. Esses inicializadores s\'e3o passados como argumentos para o construtor da classe. Logo veremos v\'e1rios exemplos dessas \i chamadas \i0 para um \i construtor. \i0 [Nota: embora os programadores n\'e3o chamem explicitamente construtores, os programadores ainda podem fornecer dados que s\'e3o passados para construtores como argumentosi. \fs24\par
\b\f1\fs26 6.11 Usando argumentos default com construtores \b0\f0\fs24\par
\fs18 O construtor de timel \f1\fs8 . \f0\fs18 cpp (Fig. 6.5) inicializou hour. minute esecond com O (i.e., meia-noite em hora militar). Construtores podem conter argumentos default. A Fig. 6.8 redefine a fun\'e7\'e3o construtor de Time para incluir par\'e2metros default com valor zero para cada vari\'e1vel. Fornecer par\'e2metros default ao construtor faz com que. ainda que nenhum valor seja fornecido em uma chamada para o construtor, o objeto ainda tenha assegurada uma inicializa\'e7\'e3o em um estado consistente, devido aos par\'e2metros default. Um construtor fornecido pelo programador \f1\fs8 - \f0\fs18 que torna default todos os seus par\'e2metros (ou que n\'e3o exija explicitamente nenhum argumento) \'e9 tamb\'e9m um \i construtor default, \i0 i.e., um construtor que pode ser invocado sem par\'e2metros. Pode haver somente um construtor default por classe. \fs24\par
\f1\fs22 418 C++ \fs16 COMO PROGRAMAR \f0\fs24\par
\f3\fs16 1 \i\f1\fs20 II \i0\f3\fs16 Fig. 6.8: time2.h \line 2 \i\f1\fs22 II \i0\f3\fs16 Declara\'e7\'e3o da classe Time \line 3 \i\f1\fs20 II \i0\f3\fs16 Fun\'e7\'f5es membros s\'e3o definidas em time2.cpp \line 4 \line\f1\fs32 1 \f3\fs16 5 \i\f1\fs22 II \i0\f3\fs16 diretivas para o pr\'e9-processador \f0\fs12 que \f3\fs16 evitam \line 6 \f1\fs22 // \f3\fs16 inclus\'f5es m\'faltiplas de arquivos de cabe\'e7alho \line 7 #ifndef TIME2H \line 8 #define TIME2H \line\f1\fs12 - \f3\fs16 9 \line 10 \i\f1\fs20 II \i0\f3\fs16 Defini\'e7\'e3o do tipo de dados abstrato Time \line 11 class Time \line 12 public: \line 13 Time( int \f1\fs12 = \f3\fs16 0, int \f1\fs12 = \f3\fs16 0, int =0 ); \f1\fs22 // \f3\fs16 construtor default \line 14 void setTime( int, int, int ); \f1\fs22 // \f3\fs16 inicializa hora, minuto, segur \line 15 void printMilitaryQ; \i\f1\fs20 II \i0\f3\fs16 imprime hora no formato nilit \line 16 void printStandardQ; \f1\fs22 // \f3\fs16 imprime hora no formato padr\'e3 \line 17 private: \line 18 inthour; //0-23 \line 19 int minute; \f1\fs22 // \f3\fs16 O \f1\fs8 - \f3\fs16 59 \line 20 int second; \f1\fs22 // \f3\fs16 O \f1\fs8 - \f3\fs16 59 \line 21 \}; \line 22 \line 23 #endif \line\f1\fs20 Fig. 6.8 Usando um construtor com argumentos default \fs8 - \fs20 time2 \fs8 . \fs20 h. \line\f3\fs16 24 \f1\fs22 // \f3\fs16 Fig. 6.8: time2.cpp \line 25 \f1\fs22 // \f3\fs16 Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe Time \line 26 #include <iostream> \line 27 \line 28 using std::cout; \line 29 \line 30 #include \ldblquote time2.h\rdblquote  \line 31 \line 32 \f1\fs22 // \f3\fs16 Construtor de Time inicializa cada membro de dados com zeros \line 33 \f1\fs22 // \f3\fs16 Garante \f0\fs12 que \f3\fs16 todos os objetos do tipo Tine comecem em um estado consisteM \line 34 Time: :Time( int hr, int mi int sec \line 35 \f1\fs22\{ \f3\fs16 setTime( hr, mi sec ); \line 36 \line 37 \f1\fs22 // \f3\fs16 Inicializa um novo valor de Time usando hora militar. Faz testes d \line 38 \f1\fs22 // \f3\fs16 validade com os valores de dados. Inicializa valores inv\'e1lidos com zej \line 39 void Time::setTime( int h, int m, int s \line 40 \f1\fs22\{ \line\f3\fs16 41 hour =(h>=0 &&h<24 \f1\fs22 ) \f3\fs16 ?h :0; \line 42 minute (m>0&&m<60) ?m: 0; \line 43 second \f1\fs12 = \fs22 ( \f3\fs16 s \f1\fs12 >= \f3\fs16 O && s < 60 \f1\fs22 ) \f3\fs16 ? s : 0; \line 44 \f1\fs22\} \line\f3\fs16 45 \line 46 \f1\fs22 // \f3\fs16 Imprime Time no formato militar \line 47 void Time::printNilitary() \line 48 \f1\fs22\{ \line 4 \f3\fs16 49 \f0 cout\'ab \f1\fs22 ( \f3\fs16 hour <10 ? \f0\fs18\ldblquote 0\rdblquote  \f3\fs16 : \b\f1\fs8\ldblquote  \b0\fs22 ) \f3\fs16\'ab hour \'ab \f0\fs12\ldblquote :\ldblquote  \line\f3\fs16 50 \'ab \f1\fs22 ( \f3\fs16 minute < 10 ? \ldblquote 0\rdblquote  \f0 : \b\f2\fs8\ldblquote  \b0\f1\fs22 ) \f3\fs16\'ab \f0 minute; \line\f3 51 \f1\fs22\} \line\f3\fs16 52 \line 53 \f1\fs22 // \f3\fs16 Imprime Time no formato padr\'e3o \line 54 void Time::printStandard() \line 55 \f1\fs22\{ \line\f3\fs16 56 cout \'ab \f1\fs22 ( \f3\fs16 (hour \f1\fs12 == \f3\fs16 O hour \f1\fs12 == \f3\fs16 12) ? 12 : hour % 12 \f0\fs24\par
\f1\fs18 Fig. 6.8 Usando um construtor com argumentos default \fs8 - \fs18 time2 \fs8 . \fs18 cpp (parte 1 de 2). \f0\fs24\par
\f3\fs16 57 \line 58 \line 59 \line 60 \f0\fs24\par
\fs14 CAP\'cdTULO \f1\fs20 6 \fs8 - \f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs20 419 \f0\fs24\par
\fs14\'ab \f1\fs10\lquote :\ldblquote  \f0\fs14\'ab \f1\fs20 ( \f0\fs14 minute < \f3\fs16 10 ? \ldblquote 0\rdblquote  : \f1\fs8\ldblquote  \fs20 ) \f0\fs14\'ab minute \line\'ab \f1\fs10\ldblquote :\ldblquote  \f0\fs14\'ab \f1\fs20 ( \f0\fs14 second < \f3\fs16 10 \f0\fs14 ? \ldblquote 0\rdblquote  : \f1\fs8\ldblquote  \fs20 ) \f0\fs14\'ab second \line\'ab \f1\fs20 ( \f0\fs14 hour < 12 ? \f1\fs10\ldblquote  \f0\fs14 da manh\'e3\rquote  \f1\fs10\ldblquote  \f0\fs14 da tarde\rdblquote  ); \fs24\par
\f1\fs18 Fig. 6.8 Usando um construtor com argumentos default \fs8 - \fs18 time2 \fs8 . \fs18 cpp (parte 2 de 2). \f0\fs24\par
\f3\fs16 61 \i\f1\fs22 II \i0\f3\fs16 Fig. 6.8: figO6O8.cpp \line 62 \i\f1\fs22 II \i0\f3\fs16 Demonstrando \f0 uma \f3 fun\'e7\'e3o \line 63 \i\f1\fs22 II \i0\f3\fs16 construtor default para a classe Time \line 64 #include <iostream> \line 65 \line 66 using std: :cout; \line 67 using std: :endl; \line 68 \line 69 #include \ldblquote time2.h\rdblquote  \line 70 \f0\fs24\par
\f1\fs18 Fig. 6.8 Usando um construtor com argumentos default \fs8 - \fs18 figO 6_08 \fs8 . \fs18 cpp (parte 1 de 2). \f0\fs24\par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\pard\intbl\f3\fs16 71 \f0\fs24\cell\f3\fs16 int \f0\fs24\cell\f3\fs16 main \f1\fs18 O \f0\fs24\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\pard\intbl\f3\fs16 72 \f0\fs24\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\pard\intbl\f3\fs16 73 \f0\fs24\cell\cell\f3\fs16 Time tl, \f1\fs20 // \f3\fs16 usados defaults para todos os argumentos \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 74 \f0\fs24\cell\cell\f3\fs16 t2(2), \f1\fs20 // \f3\fs16 minute e second definidos por default \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 75 \f0\fs24\cell\cell\f3\fs16 t3(21, 34), \i\f1\fs22 II \i0\f3\fs16 second definido por default \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 76 \f0\fs24\cell\cell\f3\fs16 t4(12, 25, 42), \i\f1\fs22 II \i0\f3\fs16 todos os valores especificados \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 77 \f0\fs24\cell\cell\f3\fs16 t5(27, 74, 99); \f1\fs20 // \f3\fs16 todos os valores especificados inv\'e1lidos \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 78 \f0\fs24\cell\cell\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 79 \f0\fs24\cell\cell\f3\fs16 cout \'ab \ldblquote Constru\'eddo com:\\n\rdblquote  \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 80 \f0\fs24\cell\cell\f3\fs16\'ab \ldblquote todos os argumentos definidos por default:\\n \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 81 \f0\fs24\cell\cell\f3\fs16 tl.printNilitaryQ; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 82 \f0\fs24\cell\cell\f3\fs14 cout\'ab \ldblquote\\n \f1\fs10\ldblquote ; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 83 \f0\fs24\cell\cell\f3\fs16 tl.printStandardO; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 84 \f0\fs24\cell\cell\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 85 \f0\fs24\cell\cell\f3\fs16 cout\'ab \ldblquote\\nhora especificada; minuto e segundo definidos por default:\rdblquote  \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 86 \f0\fs24\cell\cell\f3\fs14\'ab \ldblquote\\n \f1\fs10\ldblquote ; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 87 \f0\fs24\cell\cell\f3\fs16 t2.printNilitaryO; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 88 \f0\fs24\cell\cell\f3\fs16 cout \'ab \ldblquote\\n \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 89 \f0\fs24\cell\cell\f3\fs16 t2.printStandard \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 90 \f0\fs24\cell\cell\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 91 \f0\fs24\cell\cell\f3\fs16 cout\'ab \ldblquote\\nhora e minuto especificados; segundo definido por default:\rdblquote  \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 92 \f0\fs24\cell\cell\f3\fs14\'ab \ldblquote\\n \f1\fs10\ldblquote ; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 93 \f0\fs24\cell\cell\f3\fs16 t3.printNilitaryO; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 94 \f0\fs24\cell\cell\f3\fs14 cout\'ab \ldblquote\\n \f1\fs10\ldblquote ; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 95 \f0\fs24\cell\cell\f3\fs16 t3.printStandard \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 96 \f0\fs24\cell\cell\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 97 \f0\fs24\cell\cell\f3\fs16 cout\'ab \ldblquote\\nhora, minuto e segundo especificados:\rdblquote  \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 98 \f0\fs24\cell\cell\f3\fs14\'ab \ldblquote\\n \f1\fs10\ldblquote ; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 99 \f0\fs24\cell\cell\f3\fs16 t4.printMilitaryO; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 100 \f0\fs24\cell\cell\f3\fs16 cout\'ab \ldblquote\\n \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 101 \f0\fs24\cell\cell\f3\fs16 t4.printStandardO; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 102 \f0\fs24\cell\cell\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 103 \f0\fs24\cell\cell\f3\fs16 cout\'ab \ldblquote\\ntodos os valores especificados inv\'e1lidos:\rdblquote  \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 104 \f0\fs24\cell\cell\f3\fs14\'ab \ldblquote\\n \f1\fs10\ldblquote ; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 105 \f0\fs24\cell\cell\f3\fs16 t5.printNilitaryQ; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 106 \f0\fs24\cell\cell\f3\fs14 cout\'ab \ldblquote\\n \f1\fs10\ldblquote ; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 107 \f0\fs24\cell\cell\f3\fs16 t5.printStandardO; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 108 \f0\fs24\cell\cell\f3\fs14 cout \f0\'ab \f3 endl; \f0\fs24\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 109 \f0\fs24\cell\cell\cell\fs20\row
\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 110 \f0\fs24\cell\cell\f3\fs16 return 0; \f0\fs24\cell\fs20\row
\fs14\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx397\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx902\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7648\intbl 111 \fs24\cell\f1\fs20\} \f0\fs24\cell\cell\fs20\row
\pard\fs24\par
\pard\sb100\sa240\b\f1\fs20 420 \b0\f0\fs18 C++ \b\fs14 COMO PROGRAMAR \line\f3\fs18 Constru\'eddo com: \line todos os argumentos definidos por default: \line 00:00 \line 12:00:00 da manh\'e3 \line hora especificada; minuto e segundo definidos por default: \line 02:00 \line 2:00:00 da manh\'e3 \line hora e minuto especificados; segundo definido por default: \line 21:34 \line 9:34:00 da tarde \line hora, minuto e segundo especificados: \line 12:25 \line 12:25:42 da tarde \line todos os valores especificados inv\'e1lidos: \line 00:00 \line 12:00:00 da manh\'e3 \line\f1\fs20 Fig. 6.8 \b0 Usando um construtor com argumentos default \fs8 - \fs20 figO 6_O 8. \b\f0\fs16 cpp \b0\f1\fs20 (parte 2 de 2). \line\f0\fs18 Nesse programa, o \f1\fs20 construtor \f0\fs18 chama a \f1\fs20 fun\'e7\'e3o \f0\fs18 membro setTime com os valores passados para o \f1\fs20 construtor \f0\fs18 (ou os valores default) para garantir que o valor fornecido para hour esteja no intervalo O a 23 e que os valores para minute e second estejam no intervalo O a 59. Se um valor estiver fora do intervalo, ele \'e9 inicializado com zero por setTime (isto \'e9 um exemplo de como garantir que um membro de dados permane\'e7a em um estado consistente). \line Note que o construtor de Time poderia ser escrito de forma a incluir os mesmos comandos que a fun\'e7\'e3o membro setTime. Isto pode ser ligeiramente mais eficiente porque a chamada extra a setTime \'e9 eliminada. Por\'e9m, codificar o construtor de Time e a fun\'e7\'e3o membro setTime de forma id\'eantica torna a manuten\'e7\'e3o deste programa mais dif\'edcil. Se a implementa\'e7\'e3o da fun\'e7\'e3o membro setTime mudar, a implementa\'e7\'e3o do construtor de Time deve mudar em conseq\'fc\'eancia. Fazer o construtor de Time chamar setTime diretamente exige que quaisquer mudan\'e7as na implementa\'e7\'e3o de setTime sejam feitas s\'f3 uma vez. Isto reduz a probabilidade de um erro de programa\'e7\'e3o quando a implementa\'e7\'e3o for alterada. Al\'e9m disso, o desempenho do construtor de Time pode ser melhorado declarando-se o construtor explicitamente inline ou definindo-se o construtor na defini\'e7\'e3o de classe (o que, implicitamente, torna inline a defini\'e7\'e3o da fun\'e7\'e3o). \line\b\i\fs20 Observa\'e7\'e3o de engenharia de software 6.19 \line\b0\i0\f1\fs8 ______ \i\f0\fs18 Se uma fun\'e7\'e3o membro de uma classe j\'e1 oferece toda ou parte da funcionalidade exigida por um construtor (ou outra fun\'e7\'e3o membro) da classe, chame aquela fun\'e7\'e3o membro de dentro do construtor (ou de outra fun\'e7\'e3o membro). isso simpflfica a manuten\'e7\'e3o do c\'f3digo e reduz a probabilidade de um erro se for modificada a implementa\'e7\'e3o do c\'f3digo. Como regra geral: evite repetir c\'f3digo. \line\b\fs20 Boa \b0\fs18 pr\'e1tica de programa\'e7\'e3o \b\fs20 6.6 \line\b0\fs18 Declare valores default para os argumentos de uma fun\'e7\'e3o somente no prot\'f3tipo da fun\'e7\'e3o dentro da \line defini\'e7\'e3o da classe, no arquivo de cabe\'e7alho. \line\b\fs20 Erro \b0\fs18 comum de programa\'e7\'e3o \b\fs20 6.9 \line\b0\fs18 Especificar inicializadores default para a mesma fun\'e7\'e3o membro, tanto em um arquivo de cabe\'e7alho \line como na defini\'e7\'e3o da fun\'e7\'e3o membro. \line Nota: \i0 qualquer mudan\'e7a nos argumentos default de um m\'e9todo requer que o c\'f3digo cliente seja recompilado. Se \'e9 prov\'e1vel que os valores dos argumentos default ir\'e3o mudar, use fun\'e7\'f5es sobrecarregadas em vez de argumentos default. Assim, se muda a implementa\'e7\'e3o de uma fun\'e7\'e3o membro, o c\'f3digo cliente n\'e3o precisa ser recompilado. \line A Fig. 6.8 inicializa cinco objetos Time \f1\fs8 - \f0\fs18 um com todos os tr\'eas argumentos inicializados por default na \line chamada do construtor, um com um argumento especificado, um com dois argumentos especificados, um com tr\'eas \fs24\par
\b\fs14 CAP\'cdTULO \f1\fs20 6 \b0\fs8 - \b\f0\fs14 CLASSES E \f1\fs16 ABSTRA\'c7\'c3O DE DADOS 421 \line\b0\f0\fs18 argumentos especificados e um com tr\'eas argumentos inv\'e1lidos especificados. O conte\'fado de cada um dos membros de dados do objeto, depois da instancia\'e7\'e3o e inicializa\'e7\'e3o, \'e9 exibido. \line Se nenhum construtor est\'e1 definido para uma classe, o compilador cria um construtor default. Tal construtor \line n\'e3o executa qualquer inicializa\'e7\'e3o; assim, quando o objeto \'e9 criado, n\'e3o \'e9 garantido que esteja em um estado consistente. \line\b\i\fs20 Observa\'e7\'e3o de engenharia de software 6.20 \line\b0\i0\f1\fs8 ______ \f2\fs26\'c9 \i\f0\fs18 poss\'edvel que uma classe n\'e3o tenha um construtor default, se forem constru\'eddos quaisquer construtores e nenhum deles for explicitamente um construtor default. \line\b\i0\f1\fs26 6.12 Usando destruidores \line\b0\f0\fs18 Um \i destruidor \'e9 \i0 uma fun\'e7\'e3o membro especial de uma classe. \b\f1\fs26 O \b0\f0\fs18 nome do destruidor para uma classe \'e9 formado pelo caractere \i til \b\i0\f1\fs20 (-) \b0\f0\fs18 seguido pelo nome da classe. Essa conven\'e7\'e3o de nomenclatura \'e9 intuitivamente atraente porque, como veremos em um cap\'edtulo mais \'e0 frente, o operador til \'e9 o operador de complemento sobre bits e, de certo modo, o destruidor \'e9 o complemento do construtor. \line O destruidor de uma classe \'e9 chamado quando um objeto \'e9 destru\'eddo \f1\fs8 - \f0\fs18 por exemplo, para objetos autom\'e1ticos, quando a execu\'e7\'e3o de programa deixar o escopo em que um objeto daquela classe foi instanciado. Na verdade, o destruidor propriamente dito n\'e3o destr\'f3i o objeto \f1\fs8 - \f0\fs18 ele executa a \i faxina de t\'e9rmino \i0 antes de o sistema recuperar de volta a mem\'f3ria liberada pelo objeto, de forma que essa mem\'f3ria possa ser reutilizada para manter novos objetos. \line Um destruidor n\'e3o recebe nenhum argumento e n\'e3o retorna nenhum valor. Uma classe pode ter s\'f3 um destruidor \f1\fs8 - \f0\fs18 n\'e3o \'e9 permitido sobrecarregar um destruidor. \line\b\i\fs20 Erro comum de programa\'e7\'e3o 6.10 \line\b0\f2\fs24\'c9 \f0\fs18 um erro de sintaxe tentar passar argumentos para um destruidon especificar um tipo de retorno para um destruidor (nem \b\i0 void \b0\i pode ser especificado), retornar valores de um destruidor ou sobrecarregar um destruidor \line\i0 Note que n\'e3o foram fornecidos destruidores para as classes apresentadas at\'e9 agora. Logo veremos v\'e1rios exemplos de classes com destruidores \'fateis. No Cap\'edtulo 8, veremos que destruidores s\'e3o apropriados para classes cujos objetos cont\'eam mem\'f3ria alocada dinamicamente (para arrays e \i strings, \i0 por exemplo). No Cap\'edtulo 7, discutimos como alocar e desalocar mem\'f3ria dinamicamente. \line\b\i\fs20 Observa\'e7\'e3o de engenharia de software 6.21 \line\b0\fs18 Como veremos (ao longo do restante do livro), construtores e destruidores t\'eam uma import\'e2ncia muito maior em C+ \b\i0\fs14 + \b0\i\fs18 e na programa\'e7\'e3o orientada a objetos do que foi poss\'edvel transmitir em nossa breve introdu\'e7\'e3o aqui. \line\b\i0\f1\fs26 6.13 Quando construtores e destruidores s\'e3o chamados \line\b0\f0\fs18 Construtores e destruidores s\'e3o chamados automaticamente. A ordem em que essas chamadas de fun\'e7\'e3o s\'e3o feitas depende da ordem em que a execu\'e7\'e3o entra e sai do escopo em que os objetos s\'e3o instanciados. Geralmente, chamadas para um destruidor s\'e3o feitas na ordem contr\'e1ria das chamadas para um construtor. Por\'e9m, como veremos na Fig. 6.9, a classe de armazenamento dos objetos pode alterar a ordem em que o destruidores s\'e3o chamados. \line Construtores s\'e3o chamados para objetos definidos no escopo global antes de qualquer outra fun\'e7\'e3o (inclusive main) em que o arquivo come\'e7a a execu\'e7\'e3o (embora a ordem de execu\'e7\'e3o de construtores de objetos globais entre arquivos n\'e3o seja garantida). Os destruidores correspondentes s\'e3o chamados quando main termina ou a fun\'e7\'e3o \b exit \'e9 chamada \b0 (veja o Cap\'edtulo 18 para obter mais informa\'e7\'f5es sobre essa fun\'e7\'e3o). N\'e3o s\'e3o chamados destruidores para objetos globais se o programa \'e9 terminado com uma chamada \'e0 fun\'e7\'e3o abort (veja o Cap\'edtulo 18 para obter mais informa\'e7\'f5es sobre esta fun\'e7\'e3o). \fs24\par
\fs18 422 C\'f7\'f7 \f1\fs16 COMO \f0\fs18 PROGRAMAR \line Construtores s\'e3o chamados para objetos locais autom\'e1ticos quando a execu\'e7\'e3o alcan\'e7a o ponto onde os objetos s\'e3o definidos. Os destruidores correspondentes s\'e3o chamados quando os objetos deixam o escopo (i.e., quando a execu\'e7\'e3o deixa o bloco em que s\'e3o definidos). Construtores e destruidores para objetos autom\'e1ticos s\'e3o chamados toda vez que os objetos entram e saem de seus escopos. \line Construtores s\'e3o chamados para objetos locais static somente uma vez, quando a execu\'e7\'e3o atinge pela primeira vez o ponto onde os objetos s\'e3o definidos. Os destruidores correspondentes s\'e3o chamados quando main termina ou a fun\'e7\'e3o \f1\fs20 exit \f0\fs18\'e9 chamada. N\'e3o s\'e3o chamados destruidores para objetos static se o programa \'e9 terminado com uma chamada \'e0 fun\'e7\'e3o abort. \line O programa da Fig. 6.9 demonstra a ordem em que construtores e destruidores s\'e3o chamados para objetos de tipo CreateAndDestroy em v\'e1rios escopos. O programa define first no escopo global. Seu construtor \'e9 chamado quando o programa come\'e7a a execu\'e7\'e3o e seu destruidor \'e9 chamado ao t\'e9rmino do programa ap\'f3s todos os outros objetos serem destru\'eddos. \line\b\f3\fs16 1 \b0\i\f1\fs20 II \b\i0\f3\fs16 Fig. \b0\f1\fs20 6.9: \f0\fs18 create.h \line\b\f3\fs16 2 \b0\f0\fs18 // \b\f3\fs16 Defini\'e7\'e3o da classe CreateAndDestroy \line 3 \b0\i\f1\fs22 II \b\i0\f3\fs16 Fun\'e7\'f5es membro definidas em create.cpp \line 4 #ifndef CREATEH \line 5 #define CREATE H \line\b0\f1\fs20 6 \line 7 \f0\fs18 class CreateAndDestroy \{ \line\b\f3\fs16 8 public: \line 9 CreateAndoestroy( int ); \b0\i\f1\fs20 II \b\i0\f3\fs16 construtor \line 10 CreateAndDestroy \b0\f0\fs18 // \b\f3\fs16 destruidor \line 11 private: \line 12 int data; \line 13 \}; \line 14 \line 15 #endif \line Fig. 6.9 \b0\f1\fs20 Demonstrando a ordem em que construtores e destruidores s\'e3o chamados \fs8 - \b\f3\fs16 create \b0\f1\fs8 . \b\f3\fs16 h. \line 16 \b0\i\f1\fs20 1/ \b\i0\f3\fs16 Fig. 6.9: create.cpp \line 17 \b0\i\f1\fs20 II \b\i0\f3\fs16 Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe CreateAndDestroy \line 18 #include <iostream> \line 19 \line 20 using std: :cout; \line\b0\f1\fs30 41 \b\f3\fs16 21 using std::endl; \line\b0\f1\fs30 41 \b\f3\fs16 22 \line 23 #include \ldblquote create.h\rdblquote  \line 24 \line 25 CreateAndDestroy: :CreateAndDestroy( int value \line 26 \b0\f0\fs18\{ \line\b\f3\fs16 27 data \b0\f1\fs12 = \b\f3\fs16 value; \line 28 cout \'ab \ldblquote Construtor do objeto \b0\f1\fs8\ldblquote  \f0\fs18\'ab \b\f3\fs16 data; \line 29 \b0\f0\fs18\} \line\b\f3\fs16 30 \line 31 CreateAndDestroy: : -CreateAndDestroy \b0\f0\fs18 O \line\b\f3\fs16 32 \b0\f0\fs18\{ \b\f3\fs16 cout \'ab \ldblquote Destruidor do objeto \b0\f1\fs8\ldblquote  \b\f3\fs16\'ab data \b0\f0\fs18\'ab \b\f3\fs16 endl; \line Fig. 6.9 \b0\f1\fs20 Demonstrando \f0\fs18 a ordem \f1\fs20 em que construtores e destruidores s\'e3o chamados \fs8 - \b\f3\fs16 create \b0\f1\fs8 . \b\f3\fs16 cpp. \line 33 \b0\i\f1\fs22 II \b\i0\f3\fs16 Fig. 6.9: figO6O9.cpp \line 34 \b0\f0\fs18 // \b\f3\fs16 Demonstrando a ordem em \b0\f0\fs18 que \b\f3\fs16 construtores e \line 35 \b0\f0\fs18 // \b\f3\fs16 destruidores s\'e3o chamados. \line Fig. 6.9 \b0\f0\fs18 Demonstrando a ordem em \f1\fs20 que construtores e destruidores s\'e3o chamados \fs8 - \fs20 figo6 09. \b\f3\fs16 cpp \b0\f1\fs20 (parte 1 de 2). \f0\fs24\par
\f3\fs16 #include <iostream> \f0\fs24\par
\f3\fs16 using std: :cout; using std::endl; \f0\fs24\par
\f3\fs16 #include \ldblquote create .h\rdblquote  \f0\fs24\par
\fs14 CAP\'cdTULO \f1\fs20 6 \fs8 - \f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs20 423 \f0\fs24\par
\f3\fs16 CreateAndDestroy first( 1 ); \i\f1\fs22 II \i0\f3\fs16 objeto global \f0\fs24\par
\f3\fs16 int main \f1\fs20 O \line\f3\fs16 cout \'ab (global criado antes de main)\rdblquote  \'ab endl; \f0\fs24\par
\f3\fs14 CreateAndDestroy second( 2 ); \i\f1\fs22 II \i0\f3\fs14 objeto local cout \'ab \f1\fs8\ldblquote  \f3\fs14 (local autom\'e1tico em main)\rdblquote  \'ab endl; \f0\fs24\par
\f3\fs16 static CreateAndDestroy third( 3 ); \i\f1\fs22 II \i0\f3\fs16 objeto local cout \'ab \f1\fs8\ldblquote  \f3\fs16 (local est\'e1tico em main)\rdblquote  \'ab endl; \f0\fs24\par
\f3\fs16 create() \i\f1\fs22 II \i0\f3\fs16 chama a fun\'e7\'e3o para criar objetos \f0\fs24\par
\f3\fs14 CreateAndDestroy fourth( 4 ); \i\f1\fs22 II \i0\f3\fs14 objeto local cout \'ab \f1\fs8\ldblquote  \f3\fs14 (local autom\'e1tico em main)\rdblquote  \'ab endl; return 0; \f0\fs24\par
\i\f1\fs20 /1 \i0\f3\fs16 Fun\'e7\'e3o para criar objetos void create( void \f0\fs24\par
\f3\fs14 CreateAndDestroy fifth( 5 ); \line cout \'ab \f1\fs8\ldblquote  \f3\fs14 (local autom\'e1tico em create) \'ab endl; \f0\fs24\par
\f3\fs16 static CreateAndoestroy sixth( 6 ); \line cout \'ab (local est\'e1tico em create)\rdblquote  \'ab endl; \f0\fs24\par
\f3\fs16 Construtor \line Construtor \line Construtor \line Construtor \line Construtor \line Construtor \line Destruidor \line Destruidor \line Construtor \line Destruidor \line Destruidor \line Destruidor \line Destruidor \line Destruidor \f0\fs24\par
\f3\fs16 do objeto 1 \line do objeto 2 \line do objeto 3 \line do objeto 5 \line do objeto 6 \line do objeto 7 \line do objeto 7 \line do objeto 5 \line do objeto 4 \line do objeto 4 \line do objeto 2 \line do objeto 6 \line do objeto 3 \line do objeto 1 \f0\fs24\par
\f3\fs16 (local \line (local \line (local \line (local \line (local \f0\fs24\par
\f3\fs16 void create \f1\fs20 ( \f3\fs16 void ); \f0\fs24\par
\i\f1\fs20 II \i0\f3\fs16 prot\'f3tipo \f0\fs24\par
\f3\fs16 36 \line 37 \line 38 \line 39 \line 40 \line 41 \line 42 \line 43 \line 44 \line 45 \line 46 \line 47 \line 48 \line 49 \line 50 \line 51 \line 52 \line 53 \line 54 \line 55 \line 56 \line 57 \line 58 \line 59 \line 60 \line 61 \line 62 \line 63 \line 64 \line 65 \line 66 \line 67 \line 68 \line 69 \line 70 \line 71 \line 72 \line 73 \line 74 \line 75 \f0\fs24\par
\f3\fs14 CreateAridDestroy seventh( 7 ); \line cout \'ab \f1\fs8\ldblquote  \f3\fs14 (local autom\'e1tico em create)\rdblquote  \'ab endl; \f0\fs24\par
\f3\fs16 (global criado antes de main) \f0\fs24\par
\f3\fs16 autom\'e1tico em main) \line est\'e1tico em main) \line autom\'e1tico em create) \line est\'e1tico em create) \line autom\'e1tico em create) \f0\fs24\par
\f3\fs16 (local autom\'e1tico em main) \f0\fs24\par
\f1\fs18 Fig. 6.9 Demonstrando a ordem em que construtores e destruidores s\'e3o chamados \fs8 - \fs18 fig06 09. cpp (parte 2 de 2). \f0\fs24\par
\b\f1\fs22 424 C++ \fs14 COMO PROGRAMAR \line\b0\f0\fs18 A fun\'e7\'e3o main declara tr\'eas objetos. Os objetos \b second e fourth \b0 s\'e3o objetos autom\'e1ticos locais, e o objeto classe \line third \'e9 um objeto local est\'e1tico. Os construtores para cada um destes objetos s\'e3o chamados quando a execu\'e7\'e3o lando \line alcan\'e7a o ponto onde cada objeto \'e9 declarado. Os destruidores para os objetos fourth e second s\'e3o chamados, \line nessa ordem, quando o fim de main \'e9 atingido. Como o objeto third \'e9 est\'e1tico, ele existe at\'e9 o t\'e9rmino da hour \line execu\'e7\'e3o do programa. O destruidor para o objeto third \'e9 chamado antes do destruidor para first, mas ap\'f3s de dad \line todos os outros objetos serem destru\'eddos. de dad \line A fun\'e7\'e3o create declara tr\'eas objetos \f1\fs8 - \f0\fs18 fifth e seventh s\'e3o objetos autom\'e1ticos locais e sixth \'e9 um Cada \line objeto local est\'e1tico. Os destruidores para os objetos seventh e fifth s\'e3o chamados, nessa ordem, quando o fim fun\'e7\'f5e \line de create \'e9 alcan\'e7ado. Como sixth \'e9 est\'e1tico, ele existe at\'e9 o t\'e9rmino do programa. O destruidor para \b sixth \b0 valore \line\i\'e9 \i0 chamado antes dos destruidores para thirde first, mas ap\'f3s todos os outros objetos serem destru\'eddos. \f1\fs24 1 \f0\fs18 seguid \line membr \line exibi\'e7\'e3 \line\b\f1\fs26 6.14 Usando membros de dados e fun\'e7\'f5es membro \b0\f0\fs18 comze \line uma ch \line Os membros de dados private de uma classe s\'f3 podem ser manipulados por fun\'e7\'f5es membro (e friends) da membr \line classe. Uma manipula\'e7\'e3o t\'edpica poderia ser o ajuste do saldo banc\'e1rio de um cliente (por exemplo, um membro de funcion \line dados private de uma classe BankAccount) por uma fun\'e7\'e3o membro computelnterest. nho. N \line As classes freq\'fcentemente fornecem fun\'e7\'f5es membro public \i set \i0 e \i get \i0 para permitir que os clientes da sobre o \line classe \i inicializem \i0 (i.e., escrevam) ou \i obtenham \i0 (i.e., leiam) os valores de membros de dados private. Estas \line fun\'e7\'f5es n\'e3o necessitam ser chamadas especificamente de \i sei\rquote  \i0 e \i get, \i0 mas elas freq\'fcentemente s\'e3o chamadas assim. \line Mais especificamente, uma fun\'e7\'e3o membro que \i inicializa \i0 o membro de dados interestRate seria tipicamente \line chamado de setlnterestRate, e uma fun\'e7\'e3o membro que \i obt\'e9m a \b\i0 interestRate seria tipicamente chama d \line\b0 de getlnterestRate. Fun\'e7\'f5es \i get \i0 s\'e3o tamb\'e9m comumente chamadas de fun\'e7\'f5es de \ldblquote consulta\rdblquote . \line Pode parecer que oferecer tanto o recurso \i inicializar \i0 como o recurso \i obter \i0 seja essencialmente o mesmo que \line tornar public os membros de dados. Esta \'e9 outra sutileza de \b C++ \b0 que torna a linguagem t\'e3o desej\'e1vel para a \line engenharia de software. Se um membro de dados \'e9 public, ent\'e3o o membro de dados pode ser lido ou escrito \i\'e0 \line\i0 vontade por qualquer fun\'e7\'e3o no programa. Se um membro de dados \'e9 private, uma fun\'e7\'e3o public \i get \i0 certa- 1 \line mente pareceria permitir a outras fun\'e7\'f5es no programa lerem os dados \'e0 vontade, mas a fun\'e7\'e3o \i get \i0 poderia controlar 2 \line a formata\'e7\'e3o e exibi\'e7\'e3o dos dados. Uma fun\'e7\'e3o public \i sei \i0 poderia \f1\fs8 - \f0\fs18 e provavelmente o faria \f1\fs8 - \f0\fs18 monitorar cuida- \b 3 ,, \line\b0 dosamente qualquer tentativa de modificar o valor do membro de dados. Isto asseguraria que o novo valor fosse \b 4 \line\b0 apropriado para aquele item de dados. Por exemplo, uma tentativa para \i inicializar \i0 odiado m\'eas como 37 poderia ser 5 \i // \line\i0 rejeitada, uma tentativa para \i inicializar \i0 o peso de uma pessoa com um valor negativo tamb\'e9m poderia ser rejeitada, 6 // \line uma tentativa para \i inicializar \i0 uma quantidade num\'e9rica com um valor alfab\'e9tico e uma tentativa para \i inicializar 7 \b\i0 #i \line\b0 uma nota em um exame com 185 (quando o intervalo apropriado \'e9 zero a 100) poderiam ser rejeitadas, etc. 8 #cL \line\b\f1 9 \line\b0\i\f0 Observa\'e7\'e3o de engenharia de software 6.22 \b\i0 10 c1 \line 11 \b0 pu] \line\f1\fs12 ______ \i\f0\fs18 Tornar os membros de dados \b\i0 private \b0\i e controlar o acesso, especialmente acesso para escrever, \'e0queles \b\i0 12 \line\b0\i membros de dados atrav\'e9s de fun\'e7\'f5es membro \i0 public \i ajuda a assegurar a integridade dos dados. \b\i0 13 \line 14 \line\b0\f2\fs80\'ae \i\f0\fs18 Dica de teste e depura\'e7\'e3o 6.5 \b\i0 15 \line 16 \line\b0\i Os benef\'edcios da integridade de dados n\'e3o s\'e3o obtidos automaticamente apenas porque os membros de \b\i0 17 \line\b0\i dados s\'e3o declarados como \b\i0 priva te \b0\f1\fs8 - \i\f0\fs18 o programador deve providenciar a verifica\'e7\'e3o de validade. \i0 18 \line\i C+ \b\i0\f1\fs14 +, \b0\i\f0\fs18 por\'e9m, fornece uma estrutura na qual os programadores podem projetar programas melhores de \b\i0 19 \line\b0\i maneira conveniente. \b\i0 20 \line\b0\i Boa pr\'e1tica de programa\'e7\'e3o 6.7 \line Fun\'e7\'f5es membro que \i0 inicializam \i os valores de dados privados devem verificar se os novos valores preten- \b\i0 24 \line\b0\i didos s\'e3o apropriados; se n\'e3o forem, afun\'e7\'e3o \i0 set \i deve colocar os membros de dados \b\i0 private \b0\i em um \line estado consistente apropriado. \b\i0 27 \line\b0 O cliente de uma classe deve ser notificado quando for feita uma tentativa de atribuir um valor inv\'e1lido a um pr membro de dados. As fun\'e7\'f5es de \i inicializa\'e7\'e3o \i0 de uma classe s\'e3o freq\'fcentemente escritas para retornar valores \line indicando que foi feita uma tentativa de atribuir dados inv\'e1lidos a um objeto da classe. Isso habilita os clientes da \b\f1 Fig. \f0 6.10 \b0\fs24\par
\b\fs14 CAP\'cdTULO \b0\fs18 6- \b\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \b0\i\f1\fs22 425 \line\i0\f0\fs18 classe a testar os valores de retorno de fun\'e7\'f5es de \i\fs20 inicializa\'e7\'e3o \i0\fs18 para determinar se o objeto que eles est\'e3o manipulando \'e9 um objeto v\'e1lido e tomar a a\'e7\'e3o apropriada se o objeto n\'e3o for v\'e1lido. \line A Fig. 6.10 estende nossa classe Time para incluir fun\'e7\'f5es \i\fs20 get \i0\fs18 e \i\fs20 set \i0\fs18 para os membros de dados privados hour. minute e second. As fun\'e7\'f5es de \i\fs20 inicializa\'e7\'e3o \i0\fs18 controlam estritamente a inicializa\'e7\'e3o dos membros de dados. As tentativas de deixar qualquer membro de dados com um valor incorreto fazem com que o membro de dados seja inicializado com zero (deixando deste modo os membros de dados em um estado consistente). Cada fun\'e7\'e3o \i\fs20 get \i0\fs18 simplesmente retorna o valor apropriado do membro de dados. O programa primeiro usa as fun\'e7\'f5es de \i\fs20 inicializa\'e7\'e3o \i0\fs18 para \i\fs20 inicializar \i0\fs18 os membros de dados private do objeto t do tipo Time com valores v\'e1lidos e, ent\'e3o, usa as fun\'e7\'f5es \i\fs20 get \i0\fs18 para recuperar os valores e envi\'e1-los para a sa\'edda de dados. Em \line seguida, as fun\'e7\'f5es de \i\fs20 inicializa\'e7\'e3o \i0\fs18 tentam \i\fs20 inicializar \i0\fs18 os membros hour e second com valores inv\'e1lidos e o membro minute com um valor v\'e1lido, e ent\'e3o fun\'e7\'f5es \i\fs20 get \i0\fs18 recuperam os valores para a sa\'edda de dados. A exibi\'e7\'e3o confirma que valores inv\'e1lidos fornecidos fazem com que os membros de dados sejam inicializados com zero. Finalmente, o programa \i\fs20 inicializa \i0\fs18 a hora como 11:58:00 e incrementa o valor de minute por 3 com uma chamada para a fun\'e7\'e3o incrementMinutes. A fun\'e7\'e3o incrementMinutes \'e9 uma fun\'e7\'e3o n\'e3o- membro, que usa as fun\'e7\'f5es membro \i\fs20 get \i0\fs18 e \i\fs20 set \i0\fs18 para incrementar corretamente o membro minute. Embora isso funcione, incorremos no \i\fs20 overhead \i0\fs18 de m\'faltiplas chamadas de fun\'e7\'e3o, o que impacta negativamente o desempenho. No pr\'f3ximo cap\'edtulo, discutiremos a no\'e7\'e3o de fun\'e7\'f5es friend como um meio de eliminar este impacto sobre o desempenho. \line\i Erro comum de programa\'e7\'e3o \b\f1\fs20 6.11 \line\b0\f0\fs18 Um construtor pode chamar outras fun\'e7\'f5es membro da classe, tais como fun\'e7\'f5es \i0 set \i ou \i0 get, \i mas, como o construtor est\'e1 inicializando o objeto, os membros de dados podem ainda n\'e3o estar em um estado consistente. Usar membros de dados antes de eles serem corretamente inicializados pode causar erros de l\'f3gica. \i0\fs24\par
\b\f3\fs16 1 \b0\f0\fs20 // \b\f3\fs16 Fig. 6.10: time3.h \line 2 \b0\i\f0\fs20 II \b\i0\f3\fs16 Declara\'e7\'e3o da classe Time \line 3 \b0\f0\fs20 // \b\f3\fs16 Fun\'e7\'f5es membro definidas em time3.cpp \line 4 \line 5 \b0\i\f0\fs20 II \b\i0\f3\fs16 diretivas para o pr\'e9-processador \b0\f0\fs18 que \b\f3\fs16 previnem \line 6 \b0\i\f0\fs20 II \b\i0\f3\fs16 inclus\'f5es m\'faltiplas de arquivos de cabe\'e7alho \line 7 #ifndef TIME3H \line 8 #define TIME3H \line 9 \line class Time \line public: \line Time( int \b0\f1\fs10 = \b\f3\fs16 0, int \b0\f1\fs10 = \b\f3\fs16 0, int O ); //construtor \b0\f0\fs24\par
\b\f3\fs16 10 \line 11 \line 12 \line 13 \line 14 \line 15 \line 16 \line 17 \line 18 \line 19 \line 20 \line 21 \line 22 \line 23 \line 24 \line 25 \line 26 \line 27 \b0\f0\fs24\par
\i\fs20 1/ \b\i0\f3\fs16 fun\'e7\'f5es de inicializa\'e7\'e3o void setTime( int, int, int void setHour( int ); \line void setMinute \b0\f0\fs20 ( \b\f3\fs16 int ); void setSecond( int ); \b0\f0\fs24\par
\fs18 ) \b\fs14 ; \b0\fs18 // \line\i\f1\fs22 /1 \line /1 \line\i0\f0\fs18 // \fs24\par
\i\fs20 1/ \b\i0\f3\fs16 fun\'e7\'f5es get int getHourO; int getNinuteO; int getSecond \b0\f0\fs24\par
\b\f3\fs16 inicializa hora, minuto, segundo inicializa hora \line inicializa minuto \line inicializa segundo \b0\f0\fs24\par
\fs20 // retorna \line // retorna \line // retorna \fs24\par
\b\f3\fs16 hora minuto \line\b0\f0\fs20 segundo \fs24\par
\b\f3\fs16 void printMilitaryO; \b0\i\f0\fs20 /1 \b\i0\f3\fs16 sa\'edda da hora no formato militar void printStandardQ; \b0\i\f0\fs20 /1 \b\i0\f3\fs16 sa\'edda da hora no formato padr\'e3o \line 28 private: \line 29 int hour; \b0\f0\fs20 // \b\f3\fs16 O \b0\f1\fs8 - \b\f3\fs16 23 \line\b0\f1\fs20 Fig. 6.10 Usando \f0 fun\'e7\'f5es \i\f1 sete get- \b\i0\f3\fs16 time3.h \b0\f1\fs20 (parte 1 de 2). \f0\fs24\par
\f1\fs18 426 C++ COMO PROGRAMAR \line\f3\fs16 30 int minute; \i\f1\fs22 II \i0\f3\fs16 O \f1\fs8 - \f3\fs16 59 \line 31 int second; \i\f1\fs22 II \i0\f3\fs16 O \f1\fs8 - \f3\fs16 59 \line 32 \}; \line 33 \line 34 #endif \line\f1\fs18 Fig. 6.10 Usando fun\'e7\'f5es \i\fs20 sete get- \i0\f0\fs16 time3 \f1\fs14 .h \fs20 (parte 2 de 2). \line\f3\fs16 35 \i\f1\fs22 II \i0\f3\fs16 Fig. 6.10: time3.cpp \line 36 \i\f1\fs22 II \i0\f3\fs16 Defini\'e7\'f5es de fun\'e7\'f5es membro para a classe Time \line 37 #include <iostream> \line 38 \line 39 using std: :cout; \line 40 \line 41 #include \ldblquote time3.h \line 42 \line 43 \i\f1\fs22 /1 \i0\f3\fs16 Fun\'e7\'e3o construtor para inicializar dados privados \line 44 \i\f1\fs22 // \i0\f3\fs16 Chama a fun\'e7\'e3o membro setTime para inicializar vari\'e1veis \line 45 \i\f1\fs22 // \i0\f3\fs16 Valores default s\'e3o O (ver defini\'e7\'e3o da classe) \line 46 Time: :Time( int hr, int mm, int sec \line 47 \i\f1\fs22\{ \i0\f3\fs16 setTime( hr, mm, sec ); \i\f1\fs22\} \line\i0\f3\fs16 48 \line 49 \i\f1\fs22 // \i0\f3\fs16 Inicializa os valores de hora, minuto e segundo \line 50 void Time::setTime( int h, int m, int s \line 51 \i\f1\fs22\{ \line\i0\f0\fs16 52 setflour( h ); \line\f3 53 setMinute( m ); \line 54 setSecond( s ); \line 55 \line 56 \line 57 \i\f1\fs22 // \i0\f3\fs16 Inicializa o valor de hora \line 58 void Time: :setHour( int h \line 59 (hour= (h>=0&&h<24) ?h :0; \i\f1\fs22\} \line\i0\f3\fs16 60 \line 61 \i\f1\fs22 II \i0\f3\fs16 Inicializa o valor de minuto \line 62 void Time::setMinute( int m \line 63 \{minute=(m>=0&&m<6O)?m:0;\} \line 64 \line 65 \i\f1\fs22 II \i0\f3\fs16 Inicializa o valor de segundo \line 66 void Time::setsecond( int s \line 67 \{second=(s>=0&&s<60)?s:0;) \line 68 \line 69 \i\f1\fs20 II \i0\f3\fs16 Obt\'e9m o valor da hora \line 70 int Time::getHour() \i\f1\fs20\{ \i0\f3\fs16 return hour; \i\f1\fs20 ) \line\i0\f3\fs16 71 \line 72 \i\f1\fs20 // \i0\f3\fs16 Obt\'e9m o valor do minuto \line 73 int Time::getNinute() \i\f1\fs20\{ \i0\f3\fs16 return minute; \line 74 \line 75 \i\f1\fs20 II \i0\f3\fs16 Obt\'e9m o valor do segundo \line 76 int Time: :getSecond() \f1\fs20\{ \f3\fs16 return second; \line 77 \line 78 \f1\fs20 II \f3\fs16 Imprime Time no formato militar \line 79 void Time::printNilitary() \line 80 \line\f0 81 cout \f3\'ab \f1\fs20 ( \f0\fs16 hour \f3 < 10 \f0 ? 0\rdblquote  : \f1\fs8\ldblquote  \fs20 ) \f3\fs16\'ab \f0 hour \'ab \line 82 \'ab \f1\fs20 ( \f0\fs16 minute \f1\fs14 < \f3\fs16 10 ? \f0\ldblquote 0\rdblquote  : \f1\fs8\ldblquote  \fs20 ) \f3\fs16\'ab minute; \line\f1\fs18 Fig. 6.10 Usando fun\'e7\'f5es \i\fs20 sete get- \i0\f0\fs16 time3 \f1\fs8 . \fs20 cpp (parte 1 de 2). \f0\fs24\par
\fs16 CAP\'cdTULO 6 \f1\fs8 - \f0\fs16 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs20 427 \line\f0\fs16 83 \f1\fs20\} \line\f3\fs16 84 \line 85 \i\f1\fs22 II \i0\f3\fs16 Imprime Time no formato padr\'e3o \line 86 void Time: :printStandard() \line 87 \line 88 cout\'ab \f1\fs20 ( ( \f3\fs16 hour \f1\fs10 == \f3\fs16 O hour \f1\fs10 = \f3\fs16 12 \f1\fs20 ) \f0\fs16 ? 12 \f3 : hour % 12 \line\f0 89 \'ab \b\i\f3\fs10\ldblquote :\ldblquote  \b0\i0\f0\fs16\'ab \f1\fs20 ( \f0\fs16 minute < 10 ? \ldblquote 0\rdblquote  : \b\i\f3\fs10\ldblquote\ldblquote  \b0\i0\f1\fs20 ) \f0\fs16\'ab \f3 minute \line\f0 90 \'ab \b\i\f3\fs10\ldblquote :\ldblquote  \b0\i0\f0\fs16\'ab \f1\fs20 ( \f0\fs16 second < 10 ? \ldblquote O\rdblquote  : \b\i\f3\fs10\ldblquote  \b0\i0\f1\fs20 ) \f0\fs16\'ab second \line 91 \'ab \f1\fs20 ( \f0\fs16 hour < 12 ? \b\i\f3\fs10\ldblquote  \b0\i0\f0\fs16 da manh\'e3 : da tarde\rquote  ); \line 92 \line Fig. 6.10 \f1\fs20 Usando fun\'e7\'f5es \i sete get- \i0\f0\fs18 time3 \f1\fs8 . \f0\fs18 cpp \f1\fs20 (parte 2 de 2). \line\f0\fs18 93 \i\f1\fs22 II \i0\f0\fs18 Fig. 6.10: figo6lO.cpp \line\f3\fs16 94 \f1\fs20 // \f3\fs16 Demonstrando as \b\i\fs10 fun\'e7\'f5es get \b0\i0\fs16 e \b\i\fs10 set \b0\i0\fs16 da classe \f0\fs18 Time \line\f3\fs16 95 #include <iostream> \line 96 \line 97 using std: :cout; \line 98 using std::endl; \line 99 \line 100 4finclude \ldblquote time3.h\rdblquote  \line 101 \line 102 void incrementMinutes( Time \f0 &, \f3 const int ); \line 103 \line 104 int main \f1\fs20 O \line\f3\fs16 105 \line 106 Time t; \line 107 \line 108 t.setHour( 17 ); \line 109 t.setNinute( 34 ); \line 110 t.setSecond( 25 ); \line 111 \line 112 cout \'ab Resultado da inicializa\'e7\'e3o com todos os valores v\'e1lidos:\\n\rdblquote  \line 113 \'ab \b\i\fs10\ldblquote  \b0\i0\fs16 Hora: \b\i\fs10\ldblquote  \b0\i0\f0\fs16\'ab \f3 t.getHour() \line 114 \'ab \b\i\fs10\ldblquote  \b0\i0\fs16 Minuto: \b\i\fs10\ldblquote  \b0\i0\f0\fs16\'ab t.getMinute() \line\f3 115 \'ab Segundo: \b\i\fs10\ldblquote  \b0\i0\f0\fs16\'ab t.getSecondO; \line\f3 116 \line 117 t.setHour( 234 ); \i\f1\fs22 II \i0\f3\fs16 hora inv\'e1lida inicializada com O \line 118 t.setNinute( 43 ); \line 119 t.setSecond( 6373 ); \i\f1\fs22 II \i0\f3\fs16 segundo inv\'e1lido inicializado com O \line 120 \line 121 cout \f0\'ab \f3\ldblquote\\n\\nResultado de tentar inicializar hora e segundo \line 122 \'ab \ldblquote inv\'e1lidos:\\n Hora: \b\i\fs10\ldblquote  \b0\i0\f0\fs16\'ab \f3 t.getHour() \line\f0\fs18 123 \'ab \b\i\f3\fs10\ldblquote  \b0\i0\fs16 Minuto: \b\i\fs10\ldblquote  \b0\i0\f0\fs16\'ab t.getMinute() \line 124 \'ab \f1\fs10\lquote  \f3\fs16 Segundo: \b\i\fs10\ldblquote  \b0\i0\f0\fs16\'ab t.getSecond() \'ab \ldblquote\\n\\n\rdblquote ; \line 125 \line\f3 126 t.setTime( 11, 58, O ); \line 127 incrementNinutes( t, 3 ); \line\f0\fs18 128 \line\f3\fs16 129 return 0; \line 130 \f1\fs20\} \line\f3\fs16 131 \line 132 void incrementNinutes( Time &tt, const int count \line 133 \f1\fs20\{ \line\f3\fs16 134 cout \'ab \ldblquote Incrementando minuto \b\i\fs10\ldblquote  \b0\i0\f0\fs16\'ab \f3 count \line 135 \'ab vezes:\\nHora de in\'edcio: \line\f0 136 tt.printStandardO; \line 137 \line\f1\fs20 Fig. 6.10 Usando fun\'e7\'f5es \i sete get- \i0 figo6 lO.cpp (parte 1 de 2). \f0\fs24\par
\b\f1\fs20 428 C+\'f7 \f0\fs16 COMO \b0\fs18 PROGRAMAR \line\b\f3\fs16 138 for \f1\fs20 ( \f3\fs16 int i \b0\f1\fs12 = \b\f3\fs16 0; i < count; i++ \line 139 tt.setMinute( \f1\fs20 ( \f3\fs16 tt.getNinute() + 1 \f1\fs20 ) \b0\f0\fs18 % \b\f3\fs16 60 ); \line 140 \line 141 if \f1\fs20 ( \f3\fs16 tt.getMinute() \b0\f1\fs12 == \b\f3\fs16 O \line 142 tt.setflour( \f1\fs20 ( \f3\fs16 tt.getHour() \b0\f0\fs18 + \b\f3\fs16 1 \f1\fs20 ) \b0\f0\fs18 % \b\f3\fs16 24 ); \line 143 \line 144 cout \'ab \ldblquote\\nxninuto + 1: \b0\f1\fs10\ldblquote ; \line\b\f3\fs16 145 tt.printStandard \line 146 \line 147 \line 148 cout \b0\i\f1\fs20\'ab \b\i0\f3\fs16 endl; \line 149 \line Resultado da inicializa\'e7\'e3o com todos os valores v\'e1lidos: \line Hora: 17 Minuto: 34 Segundo: 25 \line Resultado de tentar inicializar hora e segundo inv\'e1lidos: \line Hora: O Minuto: 43 Segundo: O \line Incrementando minuto 3 vezes: \line Hora de in\'edcio: 11:58:00 da manh\'e3 \line minuto + 1: 11:59:00 da manh\'e3 \line minuto + 1: 12:00:00 da tarde \line minuto + 1: 12:01:00 da tarde \line\f1\fs20 Fig. \f3\fs18 6.10 \b0\fs20 Usando fun\'e7\'f5es \i\f1 sete get- \b\i0\f0\fs16 figo6 \f3 lO.cpp \b0\f1\fs20 (parte \b\f3\fs16 2 \b0\fs20 de 2). \line\f0\fs18 Usar fun\'e7\'f5es \i set \i0 certamente \'e9 importante do ponto de vista de engenharia de software porque elas podem executar \line verifica\'e7\'f5es de validade. Tanto as fun\'e7\'f5es \i set \i0 como \i get \i0 t\'eam outra vantagem importante para a engenharia de software. Fi \line\i Observa\'e7\'e3o de engenharia de software 6.23 \line\i0\f1\fs8 ______ \i\f0\fs18 Acessar dados \i0 private \i atrav\'e9s de fun\'e7\'f5es membro \i0 set \i e \i0 get \i n\'e3o s\'f3 protege os membros de dados de \line receber valores inv\'e1lidos, como tamb\'e9m isola os clientes da classe da representa\'e7\'e3o dos membros de \b\i0\f3\fs16 2 \line\b0\i\f0\fs18 dados. Deste modo, se a representa\'e7\'e3o dos dados muda,; por alguma raz\'e3o (tipicamente para reduzir o \b\i0\f3\fs16 2 \line\b0\i\f0\fs18 volume de armazenamento exigido ou para melhorar o desempenho), somente as fun\'e7\'f5es membro neces- \i0 27 \line\i sitam ser mudadas \i0\f1\fs8 - \i\f0\fs18 os clientes n\'e3o necessitam ser mudados desde que a inteiface fornecida pelas fun- \b\i0\f3\fs16 28 \line\b0\i\f0\fs18\'e7\'f5es membro permane\'e7a a mesma. Os clientes podem, por\'e9m, necessitar ser recompilados. \b\i0\f3\fs16 29 \line 30 \line 31 \line\f1\fs26 6.15 Uma armadilha sutil: retornando uma refer\'eancia a um membro de \fs18 32 \fs26 dados private \b0\f3\fs20 33 \line\b\fs16 34 \line\b0\f0\fs18 Uma refer\'eancia para um objeto \'e9 um nome alternativo \i (alias) \i0 para o \i nome \i0 do objeto e pode ser, conseq\'fcentemente, \line usado no lado esquerdo de um comando de atribui\'e7\'e3o. Neste contexto, a refer\'eancia toma-se um \i Ivalue \i0 perfeitamente \b\f3\fs16 37 \line\b0\f0\fs18 aceit\'e1vel, que pode receber um valor. Uma maneira de usar esse recurso (infelizmente!) \'e9 ter uma fun\'e7\'e3o membro \b\fs16 38 \line\b0\fs18 public de uma classe que retorna uma refer\'eancia n\'e3o-const para um membro de dados private daquela 39 \line classe. \b\f3\fs16 40 \b0\f0\fs18 A Fig. 6.11 usa uma classe Time simplificada para demonstrar o retorno de uma refer\'eancia para um membro \b\fs16 41 \line\b0\fs18 de dados private. Tal retorno, na realidade, torna uma chamada para a fun\'e7\'e3o badSetHour um \i alias \i0 para o \b\fs16 42 \line\b0\fs18 membro de dados private hour! A chamada da fun\'e7\'e3o pode ser usada de qualquer forma que o membro de \b\fs16 43 \line\b0\fs18 dados private possa ser usado, inclusive como um \i lvalue \i0 em um comando de atribui\'e7\'e3o! \b\fs16 44 \line\i\fs18 Boa pr\'e1tica de programa\'e7\'e3o 6.8 \line\b0 Nunca fa\'e7a uma fun\'e7\'e3o membro \i0 public \i retornar uma refer\'eancia \i0 n\'e3o-const \i (ou um ponteiro) para um \line membro de dados \i0 private. \i Retornar uma refer\'eancia como essa viola o encapsulamento da classe. Na \b\i0\f1 Fig \b0\f0\fs24\par
\fs16 CAPfTULO \f1\fs20 6 \fs8 - \f0\fs16 CLASSES E \f1\fs14 ABSTRA\'c7\'c3O DE DADOS \fs22 429 \line\i\f0\fs18 verdade, retornar qualquer refer\'eancia ou ponteiro para dados private j\'e1 torna o c\'f3digo cliente dependente da representa\'e7\'e3o dos dados da classe. Assim, deve ser evitado retornar ponteiros ou refer\'eancias para dados \i0\fs16 private. \line\f3 1 \i\f0\fs18 II \i0\f3\fs16 Fig. \f0 6.11: time4.h \line\f3 2 \i\f0\fs18 1/ \i0\f3\fs16 Declara\'e7\'e3o da classe Time \line 3 \i\f0\fs18 II \i0\f3\fs16 Fun\'e7\'f5es membro definidas em time4.cpp \line 4 \line 5 \i\f0\fs18 II \i0\f3\fs16 diretivas para o pr\'e9-processador \f0 que \f3 previnem \line 6 \i\f0\fs18 II \i0\f3\fs16 inclus\'f5es m\'faltiplas de arquivos de cabe\'e7alho \line\f0 7 #ifndef TIME4H \line\f3 8 #define \f0 TIME4H \line\f3 9 \line 10 class Time \line 11 public: \line 12 Time( int O, int \b\f0\fs12 = \b0\f3\fs16 0, int \b\f0\fs12 = \b0\f3\fs16 O ); \line 13 void setTime( int, int, int ); \line 14 int getHour(); \line 15 int &badSetHour( int ); \i\f0\fs18 1/ \i0\f3\fs16 retorno de refer\'eancia PERIGOSA \line 16 private: \line 17 int hour; \line 18 int minute; \line\f0 19 int second; \line 20 \line\f3 21 \line 22 #endif \line\f1\fs20 Fig. 6.11 Retornando uma refer\'eancia a um membro de dados \f0\fs16 private \f1\fs8 - \f0\fs16 time4 \f1\fs8 . \fs20 h. \line\f3\fs16 23 \i\f0\fs18 II \i0\fs16 Fig. 6.11: time4.cpp \line\f3 24 \i\f0\fs18 II \i0\f3\fs16 Defini\'e7\'f5es das fun\'e7\'f5es membro para a classe Time \line 25 #include \ldblquote time4.h\rdblquote  \line 26 \line 27 \i\f0\fs18 II \i0\f3\fs16 Fun\'e7\'e3o construtor para inicializar dados privados \line 28 \i\f0\fs18 // \i0\f3\fs16 Chama a fun\'e7\'e3o membro setTime para inicializar vari\'e1veis \line 29 \i\f0\fs18 II \i0\f3\fs16 Valores default s\'e3o O (veja defini\'e7\'e3o da classe) \line 30 Time::Time( int hr, int mi int s \line 31 \i\f0\fs18\{ \i0\f3\fs16 setTime( hr, mi sec ); \i\f0\fs18\} \line\i0\f3\fs16 32 \line 33 \i\f0\fs18 1/ \i0\f3\fs16 Inicializa os valores de hora, minuto e segundo. \line 34 void Time::setTime( int h, int m, int s \line 35 \i\f0\fs18\{ \line\i0\f3\fs16 36 hour (h>0&&h<24)?h:0; \line 37 minute \b\f0\fs12 = \b0\i\fs18 ( \i0\fs16 m \b\fs12 > \b0\f3\fs16 O && m < 60 \i\f0\fs18 ) \i0\fs16 ? m \f3 : 0; \line 38 second \b\f0\fs12 = \b0\i\fs18 ( \i0\f3\fs16 s \b\f0\fs12 >= O && \b0\f3\fs16 s < 60 \i\f0\fs18 ) \i0\fs16 ? s : O; \line\f3 39 \i\f0\fs18\} \line\i0\f3\fs16 40 \line 41 \i\f0\fs18 II \i0\f3\fs16 Obt\'e9m o valor da hora \line 42 int Time::getHour() \i\f0\fs18\{ \i0\f3\fs16 return hour; \i\f0\fs18\} \line\i0\f3\fs16 43 \line 44 \i\f0\fs18 II \i0\f3\fs16 PR\'c1TICA RUIM DE PROGRAMA\'c7\'c3O \line 45 \i\f0\fs18 1/ \i0\f3\fs16 Retornar \f0 urna \f3 refer\'eancia para um membro de dados privado \line 46 int &Time: :badSetHour( int hh \line 47 \i\f0\fs18\{ \line\i0\f1\fs20 Fig. 6.11 Retornando uma refer\'eancia a um membro de dados \f0\fs16 private \f1\fs8 - \fs20 time4 \fs8 . \fs20 cpp (parte 1 de 2). \f0\fs24\par
\b\f1\fs22 430 C++ \b0\fs16 COMO PROGRAMAR \f0\fs24\par
\f3\fs16 48 hour= (hh>=0 &&hh<24 \f0\fs20 ) \f3\fs16 ?hh :0; \line 49 \line 50 return hour; \f0\fs20 // \f3\fs16 retorna refer\'eancia PERIGOSA \line 51 \line\b\f1\fs18 Fig. 6.11 \b0\fs20 Retornando uma refer\'eancia a um membro de dados private \fs8 - \fs20 time4 \fs8 . \fs20 cpp (parte 2 de 2). \line\b\fs18 52 \b0\i\fs20 II \i0\f3\fs16 Fig. 6.11: figO6ll.cpp \line 53 \i\f1\fs20 /1 \i0\f3\fs16 Demonstrando \f0 uma \f3 fun\'e7\'e3o membro p\'fablica \f0 que \f3 retorna \line 54 \i\f1\fs20 II \i0\f0\fs16 uma \f3 refer\'eancia para um membro de dados privado. \line 55 \i\f1\fs20 II \i0\f3\fs16 A classe Time foi simplificada para este exemplo. \line 56 #include <iostream> \line 57 \line 58 using std::cout; \line 59 using std: :endl; \line 60 \line 61 #include \ldblquote time4.h\rdblquote  \line 62 \line 63 int main() \line 64 \line 65 Time t; \line 66 int &hourRef \f1\fs10 = \f3\fs16 t.badSetHour( 20 ); \line 67 \line 68 cout \'ab \ldblquote Hora antes da modifica\'e7\'e3o: \f1\fs8\ldblquote  \f3\fs16\'ab hourRef; \line 69 hourRef \f1\fs10 = \f3\fs16 30; \i\f1\fs20 II \i0\f3\fs16 modifica\'e7\'e3o com valor inv\'e1lido \line 70 cout \'ab \ldblquote\\nHora depois da modifica\'e7\'e3o: \f1\fs8\ldblquote  \f3\fs16\'ab t.getHour \line 71 \line 72 \i\f1\fs20 II \i0\f3\fs16 Perigoso: uma chamada de fun\'e7\'e3o que retorna \line 73 \i\f1\fs22 II \i0\f3\fs16 uma refer\'eancia pode ser usada como um ivalue! \line 74 t.badSetHour(12) \f1\fs10 = \f3\fs16 74; \line 75 cout \'ab \ldblquote\\n\\n***********************************\\n \line 76 \'ab \ldblquote PR\'c1TICA RUIM DE \f0 PROGRAMA\'c7\'c3O!!! \f3 ! ! ! ! \\n\rdblquote  \line 77 \'ab \ldblquote badSetHour como um lvalue, Hora: \f1\fs8\ldblquote  \line\f3\fs16 78 \f0\fs20\'ab \f3\fs16 t.getHour() \line 79 \'ab \ldblquote\\n*********************************** \'ab endi; \line 80 \line 81 return 0; \line 82 \line Hora antes da modifica\'e7\'e3o: 20 \line Hora depois da modifica\'e7\'e3o: 30 \line PR\'c1TICA RUIM DE PROGRAMA\'c7\'c3O! ! !!!!! \line badSetHour como um lvalue, Hora: 74 \line\b\f1\fs18 Fig. 6.11 Retornando \b0\fs20 uma refer\'eancia a um membro de dados private \fs8 - \fs20 figO 6_li. cpp \line\f0 O programa come\'e7a declarando o objeto t, do tipo Time, e a refer\'eancia hourRef, \'e0 qual \'e9 atribu\'edda a refer\'eancia \line retornada pela chamada t \f1\fs8 . \f0\fs20 badSetHour (20) \f1\fs8 . \f0\fs20 O programa!\'f7xibe o valor do \i\f1 alias \i0\f3\fs16 hourRef. \f0\fs20 Em seguida, o \i\fs18 alias \line\i0\fs20\'e9 usado para inicializar o valor de hour com 30 (um valor inv\'e1lido) e o valor \'e9 novamente exibido. Finalmente, a \line pr\'f3pria chamada da fun\'e7\'e3o \'e9 usada como um \i\fs18 Ivalue, \i0\fs20 ao qual \'e9 atribu\'eddo o valor 74 (outro valor inv\'e1lido), e o valor \line\'e9 exibido. \fs24\par
\b\f1\fs14 CAP\'cdTULO \fs20 6 \b0\fs8 - \b\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \fs20 431 \line\fs26 6.16 Atribui\'e7\'e3o usando c\'f3pia membro a membro default \line\b0\f0\fs18 O operador de atribui\'e7\'e3o \f1\fs20 (=) \f0\fs18 pode ser usado para atribuir um objeto a um outro objeto do mesmo tipo. Tal atribui\'e7\'e3o \'e9, por default, executada por \i\fs20 c\'f3pia membro a membro \i0\f1\fs8 - \f0\fs18 cada membro de um objeto \'e9 copiado (atribu\'eddo) individualmente para o mesmo membro em um outro objeto (ver Fig. 6.12). (Nota: a c\'f3pia membro a membro pode causar problemas s\'e9rios quando usada com uma classe cujos membros de dados cont\'eam mem\'f3ria alocada dinamicamente; no Cap\'edtulo 8, \ldblquote Sobrecarga de operadores\rdblquote , discutiremos esses problemas e mostraremos como trat\'e1-los). \line Os objetos podem ser passados como argumentos de fun\'e7\'e3o e podem ser retornados por fun\'e7\'f5es. Tal passagem e retorno s\'e3o executados, por default, atrav\'e9s de chamada por valor \f1\fs8 - \f0\fs18 uma c\'f3pia do objeto \'e9 passada ou retornada (apresentamos v\'e1rios exemplos no Cap\'edtulo 8). \line\i Dica de desempenho 6.4 \line\i0\f1\fs8 ______ \i\f0\fs18 Passar um objeto atrav\'e9s de chamada por valor \'e9 bom do ponto de vista de seguran\'e7a porque a fun\'e7\'e3o chamada n\'e3o tem nenhum acesso ao objeto original, mas as chamadas por valor podem degradar o desempenho quando um programa fizer uma c\'f3pia de um objeto grande. Um objeto pode ser passado atrav\'e9s de uma chamada por refer\'eancia, passando um ponteiro ou uma refer\'eancia para o objeto. A chamada por refer\'eancia oferece um bom desempenho, mas \'e9 inferior do ponto de vista da seguran\'e7a porque a fun\'e7\'e3o chamada recebe acesso ao objeto original. A chamada por refer\'eancia \i0 const \i\fs20\'e9 uma alternativa segura e de bom desempenho. \line\b\i0\f3\fs16 1 \b0\f0\fs18 // \b\f3\fs16 Fig. 6.12: \b0\f0\fs18 figO6l2.cpp \line\b\f3\fs16 2 \b0\f0\fs18 // \b\f3\fs16 Demonstrando \b0\f0\fs18 que \b\f3\fs16 objetos de classes podem ser atribuidos \line 3 \b0\i\f0\fs20 II \b\i0\f3\fs16 uns aos outros usando a c\'f3pia membro a membro por default \line 4 \b0\f0\fs18 #include <iostream> \line\b\f3\fs16 5 \line 6 using std: :cout; \line 7 using std: :endl; \line 8 \line 9 \b0\i\f0\fs20 II \b\i0\f3\fs16 Classe Date simples \line 10 class Date \line\b0\f0\fs18 11 public: \line\b\f3\fs16 12 Data( int \b0\f1\fs10 = \b\f3\fs16 1, int =1, int =1990 ); \b0\f0\fs18 // \b\f3\fs16 construtor default \line 13 void printO; \line 14 private: \line 15 int month; \line 16 int day; \line 17 int year; \line 18 \}; \line 19 \line 20 \b0\i\f0\fs20 1/ \b\i0\f3\fs16 Construtor simples de Date, sem consist\'eancia de intervalos \line 21 Date::Date( int m, int d, int y \line 22 \b0\f0\fs18\{ \line\b\f3\fs16 23 month \b0\f1\fs10 = \b\f3\fs16 m; \line 24 day=d; \line 25 year \b0\f1\fs10 = \line\b\f3\fs16 26 \b0\f0\fs18\} \line\b\f3\fs16 27 \line 28 \b0\f0\fs18 // \b\f3\fs16 Imprime a Date no formato dd/mm/aaaa \line 29 void Date: :print() \line 30 \b0\f0\fs18\{ \b\f3\fs16 cout \'ab day \'ab \b0\i\f0\fs20\lquote 1 \i0\fs18\'ab \b\f3\fs16 month \'ab \b0\i\f0\fs20\lquote 1\rquote  \b\i0\f3\fs16\'ab year; \line 31 \line 32 int main \b0\f0\fs18 O \line\b\f3\fs16 33 \b0\f0\fs18\{ \line\b\f3\fs16 34 Date datel( 7, 4, 1993 \f1\fs20 ), \f3\fs16 date2; \b0\f0\fs18 // \b\f3\fs16 date2 recebe default de 1/1/90 \line\f1\fs18 Fig. 6.12 \b0\fs20 Atribuindo um objeto a um outro por c\'f3pia membro a membro default (parte 1 de 2). \f0\fs24\par
\b\f1\fs20 432 \f3\fs18 C++ \f1\fs14 COMO PROGRAMAR \line\f0\fs16 35 \line\f3\fs18 36 cout \'ab \lquote datei \b0\f1\fs12 = \line\b\f3\fs18 37 datei.printO; \line 38 cout \'ab \ldblquote\\ndate2 \b0\f1\fs12 = \line\b\f3\fs18 39 date2.printO; \line 40 NoCapft \line 41 date2 datei; \i\f0\fs22 II \i0\f3\fs18 atribui\'e7\'e3o por c\'f3pia, membro a membro, por default membro \line\f0\fs16 42 cout \f3\fs18\'ab \ldblquote\\n\\nAp\'f3s c\'f3pia default membro a membro, date2 \b0\f1\fs12 = \ldblquote  \f0\fs18 tes daqu \line\b\fs16 43 date2 print \f1\fs20 () \f3\fs18 ; colocand \line\f0\fs16 44 cout \'ab endi; \line\b0\f3\fs18 45 dados);u \line\b 46 return \b0 0; docoma \line\b\f0\fs16 47 \f1\fs20\} \b0\f3\fs18 Floord \line\f0 para \line\b\f3 datei \b0\f1\fs12 = \b\f3\fs18 4/7/1993 eitensde \line date2 \b0\f1\fs12 = \b\f3\fs18 1/1/1990 \line Ap\'f3s c\'f3pia default membro a membro, date2 \b0\f1\fs12 = \b\f3\fs18 4/7/1993 \f1\fs20 E \line\f3\fs18 Fig. 6.12 \b0\f1\fs20 Atribuindo um objeto a um outro por c\'f3pia membro a membro default (parte 2 de 2). \line\b\fs26 6.17 Reutiliza\'e7\'e3o de software \line\b0\f0\fs18 As pessoas que escrevem programas orientados a objetos se concentram em implementar classes \'fateis. Existe uma \line tremenda oportunidade de capturar e catalogar classes de forma que elas possam ser acessadas por grandes segmentos \line da comunidade de programa\'e7\'e3o. Existem muitas \i bibliotecas de classes \i0 e outras est\'e3o sendo desenvolvidas em \line todo o mundo. Esfor\'e7os est\'e3o sendo feitos no sentido de tomar essas bibliotecas amplamente acess\'edveis. Softwares \line est\'e3o sendo cada vez mais constru\'eddos a partir de componentes existentes, bem-definidos, cuidadosamente testados, \line bem-documentados, port\'e1veis e amplamente dispon\'edveis. Este tipo de reutiliza\'e7\'e3o de software acelera o desenvolvimento \line de softwares poderosos e de alta qualidade. O \i desenvolvimento r\'e1pido de aplicativos \f1 (RAD, \f0 rapid aplications \line development) \i0 atrav\'e9s dos mecanismos de reutiliza\'e7\'e3o de componentes se tornou um campo importante. \line Problemas significativos, por\'e9m, devem ser resolvidos antes que todo o potencial da reutiliza\'e7\'e3o de software \line possa ser percebido. Necessitamos de esquemas de cataloga\'e7\'e3o, esquemas de licenciamento, mecanismos de prote\'e7\'e3o, \line para assegurar que as c\'f3pias mestres de classes n\'e3o sejam corrompidas, esquemas de descri\'e7\'e3o, de maneira que \line os projetistas de novos sistemas possam determinar se objetos existentes satisfazem suas necessidades, mecanismos \line de navega\'e7\'e3o e busca, para determinar quais classes est\'e3o dispon\'edveis e qu\'e3o adequadas elas s\'e3o para os requisitos \line do desenvolvedor de software, etc. Muitos problemas de pesquisa e desenvolvimento interessantes necessitam ser \line resolvidos. Existe uma grande motiva\'e7\'e3o para resolver esses problemas porque o valor potencial de suas solu\'e7\'f5es \'e9 \line enorme. \line\b\f1\fs26 6.18 (Estudo de caso opcional) Pensando em objetos: come\'e7ando a \line programar as classes para o simulador de elevador \b0\fs20 Fig. 6.13 \line\f0\fs18 Nas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote , nos Cap\'edtulos 1 a 5, introduzimos os fundamentos da orienta\'e7\'e3o a objetos e \b\i\fs22 Implemei \line\b0\i0\fs18 desenvolvemos um projeto orientado a objetos para um simulador de elevador. No corpo do Cap\'edtulo 6, introduzi- Para que ur \line mos os detalhes da programa\'e7\'e3o com classes de C++. Agora, come\'e7amos a implementar nosso projeto orientado a para o obje \line objetos em C++. Nesta se\'e7\'e3o, usaremos nossos diagramas de classes UML para esbo\'e7ar os arquivos de cabe\'e7alho de o objeto da \line C++ que definem nossas classes. A Fig. 5.3 \line\b\i\fs22 Implementa\'e7\'e3o: visibilidade \b0\i0\f1\fs8 ________ \line\f0\fs18 No corpo do Cap\'edtulo 6, introduzimos os especificadores de acesso \b\f3 public e private. Antes de criarmos os \b0\f1\fs10 * \f0\fs18 N. de R.T.: \line arquivos de cabe\'e7alho das classes, precisamos primeiro considerar quais elementos de nosso diagrama de classes ingl\'eas \b\fs16\'e9 \b0\f1 lar \line\f0\fs18 devem ser public e quais elementos devem ser private. Em situa\'e7\'f5 \line ponteiros (o \fs24\par
\b\fs14 CAP\'cdTULO \b0\f1\fs18 6 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs22 433 \line\b0\i\f0\fs18 Observa\'e7\'e3o de engenharia de software 6.24 \line\i0\f1\fs8 ______ \i\f0\fs18 Cada elemento de uma classe deve ter visibilidade \i0 private \i at\'e9 que possa ser provado que o elemento necessita de visibilidade \i0\f1 public. \line No Cap\'edtulo 6, \f0 discutimos \f1 porque membros de dados deveriam, em geral, ser \f0 private. \f1 mas e quanto \'e0s \f0 fun\'e7\'f5es \f1 membro? As opera\'e7\'f5es de uma classe s\'e3o suas fun\'e7\'f5es membro. Estas opera\'e7\'f5es precisam ser invocadas por clientes daquela classe; portanto, as fun\'e7\'f5es membro devem ser public. Na UML, visibilidade public \'e9 indicada colocando-se um sinal de mais (+) antes de um elemento particular (i.e., uma fun\'e7\'e3o membro ou um membro de dados); um sinal de menos (-) indica visibilidade private. A Fig. 6.13 mostra nosso diagrama de classes atualizado com as nota\'e7\'f5es de visibilidade inclu\'eddas. (Observe que adicionamos a opera\'e7\'e3o personArrives \'e0 classe Floor do nosso diagrama de seq\'fc\'eancia na Fig. 4.27). Na medida em que escrevemos os arquivos de cabe\'e7alho de C++ para as classes em nosso sistema, automaticamente colocamos os itens designados com \fs8\ldblquote +\ldblquote  \fs18 nas se\'e7\'f5es public e itens designados com \fs8\ldblquote -\ldblquote  \fs18 nas se\'e7\'f5es private das declara\'e7\'f5es de classes. \f0\fs24\par
\f1\fs18 processTime(time : int) : void \line\b Fig. \b0 6.13 Diagrama completo de classes com nota\'e7\'f5es de visibilidade. \f0\fs24\par
\f1\fs18 <nenhuma ainda> runSimulation() : void \line\b\i\f0\fs22 Implementa\'e7\'e3o: handies \line\b0\i0\f1\fs18 Para que um objeto da classe A possa se comunicar com um objeto da classe B, o objeto da classe A deve ter um \i\f0\fs20 handle* \line\i0\f1\fs18 para o objeto da classe B. Isto significa que ou o objeto da classe A precisa conhecer o nome do objeto da classe B ou \line o objeto da classe A precisa manter uma refer\'eancia (Se\'e7\'e3o 3. 17) ou um ponteiro (Cap\'edtulo \i\fs22 5) \i0\fs18 para o objeto da classe B. \line A Fig. 5.36 continha uma lista de colabora\'e7\'f5es entre os objetos de nosso sistema. As classes na coluna \'e0 esquerda da \line\fs8 * \f0\fs16 N. de R.T.: uma tradu\'e7\'e3o seria \b\i\fs14 man\'edpulo, \b0\i0\fs16 ou seja, algo que se pode usar para acessar e manipular outro objeto; no entanto, o termo original em \line ingl\'eas \'e9 largamente usado e, por isso, foi mantido no texto. \line Em situa\'e7\'f5es em que o nome do objeto da classe B n\'e3o est\'e1 dispon\'edvel para o objeto da classe A, vamos preferir usar refer\'eancias em vez de \line ponteiros (onde apropriado), porque refer\'eancias s\'e3o inerentemente mais seguras do que ponteiros. \fs24\par
\f1\fs20 Elevator \f0\fs24\par
\f1\fs18 crrentFloor: int \fs10 = \fs18 1 direction enum \fs10 = \fs18 up capacity: int \fs10 = \fs18 1 arrivalTime : int moving : bool \fs10 = \fs18 false \f0\fs24\par
\f1\fs20 Clock \f0\fs24\par
\f1\fs18 time : int \fs10 = \fs18 O getTime () int tick() void \f0\fs24\par
\f1\fs20 Doar \f0\fs24\par
\ul\f1\fs18 open \ulnone : \ul bool \fs10 = \fs18 false \ulnone openDoor() : void closeDoor() : void \f0\fs24\par
\f1\fs20 processTime (time : int) : void personEnters() void \line personExits() : void \line summonElevator() void prepareToLeave() : void \f0\fs24\par
\f1\fs20 Floor \f0\fs24\par
\f1\fs18 occupied : bool \fs10 = \fs18 false elevatorArrived() : void isOccupied(): bool \f0\fs24\par
\f1\fs20 Scheduler \f0\fs24\par
\f1\fs20 BelI \line <nenhuma ainda> \f0\fs24\par
\f1\fs20 floorlArrivalTime int floor2ArrivalTime : int \f0\fs24\par
\f1\fs20 ringBell() : void \f0\fs24\par
\f1\fs20 FloorButton \f0\fs24\par
\ul\f1\fs18 pressed bool \fs10 = \fs18 false \ulnone pressButton() : void resetButton() : void \f0\fs24\par
\f1\fs20 Person \f0\fs24\par
\f1\fs20 Light \f0\fs24\par
\f1\fs20 ID: int \line stepOntoFloor() : void exitElevator() : void enterElevator() : void \f0\fs24\par
\f1\fs20 ElevatorButton \f0\fs24\par
\f1\fs18 pressed : bool \fs10 = \fs18 false resetButton() : void pressButton() : void \f0\fs24\par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1353\pard\intbl\f1\fs18 on : bool \fs10 = \fs18 false \f0\fs24\cell\fs20\row
\f1\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1353\intbl turnOff() : void \f0\fs24\cell\fs20\row
\f1\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1353\intbl turnOn() void \f0\fs24\cell\fs20\row
\f1\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1353\intbl Building \f0\fs24\cell\fs20\row
\pard\fs24\par
\pard\sb100\sa240\b\fs18 434 C++ COMO PROGRAMAR \b0\fs24\par
\fs18 tabela precisam de um \i handie \i0 para cada uma das classes na coluna \'e0 direita da tabela, para enviar mensagens \'e0quelas classes. A Fig. 6.14 lista os \b\i\fs20 handies \b0\i0\fs18 para cada classe, com base na informa\'e7\'e3o mostrada na tabela da Fig. 5.36. \line No corpo do Cap\'edtulo 6, discutimos como implementar \b\i\fs20 handies \b0\i0\fs18 em C++ como refer\'eancias e ponteiros para classes (e, novamente, vamos preferir refer\'eancias em vez de ponteiros, onde apropriado). Essas refer\'eancias ent\'e3o se tornam atributos (dados) da classe. Enquanto n\'e3o discutirmos composi\'e7\'e3o, no Cap\'edtulo 7, n\'e3o podemos representar cada item da Fig. 6.14cm nossos arquivos de cabe\'e7alho de classes. Discutiremos tais casos especiais em breve. \fs24\par
\b\f1\fs18 Fig. 6.14 \b0\fs20 Lista de \i handies \i0 para cada classe. \line\b\i\f0 Implementa\'e7\'e3o: arquivos de cabe\'e7alho de classes \line\b0\i0\fs18 Agora que discutimos a programa\'e7\'e3o de classes em C++, estamos prontos para come\'e7ar a escrever o c\'f3digo para nosso simulador de elevador. Nesta se\'e7\'e3o, examinamos os arquivos de cabe\'e7alho para cada classe em nosso sistema. Na se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote  no fim do Cap\'edtulo 7, apresentamos o c\'f3digo C++ completo, que funciona, para o simulador. No Cap\'edtulo 9, modificamos aquele c\'f3digo para incorporar heran\'e7a. \line Para demonstrar a ordem em que construtores e destruidores s\'e3o executados, codificaremos um construtor e um destruidor para cada uma de nossas classes que simplesmente exibem mensagens indicando que tais fun\'e7\'f5es est\'e3o sendo executadas. Inclu\'edmos os prot\'f3tipos do construtor e do destruidor em nossos arquivos de cabe\'e7alho; inclu\'edmos suas implementa\'e7\'f5es nos arquivos \f1\fs8 . \f0\fs18 cpp apresentados no Cap\'edtulo 7. \line A Fig. 6.15 lista o arquivo de cabe\'e7alho para a classe Bell. Trabalhando a partir de nosso diagrama de classes (Fig. 6.13), declaramos um construtor, um destruidor (linhas 8 e 9) e a fun\'e7\'e3o membro ringBell (linha 10); cada uma destas fun\'e7\'f5es membro tem visibilidade public. N\'e3o identificamos nenhum outro elemento public ou private para esta classe, de modo que nosso arquivo de cabe\'e7alho est\'e1 completo. \line\b\f3 1 \b0\f0 // bell.h \line\b\f3 2 \b0\f0 // \b\f3 Defini\'e7\'e3o para a classe Bell \line 3 #ifndef BELLH \line 4 #define BELL_H \line 5 \line 6 \line 7 \line 8 \line 9 \line 10 \line 11 ); \line 12 \line 13 #endif \b0\f0\fs24\par
\f1\fs20 1 \i II \i0 c \line\b\fs18 2 \b0\i\fs20 /1 \i0\f0\fs16 D \line\f1\fs20 3 \b\f3\fs18 #ifn \line 4 #def \line 5 \line 6 das \line 7 \b0\f0\fs16 pubi \line 8 \b\f3\fs18 Clc \line 9 -Cl \line 10 voi \line 11 int \line 12 priv \line 13 int \b0\f0\fs24\par
\fs18 A Fig. 6.16 \line e as fun\'e7\'f5es \line em nosso ai \line Uma vez po \line objeto da cl \fs24\par
\b\f3\fs18 14 \}; \line 15 \line 16 #end: \line\f1 Fig. 6.16 / \line\b0\f0\fs20 AFig.6.171 \line a 14) as opa \line 6.13). Tamb \line da pessoa. L \line Objet \line din\'e2mica, \'e0\rquote  \line diferentemei \line objetos dina \line classe Pers \line\f1 1 \i II \line\b\i0\f0\fs14 2 \b0\fs20 // \b\fs14 DE \line\f3\fs18 3 #ifnc \line 4 #defi \line 5 \line 6 class \line 7 \b0\f0\fs16 publi \line\b\f3\fs18 8 Per, \line 9 -Pei \line 10 int \line 11 \line 12 voic \line 13 voic \line 14 voic \line 15 priva \line\f0\fs14 16 \f3\fs18 int \line 17 \}; \line 18 \line\ul\f0\fs14 19 #endi \ulnone\line\f1\fs18 Fig. 6.17 Ar \b0\f0\fs24\par
\b\f3\fs18 class Beil \b0\f0\fs20\{ \line public: \line\b\f3\fs18 BellO; \line -Bell() \line void ringBellQ; \b0\f0\fs24\par
\i\f1\fs20 II \b\i0\f3\fs18 construtor \b0\i\f1\fs20 II \b\i0\f3\fs18 destruidor \b0\i\f1\fs20 II \b\i0\f3\fs18 toca a \b0\f0\fs20 campainha \fs24\par
\fs18 // \b\f3\fs16 BELLH \b0\f0\fs24\par
\b\f1\fs18 Fig. 6.15 \b0 Arquivo de cabe\'e7alho da classe Bell. \f0\fs24\par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\pard\intbl\b\f3\fs18 Classe \b0\f0\fs24\cell\b\f3\fs18 Handles \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl Elevator \b0\f0\fs24\cell\b\f3\fs18 ElevatorButton, Beli, Floor, \b0\f0\fs24\cell\b\f3\fs18 Door \b0\f0\fs24\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl Clock \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl Scheduler \b0\f0\fs24\cell\b\f3\fs18 Person, Floor \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl Person \b0\f0\fs24\cell\b\f3\fs18 FloorButton, ElevatorButton, \b0\f0\fs24\cell\b\f3\fs18 Elevator, \b0\f0\fs24\cell\b\f3\fs18 Floor \b0\f0\fs24\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl Floor \b0\f0\fs24\cell\b\f3\fs18 FloorButton, Light \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl FloorButton \b0\f0\fs24\cell\b\f3\fs18 Elevator \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl ElevatorButton \b0\f0\fs24\cell\b\f3\fs18 Elevator \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl Door \b0\f0\fs24\cell\b\f3\fs18 Person \b0\f0\fs24\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl Beil \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl Light \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\b\f3\fs18\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1621\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4862\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6051\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6808\intbl Building \b0\f0\fs24\cell\b\f3\fs18 Clock, Scheduler, Elevator \b0\f0\fs24\cell\cell\cell\fs20\row
\pard\fs24\par
\pard\sb100\sa240\fs18 CAP\'cdTULO 6 \f1\fs8 - \f0\fs18 CLASSES E ABSTRA\'c7\'c3O DE DADOS 435 \line A Fig. 6.16 lista o arquivo de cabe\'e7alho para a classe Clock. Inclu\'edmos um construtor e um destruidor (linhas 8 e 9) \line e as fun\'e7\'f5es membro public tick \i\f1\fs22 () \i0\f0\fs18 e getTime \i\f1\fs22 O \i0\f0\fs18 (linhas 10 e 11) da Fig. 6.13. Implementamos o atributo time \line em nosso arquivo de cabe\'e7alho de classe declarando um membro de dados private time, do tipo int (linha 13). \line Uma vez por segundo em nossa simula\'e7\'e3o, um objeto da classe Building invoca a fun\'e7\'e3o membro getTime de um \line objeto da classe Clock para obter o valor atual de time e invoca a fun\'e7\'e3o membro tick para incrementar time. \line\i\f1\fs22 II \i0\f0\fs18 clock.h \line // Defini\'e7\'e3o para a classe Clock \line\b\f3\fs16 #ifndef CLOCKH \line #define CLOCK H \line 6 class Clock \line 7 public: \line 8 ClockO; \line 9 -Clock(); \line 10 void tickO; \line 11 int getTime \line 12 private: \line 13 int time; \line 14 \}; \line 15 \line 16 #endif \b0\f0\fs18 // \b\f3\fs16 CLOCKH \line\f1\fs18 Fig. \b0\fs20 6.16 Arquivo de cabe\'e7alho da classe Clock. \line\f0\fs18 A Fig. 6.17 lista o arquivo de cabe\'e7alho para a classe Person. Declaramos o atributo ID (linha 16) e (nas linhas 12 \line a 14) as opera\'e7\'f5es stepOntoFloor, enterElevator e exitElevator de nosso diagrama de classes (Fig. \line 6.13). Tamb\'e9m declaramos uma fun\'e7\'e3o membro public getlD (linha 10), que retorna o n\'famero de identifica\'e7\'e3o \line da pessoa. Usaremos esta opera\'e7\'e3o para monitorar as pessoas em nossa simula\'e7\'e3o. \line Objetos da classe Person n\'e3o s\'e3o criados no in\'edcio da simula\'e7\'e3o \f1\fs8 - \f0\fs18 eles s\'e3o criados aleatoriamente, de forma din\'e2mica, \'e0 medida que a simula\'e7\'e3o \'e9 executada. Por essa raz\'e3o, precisamos implementar objetos da classe Person diferentemente dos objetos de nossas outras classes em nosso sistema. Depois de discutirmos como criar novos objetos dinamicamente, no Cap\'edtulo 7, acrescentaremos elementos significativos ao arquivo de cabe\'e7alho para a classe Person. \line\i\f1\fs20 II \i0\f0\fs18 person.h \line\i\f1\fs22 II \b\i0\f3\fs16 Defini\'e7\'e3o da classe Person \line #ifndef PERSONH \line #define PERSONH \line 6 class Person \line 7 public: \line 8 Person( int ); \line 9 PersonO; \line 10 int getIDO; \line 11 \line void stepOntoFloorQ; \line void enterElevator \line void exitElevator \line private: \line int ID; \b0\f0\fs18 // \b\f3\fs16 n\'famero de identifica\'e7\'e3o \'fanico da pessoa \line 19 #endif \b0\i\f1\fs22 II \b\i0\f3\fs16 PERSONH \b0\f0\fs24\par
\b\f3\fs16 1 \line 2 \line 3 \line 4 \line 5 \b0\f0\fs24\par
\fs20 // \b\f3\fs16 construtor \line\b0\i\f1\fs20 II \b\i0\f3\fs16 destruidor \line\b0\i\f1\fs22 II \b\i0\f3\fs16 incrementa o rel\'f3gio em um segundo \line\b0\f0\fs20 // \b\f3\fs16 retorna a hora atual do rel\'f3gio \b0\f0\fs24\par
\b\f3\fs16 1 \line 2 \line 3 \line 4 \line 5 \b0\f0\fs24\par
\i\f1\fs20 II \b\i0\f3\fs16 construtor \line\b0\f0\fs20 // \b\f3\fs16 destruidor \line\b0\f0\fs20 // \b\f3\fs16 retorna a identifica\'e7\'e3o da pessoa \b0\f0\fs24\par
\b\f3\fs16 12 \line 13 \line 14 \line\b0\f0\fs20 15 \line\b\f3\fs16 16 \line 17 \line 18 \b0\f0\fs24\par
\b\f1\fs18 Fig. 6.17 \b0 Arquivo de cabe\'e7alho da classe \b\f0\fs16 Person. \b0\fs24\par
\b\f1\fs22 436 \b0\fs20 C++ \b\fs16 COMO \f0\fs14 PROGRAMAR \line\b0\fs18 A Fig. 6.18 lista o arquivo de cabe\'e7alho para a classe Door. Declaramos \b\f3\fs16 um \b0\f0\fs18 construtor e um destruidor (linhas 8 e \line 9) e as fun\'e7\'f5es membro public openDoor e closeDoor nas linhas 11 e 12. Declaramos o membro de dados \line private open da classe na linha 14. A tabela na Fig. 6.14 mostra que a classe Door precisa de um \i\fs20 handie \i0\fs18 para a \line classe Person. Entretanto, como os objetos da classe Person s\'e3o criados dinamicamente em nosso sistema, ainda \line estamos inseguros, neste ponto, sobre como implementar \i\fs20 handies \i0\fs18 para objetos da classe Person. Depois de discutirmos \line objetos criados dinamicamente, no Cap\'edtulo 7, teremos uma id\'e9ia melhor de como implementar \i\fs20 handies \i0\fs18 para \line a classe Person. \line\i\fs20 II \i0\fs18 door.h \line // \b\f3\fs16 Defini\'e7\'e3o para a classe Door \line #ifndef DOORH \line #define DOORH \line class Door \b0\f0\fs18\{ \line\b\f3\fs16 public: \line Door(); \line -Door(); \line\b0\f1\fs20 Fig. 6.18 \b\f3\fs16 Arquivo \b0\f1\fs20 de cabe\'e7alho da classe Door. \line\f0\fs18 Listamos o arquivo de cabe\'e7alho para a classe Light na Fig. 6.19. A informa\'e7\'e3o do diagrama de classes na Fig. \line 6.13 nos leva a declarar as fun\'e7\'f5es membro \b\f3\fs16 public turnOn e turnOff e o membro \b0\f0\fs18 de dados private, do tipo 6 \line bool, on. Nesse arquivo de cabe\'e7alho, tamb\'e9m introduzimos algo novo em nossa implementa\'e7\'e3o \f1\fs8 - \f0\fs18 a necessidade 7 \line de distinguir entre objetos diferentes da mesma classe em nosso sistema. Sabemos que a simula\'e7\'e3o cont\'e9m dois \b\fs14 8 \line\b0\fs18 objetos da classe Light: um objeto pertence ao primeiro andar e o outro objeto pertence ao segundo andar. Quere- 9 \line mos ser capazes de distinguir entre estes dois objetos para fins de sa\'edda de dados, de modo que precisamos dar um 10 \line nome a cada um deles. Portanto, acrescentamos a linha 14 \b\fs14 11 \line\b0\fs18 char \b\fs16 *ne; \b0\i\fs20 II \b\i0\f3\fs16 em e andar a luz est\'e1 ligada \line\b0\f0\fs18\'e0 se\'e7\'e3o private da declara\'e7\'e3o da classe. Tamb\'e9m adicionamos um par\'e2metro char \f1\fs12 * \f0\fs18 ao construtor (linha 8), de \line modo que ele possa inicializar o nome de cada objeto da classe Light. \fs24\par
\b\f3\fs16 1 \line\f1 2 \line\f3 3 \line 4 \line 5 \line 6 \line 7 \line 8 \line 9 \line 10 \b0\f0\fs24\par
\b\f3\fs16 13 \line 14 \line 15 \line 16 \line 17 \line\b0\f1\fs20 Fig \f0\fs24\par
\fs20 AF \fs24\par
\fs20 um \line mcii \line a sii \line dccl \fs24\par
\fs18 // \b\f3\fs16 construtor \line\b0\f0\fs18 // \b\f3\fs16 destruidor \line\b0\f0\fs18 // aberta ou fechada \fs24\par
\b\f3\fs16 11 void openDoor \line 12 void closeDoorO; \line 13 private: \line 14 bool open; \line 15 \}; \line 16 \line 17 #endif \b0\f0\fs20 // \b\f3\fs16 DOORH \b0\f0\fs24\par
\fs20 Tam vai invo \line\f1 naFi \line\f0 estes obje \fs24\par
\b\f3\fs16 15 \line 16 \line 17 \line 18 \line 19 \line 20 \line 21 \b0\f0\fs24\par
\f1\fs20 Fig. \f0\fs24\par
\fs20 A Fig fun\'e7\'f5 dor. A \fs24\par
\fs20 inclu\'ed como \fs24\par
\f1\fs18 Fig. 6.19 Arquivo de cabe\'e7alho da classe \b\f3\fs16 Light \b0\f1\fs18 (parte 1 de 2). \f0\fs24\par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\pard\intbl\b\f3\fs16 1 \b0\f0\fs24\cell\i\fs18 II \b\i0\f3\fs16 light.h \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\pard\intbl\b\f3\fs16 2 \b0\f0\fs24\cell\fs20 // \b\f3\fs16 Defini\'e7\'e3o para a \b0\f0\fs24\cell\b\f3\fs16 classe Light \b0\f0\fs24\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\pard\intbl\b\f3\fs16 3 \b0\f0\fs24\cell\b\f3\fs16 #ifndef LIGHTH \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\intbl 4 \b0\f0\fs24\cell\b\f3\fs16 #define LIGHTH \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\intbl 5 \b0\f0\fs24\cell\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\intbl 6 \b0\f0\fs24\cell\b\f3\fs16 class Light \b0\f0\fs20\{ \fs24\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\intbl 7 \b0\f0\fs24\cell\fs20 public: \fs24\cell\cell\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\pard\intbl\b\f3\fs16 8 \b0\f0\fs24\cell\b\f3\fs16 Light( char \b0\f1\fs12 * \f0\fs16 ); \i\fs20 II \i0\fs24\cell\b\f3\fs16 construtor \b0\f0\fs24\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\pard\intbl\b\f3\fs16 9 \b0\f0\fs24\cell\b\f3\fs16 -Light(); \b0\f0\fs24\cell\i\fs20 II \i0\fs24\cell\b\f3\fs16 destruidor \b0\f0\fs24\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\intbl 10 \b0\f0\fs24\cell\b\f3\fs16 void turnOn \b0\f0\fs24\cell\i\fs20 II \i0\fs24\cell\b\f3\fs16 liga a luz \b0\f0\fs24\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\intbl 11 \b0\f0\fs24\cell\b\f3\fs16 void turnOff \b0\f0\fs20 O; \fs24\cell\i\fs20 II \i0\fs24\cell\b\f3\fs16 desliga a \b0\f0\fs24\cell\b\f3\fs16 luz \b0\f0\fs24\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1966\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2316\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3493\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3998\intbl 12 \b0\f0\fs24\cell\b\f3\fs16 private: \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\pard\fs24\par
\pard\sb100\sa240\fs16 CAP\'cdTULO 6 \f1\fs8 - \f0\fs16 CLASSES E ABSTRA\'c7\'c3O DE DADOS \b\f1\fs22 437 \line\b0\f0\fs16 13 bool on; \i\f1\fs20 II \i0\f0\fs16 ligada ou desligada \line\b\f3 14 char *name; \b0\i\f1\fs20 II \b\i0\f3\fs16 em \b0\f0 que \b\f3 andar a luz est\'e1 ligada \line 15 \}; \line 16 \line 17 #endif \b0\i\f1\fs20 II \b\i0\f3\fs16 LIGHTH \line\f1\fs18 Fig. \b0\fs20 6.19 Arquivo de cabe\'e7alho da classe Light (parte 2 de 2). \line\f0\fs16 A Fig. 6.20 lista o arquivo de cabe\'e7alho para a classe \b\f3 Building. \b0\f0 A se\'e7\'e3o public da declara\'e7\'e3o da classe inclui \line um construtor, um destruidor e a fun\'e7\'e3o membro runSimulation da Fig. 6.13. Quando identificamos pela primeira vez a opera\'e7\'e3o runSimulation, no Cap\'edtulo 4, n\'e3o sab\'edamos que objeto iria invocar a fun\'e7\'e3o para iniciar \line a simula\'e7\'e3o. Agora que \fs24 j\'e1 \fs16 discutimos classes em C++, sabemos que um objeto da classe Building precisa ser \line declarado em main e que main ir\'e1 ent\'e3o invocar runSimulation. O c\'f3digo no programa principal \'e9: \line Buildirig building; \i\f1\fs20 II \i0\f0\fs16 cria o objeto Buildirig \line building.runSimulationQ; \i\f1\fs20 II \i0\f0\fs16 invoca runSimulation \line Tamb\'e9m optamos por incluir um par\'e2metro do tipo int na declara\'e7\'e3o de runSimulation. O objeto building vai executar a simula\'e7\'e3o do elevador pelo n\'famero de segundos passado para o objeto atrav\'e9s desse par\'e2metro. A invoca\'e7\'e3o anterior de runSimulation incluiria, ent\'e3o, um n\'famero indicando a dura\'e7\'e3o da simula\'e7\'e3o. A tabela na Fig. 6.14 indica que a classe Building precisa de \i\f1\fs20 handies \i0\f0\fs16 para seus objetos compostos. N\'e3o podemos implementar estes \i\f1\fs20 handies \i0\f0\fs16 neste ponto porque ainda n\'e3o discutimos composi\'e7\'e3o. Portanto, retardamos a implementa\'e7\'e3o dos objetos componentes da classe Building at\'e9 o Cap\'edtulo 7 (ver os coment\'e1rios nas linhas 14 a 18 na Fig. 6.20). \line\b\f3 1 \b0\i\f1\fs20 II \i0\f0\fs16 building.h \line\b\f3 2 \b0\i\f1\fs20 II \b\i0\f3\fs16 Defini\'e7\'e3o \b0\f0 para a classe Building \line\b\f3 3 #ifndef BUILDINGH \line 4 #define BUILDINGH \line 5 \line 6 class Building \line 7 \b0\f0 public: \line\b\f3 8 Building \b0\i\f1\fs20 II \b\i0\f3\fs16 construtor \line 9 -BuildingO; \b0\f0 // \b\f3 destruidor \line\b0\f0 10 \line\b\f3 11 \b0\i\f1\fs20 II \b\i0\f3\fs16 executa a simula\'e7\'e3o por um per\'edodo de tempo especificado \line 12 void runSimulationO; \line 13 private: \line 14 \b0\i\f1\fs20 II \b\i0\f3\fs16 No Cap\'edtulo 7, mostramos como incluir: \line 15 \b0\i\f1\fs20 II \b\i0\f3\fs16 um objeto da classe Clock \line 16 \b0\f0 // \b\f3 um objeto da classe Scheduler \line 17 \b0\i\f1\fs20 II \b\i0\f3\fs16 um objeto da classe Elevator \line 18 \b0\i\f1\fs22 II \b\i0\f3\fs16 dois objetos da classe Floor \line 19 \line 20 \line 21 #endif \b0\i\f1\fs22 II \b\i0\f3\fs16 BUILDINGH \line\b0\f1\fs20 Fig. 6.20 Arquivo de cabe\'e7alho da classe Building. \line\f0\fs16 A Fig. 6.21 lista o arquivo de cabe\'e7alho para a classe ElevatorButton. Declaramos o atributo pressed, as fun\'e7\'f5es membro pressButton e resetButton (do diagrama de classes da Fig. 6.13) e o construtor e o destruidor. A Fig. 6.14 afirma que a classe ElevatorButton precisa de um \i\fs20 handie \i0\fs16 para o elevador. Na linha 19 \line Elevator &elevatorRef; \line inclu\'edmos este \i\fs20 handie \i0\fs16 (observe que usamos uma refer\'eancia para implementar o \i\fs20 handie). \i0\fs16 No Cap\'edtulo 7, discutimos como enviar mensagens para o elevador usando esta refer\'eancia. \fs24\par
\b\f1\fs22 438 C++ \f0\fs16 COMO \b0\fs18 PROGRAMAR \line Uma refer\'eancia precisa ser inicializada quando \'e9 declarada, mas n\'e3o estamos autorizados a atribuir um valor \line para um membro de dados de uma classe no arquivo de cabe\'e7alho. Portanto, uma refer\'eancia deve ser inicializada no construtor; passamos uma refer\'eancia Elevator ao construtor, como um par\'e2metro, na linha \fs24 10. \line A linha 6 \par
\b\f3\fs16 class Elevator; \b0\f0\fs24\par
\i\fs20 II \b\i0\f3\fs16 declara\'e7\'e3o antecipada \i (forward) \b0\i0\f0\fs24\par
\fs20\'e9 uma \i declara\'e7\'e3o antecipada (forward) \i0 da classe Elevator. A declara\'e7\'e3o antecipada nos permite declarar uma refer\'eancia para um objeto da classe Elevator no arquivo de cabe\'e7alho da classe ElevatorButton.2 \fs24\par
\b\f3\fs16 1 \b0\f0\fs20 // \b\f3\fs16 elevatorButton.h \line 2 \b0\i\f0\fs20 II \b\i0\f3\fs16 Defini\'e7\'e3o para a classe ElevatorButton \line 3 #ifndef ELEVATORBUTTQNH \line 4 #define ELEVATORBUTTONH \line\b0\f0 5 \fs24\par
\b\f3\fs16 6 class Elevator; \b0\f0\fs24\par
\fs16 7 \fs24\par
\b\f3\fs16 class ElevatorButton \line public: \line ElevatorButton( Elevator & ); \line -ElevatorButton \b0\f0\fs20 O; \fs24\par
\b\f3\fs16 void pressButton void resetButtonQ; \line private: \line bool pressed; \b0\f0\fs24\par
\fs20 // \b\f3\fs16 refer\'eancia ao elevador do bot\'e3o Elevator &elevatorRef; \line #endif \b0\f0\fs20 // \b\f3\fs16 ELEVATORBUTTONH \b0\f0\fs24\par
\i\fs18 II \b\i0\f3\fs16 construtor \line\b0\i\f0\fs18 II \b\i0\f3\fs16 destruidor \b0\f0\fs24\par
\i\fs20 II \b\i0\f3\fs16 pressiona o bot\'e3o \line\b0\i\f0\fs20 II \b\i0\f3\fs16 desliga o bot\'e3o \line\b0\i\f0\fs20 II \b\i0\f3\fs16 estado do bot\'e3o \b0\f0\fs24\par
\b\f1\fs18 Fig. 6.21 \b0\fs20 Arquivo de cabe\'e7alho da classe \b\f0\fs16 ElevatorButton. \line\b0\fs18 A Fig. 6.22 lista o arquivo de cabe\'e7alho para a classe FloorButton. Esse arquivo de cabe\'e7alho \'e9 id\'eantico ao arquivo de cabe\'e7alho para a classe ElevatorButton, exceto pelo fato de declararmos um membro de dados private floorNumber, do tipo int. Objetos da classe FloorButton n\'e3o precisam saber a que andar eles pertencem, para fins de sa\'edda de dados do simulador. O n\'famero do andar \'e9 passado como um argumento para o construtor, para fins de inicializa\'e7\'e3o (linha 10). \fs24\par
\b\f1\fs18 Fig. 6.22 \b0 Arquivo de cabe\'e7alho da classe \f0\fs16 FloorButton \f1\fs18 (parte 1 de 2). \f0\fs24\par
\fs20 // \b\f3\fs16 declara\'e7\'e3o antecipada (forward) \b0\f0\fs24\par
\fs16 8 \line\b\f3 9 \line 10 \line 11 \line 12 \line 13 \line 14 \line 15 \line 16 \line 17 \line 18 \line 19 \line 20 \line 21 \line 22 \b0\f0\fs24\par
\b\fs16 1: \line 1: \b0\fs24\par
\fs16 14 \fs24\par
\fs16 1 \fs24\par
\fs16 lE \line 1 \line\b\f3 2C \b0\f0\fs24\par
\b\f3\fs16 21 \line\f1 F \b0\f0\fs24\par
\f1\fs12 2 \f0\fs14 Usar a declara\'e7\'e3o antecipada (onde poss\'edvel), em vez de incluir o cabe\'e7alho completo, ajuda a evitar um problema do pr\'e9-processador chamado \line de inclus\'e3o circular. Discutimos o problema da inclus\'e3o circular em mais detalhes no Cap\'edtulo 7. \fs24\par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2917\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3206\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3697\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\pard\intbl\b\f3\fs16 1 \b0\f0\fs24\cell\i\fs18 II \b\i0\f3\fs16 floorButton.h \b0\f0\fs24\cell\cell\cell\cell\cell\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\pard\intbl\b\f3\fs16 2 \b0\f0\fs24\cell\i\fs20 II \b\i0\f3\fs16 Defini\'e7\'e3o para a classe FloorButton \b0\f0\fs24\cell\cell\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2917\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3206\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3697\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\pard\intbl\b\f3\fs16 3 \b0\f0\fs24\cell\b\f3\fs16 #ifndef FLOORBUTTONH \b0\f0\fs24\cell\cell\cell\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2917\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3206\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3697\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\intbl 4 \b0\f0\fs24\cell\b\f3\fs16 #define FLOORBUTTONH \b0\f0\fs24\cell\cell\cell\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2917\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3206\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3697\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\intbl 5 \b0\f0\fs24\cell\cell\cell\cell\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2917\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3206\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3697\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\intbl 6 \b0\f0\fs24\cell\b\f3\fs16 class Elevator; \b0\f0\fs24\cell\cell\cell\i\fs20 II \i0\fs24\cell\b\f3\fs16 declara\'e7\'e3o \b0\f0\fs24\cell\b\f3\fs16 antecipada \b0\f0\fs24\cell\b\f3\fs16 (forward) \b0\f0\fs24\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2917\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3206\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3697\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\intbl 7 \b0\f0\fs24\cell\cell\cell\cell\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2917\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3206\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3697\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\intbl 8 \b0\f0\fs24\cell\b\f3\fs16 class FloorButton \b0\f0\fs24\cell\cell\cell\cell\cell\cell\cell\fs20\row
\b\f3\fs16\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2917\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3206\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3697\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\intbl 9 \b0\f0\fs24\cell\b\f3\fs16 public: \b0\f0\fs24\cell\cell\cell\cell\cell\cell\cell\fs20\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3206\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3697\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4118\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5295\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6472\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7553\pard\intbl\b\f3\fs16 10 \b0\f0\fs24\cell\b\f3\fs16 FloorButton( int, Elevator & \b0\f0\fs24\cell\b\f3\fs16 ); \b0\f0\fs24\cell\fs20 // \fs24\cell\b\f3\fs16 construtor \b0\f0\fs24\cell\cell\cell\fs20\row
\pard\fs24\par
\pard\sb100\sa240\fs18 CAP\'cdTULO \f1\fs20 6 \fs8 - \f0\fs18 CLASSES E ABSTRA\'c7\'c3O DE DADOS \b\f1\fs20 439 \line\f0\fs16 11 -FloorButtonQ; \b0\fs18 // \b\fs16 destruidor \line 12 \line\f3 13 void pressButtonO; \b0\i\f0\fs20 II \b\i0\f3\fs16 pressiona o bot\'e3o \line 14 void resetButton(); \b0\i\f0\fs20 II \b\i0\f3\fs16 desliga o bot\'e3o \line 15 private: \line 16 int floorNuinber; \b0\f0\fs18 // \b\f3\fs16 n\'famero do andar do bot\'e3o \line 17 bool pressed; \b0\i\f0\fs20 II \b\i0\f3\fs16 estado do bot\'e3o \line 18 \line 19 \b0\f0\fs18 // \b\f3\fs16 refer\'eancia ao elevador do bot\'e3o \line 20 Elevator &elevatorRef; \line 21 ); \line 22 \line 23 #endif \b0\f0\fs18 // \b\f3\fs16 FLOORBUTTONH \line\f1\fs20 Fig. 6.22 \b0 Arquivo de cabe\'e7alho da classe \f0\fs18 FloorButton \f1\fs20 (parte 2 de 2). \line\f0\fs18 A Fig. 6.23 lista o arquivo de cabe\'e7alho para a classe Scheduler. Nas linhas 23 e 24 \line\b\f3\fs16 int floorlArrivalTime; \line int floor2ArrivalTime; \line declaramos \b0\f0\fs18 os \b\f3\fs16 membros de dados private da classe Scheduler. que \b0\f0\fs18 correspondem aos \b\f3\fs16 atributos que identificamos para esta classe (Fig. \b0\f0\fs18 6.13). Na linha 12, declaramos a fun\'e7\'e3o membro public processTime, que corresponde \'e0 opera\'e7\'e3o que identificamos na se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote , no fim do Cap\'edtulo 4. \line Nas linhas 15 a 19, declaramos as fun\'e7\'f5es que identificamos no diagrama de seq\'fc\'eancia da Fig. 4.27. Cada uma dessas fun\'e7\'f5es recebe como par\'e2metro uma refer\'eancia para um objeto da classe Floor. Note que n\'e3o listamos essas fun\'e7\'f5es como opera\'e7\'f5es (i.e., fun\'e7\'f5es membro public) porque tais m\'e9todos n\'e3o s\'e3o invocados por objetos clientes. Em vez disso, estes m\'e9todos s\'e3o usados somente pela classe Scheduler para executar suas pr\'f3prias a\'e7\'f5es internas. Portanto, colocamos estes m\'e9todos na se\'e7\'e3o private da declara\'e7\'e3o da classe. \line Nas linhas 21 e 22, declaramos os \i\fs20 handies \i0\fs18 identificados na Fig. 6.14. Novamente, implementamos cada \i\fs20 handie \i0\fs18 como uma refer\'eancia para um objeto da classe Floor. A classe Scheduler precisa destes \i\fs20 handies \i0\fs18 para que ela possa enviar a mensagem isOccupied para os dois andares na simula\'e7\'e3o (ver diagrama na Fig. 4.27) Tamb\'e9m precisamos fazer uma declara\'e7\'e3o antecipada da classe Floor na linha 6 para que possamos declarar as refer\'eancias. \line\b\f3\fs16 1 \b0\i\f0\fs20 1/ \b\i0\f3\fs16 scheduler.h \line 2 \b0\f0\fs18 // \b\f3\fs16 Defini\'e7\'e3o para a classe Scheduler \line 3 #ifndef SCHEDULERH \line 4 #define SCHEDULERH \line 5 \line 6 class Floor; \b0\i\f0\fs20 II \b\i0\f3\fs16 declara\'e7\'e3o antecipada \i (forward) \line\i0 7 \line 8 class Scheduler \b0\f0\fs18\{ \line\b\f3\fs16 9 public: \line 10 Scheduler( Floor \f0 &, \f3 Floor & ); \b0\f0\fs18 // \b\f3\fs16 construtor \line 11 -Schedu1erO; \b0\f0\fs18 // \b\f3\fs16 destruidor \line 12 void processTime( int ); \b0\i\f0\fs20 II \b\i0\f3\fs16 inicializa a hora do scheduler \line 13 private: \line 14 \line 15 \b0\f0\fs18 // \b\f3\fs16 m\'e9todo \b0\f0\fs18 que \b\f3\fs16 escalona as chegadas para um andar espec\'edfico \line 16 void scheduleTime( Floor & ); \line 17 \line 18 \b0\f0\fs18 // \b\f3\fs16 m\'e9todo \b0\f0\fs18 que \b\f3\fs16 retarda as chegadas para um andar espec\'edfico \line 19 void delayTime( Floor & ); \line 20 \line 21 Floor &floorlRef; \line\b0\f1\fs20 Fig. 6.23 Arquivo de cabe\'e7alho da classe \f0\fs18 Scheduler \f1\fs20 (parte 1 de 2). \f0\fs24\par
\i\f1\fs22 440 \b\i0\fs18 C++ \b0\fs14 COMO PROGRAMAR \line\b\f3\fs16 22 Floor &floor2Ref; \line 23 int floorlArrivalTime; \line 24 int floor2ArrivalTime; \line 25 \}; \line 27 #endif \b0\f0 // \b\f3 SCHEDULERH \line\f1\fs18 Fig. \b0 6.23 Arquivo de cabe\'e7alho da classe Scheduler (parte 2 de 2). \line\f0\fs16 A Fig. 6.24 lista o arquivo de cabe\'e7alho para a classe Floor. Declaramos as fun\'e7\'f5es membro public elevatorArrived, isOccupied e personArrives da Fig. 6.13. Tamb\'e9m declaramos a fun\'e7\'e3o membro public elevatorLeaving na linha 26. Adicionamos essa fun\'e7\'e3o membro para que o elevador possa avisar ao andar quando estiver se preparando para sair. O elevador invoca a opera\'e7\'e3o \b\f3 elevatorLeaving e o andar \b0\f0 responde desligando a luz. \line Na linha 31, adicionamos um membro de dados private \'e0 classe \f1\fs8 - \f0\fs16 adicionamos esse valor para fins de sa\'edda de dados, da mesma maneira que fizemos com o membro de dados floorNuitber da classe FloorButton. Tamb\'e9m adicionamos um par\'e2metro do tipo int ao construtor, de modo que o construtor possa inicializar o membro de dados. Tamb\'e9m declaramos o \i\f1\fs20 handie \i0\f0\fs16 para a classe Elevator identificado na Fig. 6.14. Deixamos para o Cap\'edtulo 7 a declara\'e7\'e3o dos membros componentes da classe Floor (ver linhas 28 e 33). \line\b\f3 1 \b0\f0 // floor.h \line\b\f3 2 \b0\f0 // Defini\'e7\'e3o para a classe Floor \line\b\f3 3 #ifndef FLOORH \line 4 #define FLOOR H \line 5 \b0\f1\fs8 - \line\b\f3\fs16 6 class Elevator; \b0\i\f1\fs20 II \b\i0\f3\fs16 declara\'e7\'e3o antecipada \i (forward) \line\b0\i0\f1\fs30 1 \line\b\fs18 8 \f3\fs16 class Floor \b0\f0\{ \line\b\f3 9 public: \line 10 Floor( int, Elevator & ); \b0\i\f1\fs20 II \b\i0\f3\fs16 construtor \line 11 -Floor(); \b0\i\f1\fs20 /1 \b\i0\f3\fs16 destruidor \line 12 \line 13 \b0\f0 // \b\f3 retorna true se o andar est\'e1 ocupado \line 14 bool isOccupiedO; \line 15 \line 16 \b0\i\f1\fs20 // \i0\f0\fs16 retorna o n\'famero do andar \line 17 int getwuniber(); \line 18 \line 19 \i\f1\fs20 /1 \b\i0\f3\fs16 passa um handle para \b0\f0 uma \b\f3 nova pessoa chegando no andar \line 20 void personArrivesO; \line 21 \line 22 \b0\f0 // \b\f3 avisa o andar \b0\f0 que \b\f3 o elevador chegou \line 23 void elevatorArrivedQ; \line 24 \line 25 \b0\f0 // \b\f3 avisa o andar \b0\f0 que \b\f3 o elevador est\'e1 saindo \line 26 void elevatorLeavingO; \line 27 \line 28 \b0\i\f1\fs20 II \b\i0\f3\fs16 declara\'e7\'e3o do componente FloorButton (ver Cap\'edtulo 7) \line 29 \line 30 private: \line 31 int floorNumber; \b0\i\f1\fs22 II \b\i0\f3\fs16 o n\'famero do andar \line 32 Elevator &elevatorRef; \b0\i\f1\fs20 II \b\i0\f3\fs16 ponteiro para o elevador \line 33 \b0\i\f1\fs22 II \b\i0\f3\fs16 declara\'e7\'e3o do componente Light (ver Cap\'edtulo 7) \line 34); \line 35 \line 36 #endif \b0\f0 // \b\f3 FLOORH \line\b0\f1\fs18 Fig. 6.24 Arquivo de cabe\'e7alho da classe Floor. \f0\fs24\par
\fs14 CAP\'cdTULO \b\f1\fs20 6 \b0\fs8 - \f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \b\f1\fs20 441 \line\b0\f0 Listamos o arquivo de cabe\'e7alho para a classe Elevator na Fig. 6.25. Na se\'e7\'e3o public do arquivo de cabe\'e7alho, declaramos as opera\'e7\'f5es summonElevator, prepareToLeave e processTime listadas na Fig. 6.13. Para diferenciar entre pessoas no andar e pessoas no elevador, renomeamos as duas \'faltimas opera\'e7\'f5es listadas sob a classe Elevator. Chamamos estas opera\'e7\'f5es de passengerEnters e passengerExits e as declaramos na se\'e7\'e3o public do arquivo de cabe\'e7alho. Tamb\'e9m declaramos uma refer\'eancia para cada um dos dois andares (linhas 38 e 39); o construtor (linha 10) inicializa essas refer\'eancias. \line Na se\'e7\'e3o private do arquivo de cabe\'e7alho, declaramos os atributos moving, direction, currentFloor \line e arrivalTime da Fig. 6.13. N\'e3o precisamos declarar o atributo capacity; em vez disso, escreveremos nosso c\'f3digo de forma a assegurar que somente uma pessoa possa estar no elevador a cada momento. \line 1 \i\f1\fs22 II \i0\f0\fs20 elevator.h \line\b\f3\fs16 2 \b0\i\f1\fs20 II \b\i0\f3\fs16 Defini\'e7\'e3o para a classe Elevator \line 3 #ifndef ELEVATORH \line 4 #define ELEVATORH \line 5 \line 6 class Floor; \b0\i\f1\fs20 II \b\i0\f3\fs16 declara\'e7\'e3o antecipada \i (forward) \line\i0 7 \line 8 class Elevator \line 9 public: \line 10 Elevator( Floor \b0\f1\fs14 &, \b\f3\fs16 Floor & ); \b0\f0\fs20 // \b\f3\fs16 construtor \line 11 ElevatorO; \b0\f0\fs20 // \b\f3\fs16 destruidor \line 12 \line 13 \b0\i\f1\fs22 II \b\i0\f3\fs16 solicita \b0\f0 que \b\f3 o elevador atenda a um determinado andar \line 14 void summonElevator( int ); \line 15 \line 16 \b0\i\f1\fs22 II \b\i0\f3\fs16 prepara o elevador para sair \line 17 void prepareToLeave \line 18 \line 19 \b0\f0\fs20 // \b\f3\fs16 fornece a hora para o elevador \line 20 void processTime \b0\f0\fs20 ( \b\f3\fs16 int ); \line 21 \line 22 \b0\i\f1\fs22 II \b\i0\f3\fs16 avisa o elevador \b0\f0\fs20 que \b\f3\fs16 o passageiro est\'e1 entrando \line 23 void passengerEntersO; \line 24 \line 25 \b0\i\f1\fs22 II \b\i0\f3\fs16 avisa o elevador \b0\f0 que \b\f3 o passageiro est\'e1 saindo \line 26 void passengerExitsO; \line 27 \line 28 \b0\i\f1\fs22 II \b\i0\f3\fs16 declara\'e7\'e3o do componente ElevatorButton (ver Cap\'edtulo 7) \line 29 private: \line 30 bool moving; \b0\f0\fs20 // \b\f3\fs16 estado do elevador \line 31 int direction; \b0\f0\fs20 // \b\f3\fs16 dire\'e7\'e3o atual \line 32 int currentFloor; \b0\i\f1\fs22 II \b\i0\f3\fs16 posi\'e7\'e3o atual \line 33 \line 34 \b0\i\f1\fs20 II \b\i0\f3\fs16 hora para chegar em um andar \line 35 int arrivalTime; \line 36 \line 37 \b0\f0\fs20 // \b\f3\fs16 refer\'eancias aos andares atendidos pelo elevador \line 38 Floor &floorlRef; \line 39 Floor &floor2Ref; \line 40 \line 41 \b0\f0\fs20 // \b\f3\fs16 declara\'e7\'e3o do componente Door (ver Cap\'edtulo 7) \line 42 \b0\f0\fs20 // \b\f3\fs16 declara\'e7\'e3o do componente Bell (ver Cap\'edtulo 7) \line 43 \}; \line 44 \line 45 #endif \b0\f0\fs20 // \b\f3\fs16 ELEVATORH \line\b0\f1\fs20 Fig. 6.25 Arquivo de cabe\'e7alho da classe \f0\fs16 Elevator. \fs24\par
\b\fs14 442 C++ COMO PROGRAMAR \line\b0\i\fs22 Conclus\'e3o \i0\fs16 E \line Na pr\'f3xima se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote , apresentamos o c\'f3digo completo para nossa simula\'e7\'e3o de elevador. \fs12 U \line\fs16 Usaremos os conceitos apresentados no pr\'f3ximo cap\'edtulo para implementar relacionamentos compostos, cria\'e7\'e3o \f1\fs10\bullet  \f0\fs16 E \line din\'e2mica de objetos da classe Person e membros de dados e fun\'e7\'f5es static e const. Na se\'e7\'e3o \ldblquote Pensando em E \line objetos\rdblquote , no fim do Cap\'edtulo 9, usamos heran\'e7a para aprimorar ainda mais nosso projeto e implementa\'e7\'e3o de simu lado \line de elevador orientada a objetos. \line\b\i\f1\fs26 Resumo \b0\i0\f2\fs76 : \f1\fs8 . \line\f0\fs16\bullet  Estruturas s\'e3o tipos de dados agregados constru\'eddos a partir de dados de outros tipos. \line\bullet  O \line\bullet  A palavra-chave struct introduz uma defini\'e7\'e3o de estrutura. O corpo de uma estrutura \'e9 delimitado por chaves (\{ e \b\fs14\}). \b0\fs12 1 \line\fs16 Toda defini\'e7\'e3o de estrutura deve terminar com um ponto-e-v\'edrgula. \line\fs24\bullet o \line\fs16 Um nome de etiqueta de uma estrutura pode ser usado para declarar vari\'e1veis de um tipo de estrutura. \line\fs24\bullet o \line\fs16\bullet  As defini\'e7\'f5es de estrutura n\'e3o reservam espa\'e7o na mem\'f3ria; elas criam novos tipos de dados que s\'e3o usados para declarar \b\fs14 dl \line\b0\fs16 vari\'e1veis. \line\bullet  Os membros de uma estrutura ou uma classe s\'e3o acessados usando-se os operadores de acesso a membros \f1\fs8 - \f0\fs16 o operador ponto \f1\fs10\bullet  \f0\fs24 o \line\fs16 (.)e o operador seta \b\fs14 (->). \b0\fs16 O operador ponto acessa um membro de uma estrutura atrav\'e9s do nome da vari\'e1vel do objeto ou rn \line de uma refer\'eancia para o objeto. O operador seta acessa um membro de uma estrutura atrav\'e9s de um ponteiro para o objeto. \fs12 01 \line\fs16\bullet  As desvantagens de se criar novos tipos de dados com structs s\'e3o a possibilidade de ter dados n\'e3o-inicializados; inicializa\'e7\'e3o \f1\fs10\bullet  \line\f0\fs16 impr\'f3pria; todos os programas usando uma struct devem ser mudados se a implementa\'e7\'e3o da struct muda; e nenhuma ur \line prote\'e7\'e3o \'e9 fornecida para assegurar que os dados sejam mantidos em um estado consistente, com valores de dados apropria dos \line\f1\fs10\bullet  \f0\fs16 C \line\bullet  As classes habilitam o programador a modelar objetos com atributos e comportamentos. Os tipos de classe podem ser defini- \f1\fs10\bullet  \line\f0\fs16 dos em C++ usando as palavras-chave class e struct, mas a palavra-chave class \'e9 normalmente usada para este \line prop\'f3sito. \f1\fs10\bullet  \i\f0\fs22 Q \line\i0\fs16\bullet  O nome da classe pode ser usado para declarar objetos daquela classe. \fs12 CO \line\fs16\bullet  As defini\'e7\'f5es de classes come\'e7am com a palavra-chave das s. O corpo da defini\'e7\'e3o da classe \'e9 delimitado por chaves (\{ e \f1\fs10\bullet  \line\b\f0\fs14\}). \b0\fs16 As defini\'e7\'f5es de classe terminam com um ponto-e-v\'edrgula. \f1\fs10\bullet  \f0\fs16 C \line\bullet  Qualquer membro de dados ou fun\'e7\'e3o membro declarada depois de public: em uma classe \'e9 vis\'edvel para qualquer fun\'e7\'e3o \f1\fs10\bullet  \f0\fs16 Se \line com acesso a um objeto da classe. \line pe \line\bullet  Qualquer membro de dados ou fun\'e7\'e3o membro declarada depois de private: s\'f3 \'e9 vis\'edvel para friends e outros membros \line daclasse. \b\fs14 (1 \line\b0\fs16\bullet  Especificadores de acesso a membros sempre terminam com dois-pontos (:)e podem aparecer m\'faltiplas vezes e em qualquer \line ordem em uma defini\'e7\'e3o de classe. \line L)e \line\bullet  Os dados privados n\'e3o s\'e3o acess\'edveis de fora da classe, ser \line\bullet  A implementa\'e7\'e3o de uma classe deveria ser ocultada de seus clientes. \f1\fs10\bullet  \f0\fs16 O \line exe \line\bullet  Um construtor e uma fun\'e7ao membro especial, com o mesmo nome que a classe, que \'e9 usada para inicializar os membros de \line um objeto da classe. Um construtor de uma classe \'e9 chamado quando um objeto daquela classe \'e9 instanciado. \line\bullet  A fun\'e7\'e3o com o mesmo nome que a classe, mas precedido com um caractere til \'e9 chamada de destruidor. \b\i\f1\fs24 Tem \line\b0\i0\f0\fs16\bullet  O conjunto de fun\'e7\'f5es membro public de uma classe \'e9 chamado de interface ou interface p\'fablica da classe. arquiv \line\bullet  Quando uma fun\'e7\'e3o membro \'e9 definida fora da defini\'e7\'e3o da classe, o nome da fun\'e7\'e3o \'e9 precedido pelo nome da classe e o arqulv \line operador de resolu\'e7\'e3o de escopo bin\'e1rio (: \f1\fs10 :). \f0\fs16 atnbut \line d1as \line\bullet  As fun\'e7\'f5es membro definidas usando o operador de resolu\'e7\'e3o de escopo fora de uma defini\'e7\'e3o de classe est\'e3o dentro do classei \line escopo daquela classe, cliente \line\bullet  As fun\'e7\'f5es membro definidas em uma defini\'e7\'e3o de classe s\'e3o automaticamente colocadas mime. Ao compilador \'e9 reser- codigo \line vado o direito de n\'e3o colocar qualquer fun\'e7\'e3o mune. compol \line constru \fs24\par
\b\fs14 CAP\'cdTULO \b0\fs16 6 \f1\fs8 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs22 443 \line\b0\f0\fs16\bullet  Chamar fun\'e7\'f5es membro \'e9 mais conciso do que chamar fun\'e7\'f5es em programa\'e7\'e3o procedural porque a maioria dos dados usados pela fun\'e7\'e3o membro est\'e1 diretamente acess\'edvel no objeto. \line\bullet  Dentro do escopo de uma classe, podem ser feitas refer\'eancias aos membros daquela classe simplesmente por seus nomes. Fora do escopo de uma classe, os membros da classe s\'e3o referenciados ou atrav\'e9s de um nome de objeto, uma refer\'eancia para um objeto ou um ponteiro para um objeto. \line\bullet  Operadores de sele\'e7\'e3o de membro e \f1\fs10 -> \f0\fs16 s\'e3o usados para acessar membros de classes. \line\bullet  Um princ\'edpio fundamental da boa engenharia de software \'e9 separar a interface da implementa\'e7\'e3o. \line\bullet  As defini\'e7\'f5es de classes s\'e3o normalmente colocadas em arquivos de cabe\'e7alho e as defini\'e7\'f5es de fun\'e7\'f5es membro s\'e3o normalmente colocadas em arquivos de c\'f3digo-fonte com o mesmo nome b\'e1sico. \line\bullet  O modo de acesso default para classes \'e9 private, de modo que todos os membros depois do cabe\'e7alho da classe e antes do primeiro especificador de acesso a membro s\'e3o considerados private. \line\bullet  Os membros p\'fablicos de uma classe apresentam uma vis\'e3o dos servi\'e7os que a classe oferece aos clientes da classe. \line\bullet  O acesso a dados privados de uma classe pode ser cuidadosamente controlado atrav\'e9s do uso de fun\'e7\'f5es membro chamadas de fun\'e7\'f5es de acesso. Se uma classe quiser permitir que os clientes leiam dados private, ela poder oferecer uma fun\'e7\'e3o \i get. \i0 Para habilitar os clientes a modificar dados private. a classe pode oferecer uma fun\'e7\'e3o \i set. \line\i0\bullet  Os membros de dados de uma classe s\'e3o normalmente declarados private e as fun\'e7\'f5es membro de uma classe s\'e3o normalmente declaradas public. Algumas fun\'e7\'f5es membro podem ser private e servem como fun\'e7\'f5es utililit\'e1rias para as outras fun\'e7\'f5es da classe. \line\bullet  Os membros de dados de uma classe n\'e3o podem ser inicializados em uma defini\'e7\'e3o de classe. Eles devem ser inicializados em um construtor ou seus valores podem ser \i inicializados \i0 depois de seu objeto ser criado. \line\bullet  Construtores podem ser sobrecarregados. \line\bullet  Uma vez que um objeto de classe seja corretamente inicializado, todas as fun\'e7\'f5es membro que manipulam o objeto devem assegurar que o objeto permane\'e7a em um estado consistente. \line\bullet  Quando um objeto de uma classe \'e9 declarado, podem ser fornecidos inicializadores. Estes inicializadores s\'e3o passados para o construtor da classe. \line\bullet  Construtores podem especificar argumentos default. \line\bullet  Construtores n\'e3o podem especificar tipos de retomo, nem podem tentar retomar valores. \line\bullet  Se nenhum construtor for definido para uma classe, o compilador cria um construtor default. Um construtor default fomecido pelo compilador n\'e3o executa qualquer inicializa\'e7\'e3o; assim, quando o objeto \'e9 criado, n\'e3o \'e9 garantido que esteja em um estado consistente. \line\bullet  O destruidor de um objeto autom\'e1tico \'e9 chamado quando o objeto sai do escopo. Na verdade, o destruidor propriamente dito n\'e3o destr\'f3i o objeto, mas executa a faxina\rdblquote  de t\'e9rmino antes de o sistema recuperar a mem\'f3ria usada pelo objeto. \line\bullet  Destruidores n\'e3o recebem argumentos e n\'e3o retomam valores. Uma classe pode ter s\'f3 um destruidor (destruidores n\'e3o podem ser sobrecarregados). \line\bullet  O operador de atribui\'e7\'e3o \'e9 usado para atribuir um objeto a outro objeto do mesmo tipo. Tal atribui\'e7\'e3o \'e9 normalmente executada por c\'f3pia membro a membro default. A c\'f3pia membro a membro n\'e3o \'e9 ideal para todas as classes. \line\b\i\f1\fs24 Terminologia \line\b0\i0\f0\fs16 arquivo de cabe\'e7alho construtor default \line arquivo de c\'f3digo-fonte controle de acesso a um membro \line atributo c\'f3pia membro a membro \line class defini\'e7\'e3o de classe \line classe \i proxy \i0 desenvolvimento r\'e1pido de aplicativos (RAD) \line cliente de uma classe destruidor \line c\'f3digo reutiliz\'e1vel encapsulamento \line comportamento escopo de arquivo \line construtor escopo de classe \fs24\par
\b\i\fs22 444 \i0\f1\fs18 C++ COMO \b0\f0 PROGRAMAR \fs24\par
\fs18 especificadores de acesso a membros estado consistente de um membro de dados \fs24\par
\fs16 estrutura \line estrutura auto-referente extensibilidade \line fun\'e7\'e3o auxiliar \line fun\'e7\'e3o de acesso \line fun\'e7\'e3o de consulta \line fun\'e7\'e3o \i get \line\i0 fun\'e7\'e3o membro \line fun\'e7\'e3o membro mime fun\'e7\'e3o n\'e3o-membro fun\'e7\'e3o predicado \line fun\'e7\'e3o \i set \line\i0 fun\'e7\'e3o utilit\'e1ria \line implementa\'e7\'e3o de uma classe \fs24\par
\fs18 inicializador de um membro inicializar um objeto de classe inst\'e2ncia de uma classe \line instanciar um objeto de uma classe interface de uma classe \fs24\par
\fs18 interface publie de uma classe membro de dados \line mensagem \line objeto \fs24\par
\b\i\fs22 Terminologia de \ldblquote Pensando em objetos\rdblquote  \b0\i0\fs24\par
\fs16 declara\'e7\'e3o antecipada \i (forward) handie \line\i0 problema da inclus\'e3o circular refer\'eancias vs. ponteiros \line s\'edmbolo \f1\fs8\ldblquote -\ldblquote  \f0\fs16 para visibilidade private \fs24\par
\b\i\f1 Erros comuns de programa\'e7\'e3o \b0\i0\f0\par
\fs16 objeto global \line objeto local est\'e1tico objeto local n\'e3o-est\'e1tico oculta\'e7\'e3o de informa\'e7\'f5es operador de refer\'eancia \f1\fs14 & \line\f0\fs16 operador de resolu\'e7\'e3o de escopo (: :) \fs24\par
\fs16 operador de resolu\'e7\'e3o de escopo bin\'e1rio (: :) \line operador de sele\'e7\'e3o de membro seta \b\f1 (.>) \line\b0\f0 operador de sele\'e7\'e3o membro (.e \b\f1 ->) \line\b0\f0 operador sele\'e7\'e3o de membro ponto \b\f1 (.) \line\b0\f0 operador seletor de membro de classe \b\f1 (.) \b0\f0\fs24\par
\fs16 princ\'edpio do m\'ednimo privil\'e9gio private \line programa\'e7\'e3o orientada a objetos (OOP) programa\'e7\'e3o procedural projeto orientado a objetos (OOD) protected \line pubiic \line reutiliza\'e7\'e3o de software servi\'e7os de uma classe til \b\f1 (-) \b0\f0 em nome de destruidor \fs24\par
\fs18 tipo de dados \line tipo de dados abstratos (ADT) tipo definido pelo programador tipo definido pelo usu\'e1rio \fs24\par
\fs16 s\'edmbolo \f1\fs8\ldblquote +\ldblquote  \f0\fs16 para visibilidade pubiic visibilidade \line visibilidade private visibilidade pubiic \fs24\par
\fs16 A express\'e3o (*timePtr) hour se refere ao membro hour da struct apontada por timePtr. Omitir os par\'eanteses, como em *timeptr.hour. seria um erro de sintaxe porque. tem uma preced\'eancia mais alta que \f1\fs14 *; \f0\fs16 assim, a express\'e3o seria executada como se estivesse inclu\'edda entre par\'eanteses, como em \f1\fs10 * \f0\fs16 (timeptr. hour) \f1\fs8 . \f0\fs16 Isso seria um erro de sintaxe porque com um ponteiro voc\'ea deve usar o operador seta para se referir a um membro. \line Esquecer o ponto-e-v\'edrgula, no fim de uma defini\'e7\'e3o de classe (ou estrutura), \'e9 um erro de sintaxe. Especificar um tipo de retorno e/ou um valor de retorno para um construtor \'e9 um erro de sintaxe. Tentar inicializar um membro de dados de uma classe explicitamente, na defini\'e7\'e3o da classe, \'e9 um erro de sintaxe. \line Quando estiver definindo fun\'e7\'f5es membro de uma classe fora dessa classe, omitir o nome da classe e operador de resolu\'e7\'e3o de escopo aplicado ao nome da fun\'e7\'e3o \'e9 um erro de sintaxe. \line Uma tentativa por uma fun\'e7\'e3o que n\'e3o \'e9 um membro de uma classe particular (ou um friend dessa classe) de acessar um membro privado dessa classe \'e9 um erro de sintaxe. \line Os membros de dados de uma classe n\'e3o podem ser inicializados na defini\'e7\'e3o da classe. \line Tentar declarar um tipo de retomo para um construtor e/ou tentar retornar um valor de um construtor s\'e3o erros de sintaxe. Especificar inicializadores default para a mesma fun\'e7\'e3o membro, tanto em um arquivo de cabe\'e7alho como na defini\'e7\'e3o da fun\'e7\'e3o membro. \line E um erro de sintaxe tentar passar argumentos para um destruidor, especificar um tipo de retorno para um destruidor (nem void pode ser especificado), retornar valores de um destruidor ou sobrecarregar um destruidor. \line Um construtor pode chamar outras fun\'e7\'f5es membro da classe, tais como fun\'e7\'f5es \i set \i0 ou \i get, \i0 mas, como o construtor est\'e1 inicializando o objeto, os membros de dados podem ainda n\'e3o estar em um estado consistente. Usar membros de dados antes de eles serem corretamente inicializados pode causar erros de l\'f3gica. \fs24\par
\b\f1\fs18 6.1 \b0\f0\fs24\par
\b\f1\fs16 6.2 \line\b0\f0\fs18 6.3 \line 6.4 \line\b\f1\fs16 6.5 \b0\f0\fs24\par
\b\f1\fs18 6.6 \b0\f0\fs24\par
\b\f1\fs16 6.7 \line 6.8 \line 6.9 \b0\f0\fs24\par
\b\f1\fs18 6.10 \b0\f0\fs24\par
\fs18 6.11 \fs24\par
\fs18 CAP\'cdTULO \i\fs16 6 \i0\f1\fs8 - \f0\fs18 CLASSES E ABSTRA\'c7\'c3O DE DADOS \b\f1\fs22 445 \line\i\fs24 Boas pr\'e1ticas de programa\'e7\'e3o \line\i0\f0\fs18 6.1 \b0 Para maior clareza e legibilidade, use cada especificador de acesso a membro s\'f3 uma vez em uma defini\'e7\'e3o de classe. Coloque membros public em primeiro lugar, onde eles s\'e3o mais f\'e1ceis de se localizar. \line 6.2 Use o nome do arquivo de cabe\'e7alho com o ponto substitu\'eddo por um sublinhado nas diretivas para o pr\'e9-processador #ifndef e #define de um arquivo de cabe\'e7alho. \line 6.3 Se voc\'ea optar por listar os membros private primeiro, em uma defini\'e7\'e3o de classe, use explicitamente o especificador de acesso a membro private. apesar do fato de que private \'e9 assumido por default. Isso melhora a clareza do \line programa. Nossa prefer\'eancia \'e9 listar primeiro os membros public de uma classe para enfatizar a interface da classe. \line\b 6.4 \b0 Apesar do fato de que os especificadores de acesso a membro public e private podem ser repetidos e misturados, liste todos os membros public de uma classe em um grupo primeiro e ent\'e3o liste todos os membros private em outro grupo. Isso focaliza a aten\'e7\'e3o do cliente sobre a interface p\'fablica da classe, em vez de sobre a implementa\'e7\'e3o da classe. \line 6.5 Quando for apropriado (quase sempre), forne\'e7a um construtor para assegurar que todo objeto seja corretamente inicializado com valores que tenham significado. Em particular, membros de dados do tipo ponteiro deveriam ser inicializados com \line algum valor de ponteiro v\'e1lido ou com O. \line\b 6.6 \b0 Declare valores default para os argumentos de uma fun\'e7\'e3o somente no prot\'f3tipo da fun\'e7\'e3o dentro da defini\'e7\'e3o da classe, no arquivo de cabe\'e7alho. \line 6.7 Fun\'e7\'f5es membro que \i\fs16 inicializam \i0\fs18 os valores de dados privados devem verificar se os novos valores pretendidos s\'e3o apropriados; se n\'e3o forem, a fun\'e7\'e3o \i\fs16 set \i0\fs18 deve colocar os membros de dados private em um estado consistente apropriado. \line\b 6.8 \b0 Nunca fa\'e7a uma fun\'e7\'e3o membro publie retornar uma refer\'eancia n\'e3o-const (ou um ponteiro) para um membro de dados private. Retornar uma refer\'eancia como essa viola o encapsulamento da classe. Na verdade, retornar qualquer refer\'eancia ou ponteiro para dados private \fs20 j\'e1 \fs18 torna o c\'f3digo cliente dependente da representa\'e7\'e3o dos dados da classe. Assim, deve ser evitado retornar ponteiros ou refer\'eancias para dados private. \line\b\i\f1\fs24 Dicas de desempenho \line\i0\f0\fs18 6.1 \b0 As estruturas s\'e3o geralmente passadas atrav\'e9s de chamadas por valor. Para evitar o \i\fs16 overhead \i0\fs18 de copiar uma estrutura, passe a estrutura atrav\'e9s de uma chamada por refer\'eancia. \line 6.2 Definir uma pequena fun\'e7\'e3o membro dentro da defini\'e7\'e3o de uma classe automaticamente a coloca iriline (se o compilador decidir assim). Isto pode melhorar o desempenho, mas n\'e3o promove a melhor engenharia de software porque os clientes da classe ser\'e3o capazes de ver a implementa\'e7\'e3o da fun\'e7\'e3o, e seu c\'f3digo deve ser recompilado se a defini\'e7\'e3o da fun\'e7\'e3o mime muda. \line 6.3 Na realidade, objetos cont\'eam s\'f3 dados, de modo que objetos s\'e3o muito menores do que se tamb\'e9m contivessem fun\'e7\'f5es. A aplica\'e7\'e3o do operador sizeof a um nome de classe ou a um objeto daquela classe retornar\'e1 somente o tamanho dos dados da classe. O compilador cria (somente) uma c\'f3pia das fun\'e7\'f5es membro, separada de todos os objetos da classe. Todos os objetos da classe compartilham essa c\'f3pia das fun\'e7\'f5es membro. Cada objeto, naturalmente, necessita de sua pr\'f3pria c\'f3pia dos dados da classe porque tais dados podem variar entre os objetos. O c\'f3digo da fun\'e7\'e3o n\'e3o \'e9 modific\'e1vel (tamb\'e9m chamado de \i\fs16 c\'f3digo reentrante \i0\fs18 ou \i\fs16 procedimento puro) \i0\fs18 e pode, conseq\'fcentemente, ser compartilhado por todos os objetos de uma classe. \line 6.4 Passar um objeto atrav\'e9s de chamada por valor \'e9 bom do ponto de vista de seguran\'e7a porque a fun\'e7\'e3o chamada n\'e3o tem nenhum acesso ao objeto original, mas as chamadas por valor podem degradar o desempenho quando um programa fizer uma c\'f3pia de um objeto grande. Um objeto pode ser passado atrav\'e9s de uma chamada por refer\'eancia, passando um ponteiro ou uma refer\'eancia para o objeto. A chamada por refer\'eancia oferece um bom desempenho, mas \'e9 inferior do ponto de vista da seguran\'e7a porque a fun\'e7\'e3o chamada recebe acesso ao objeto original. A chamada por refer\'eancia const \'e9 uma alternativa segura e de bom desempenho. \line\b\i\f1\fs24 Observa\'e7\'f5es de engenharia de software \line\i0\f0\fs18 6.1 \b0 Para evitar o \i\fs16 overhead \i0\fs18 de uma chamada por valor e ainda obter o benef\'edcio de que os dados originais da fun\'e7\'e3o que chamou estejam protegidos contra modifica\'e7\'f5es, passe par\'e2metros de tamanho grande como refer\'eancias const. \line 6.2 E importante escrever programas que sejam compreens\'edveis e f\'e1ceis de se manter. A mudan\'e7a \'e9 a regra e n\'e3o a exce\'e7\'e3o. Os programadores deveriam prever que seu c\'f3digo ser\'e1 modificado. Como veremos, o uso de classes pode facilitar a \line possibilidade de mudan\'e7as em programas. \fs24\par
\b\f1\fs20 446 C++ COMO \f0\fs14 PROGRAMAR \line 6.3 \b0\fs16 Os clientes de uma classe usam-na sem conhecer os detalhes internos de como a classe \'e9 implementada. Se a implementa\'e7\'e3o de classe for mudada (por exemplo, para melhorar o desempenho), desde que a interface da classe permane\'e7a constante, o c\'f3digo-fonte do cliente da classe n\'e3o necessita mudar (embora o cliente possa necessitar ser recompilado). Isso toma muito mais f\'e1cil modificar sistemas. \line 6.4 As fun\'e7\'f5es membro s\'e3o normalmente menores que as fun\'e7\'f5es em programas n\'e3o-orientados a objetos porque os dados armazenados nos membros de dados, idealmente, \fs20 j\'e1 \fs16 foram validados por um construtor e/ou por fun\'e7\'f5es membro que armazenam novos dados. Como os \ldblquote dados \fs20 j\'e1 \fs16 est\'e3o no objeto\rdblquote , a fun\'e7\'e3o membro freq\'fcentemente chamada n\'e3o tem nenhum argumento ou, pelo menos, menos argumentos que as chamadas t\'edpicas de fun\'e7\'e3o em linguagens n\'e3o-orientadas a objetos. Deste modo, as chamadas s\'e3o pequenas, as defini\'e7\'f5es de fun\'e7\'e3o idem e os prot\'f3tipos de fun\'e7\'e3o tamb\'e9m s\'e3o pequenos. \line 6.5 Clientes t\'eam acesso \'e0 interface de uma classe, mas n\'e3o devem ter acesso \'e0 implementa\'e7\'e3o de uma classe. \line\b\fs18 6.6 \b0\fs16 Declarar fun\'e7\'f5es membro dentro da defini\'e7\'e3o de uma classe (atrav\'e9s de seus prot\'f3tipos) e definir essas fun\'e7\'f5es fora da defini\'e7\'e3o da classe separa a interface da implementa\'e7\'e3o da classe. Isso promove a boa engenharia de software. Os clientes de uma classe n\'e3o podem ver a implementa\'e7\'e3o das fun\'e7\'f5es membro da classse e n\'e3o precisam ser recompilados se a implementa\'e7\'e3o muda. \line 6.7 Somente as fun\'e7\'f5es membro mais simples e as fun\'e7\'f5es membro mais est\'e1veis (i.e., sua implementa\'e7\'e3o provavelmente n\'e3o muda) devem ser definidas no cabe\'e7alho da classe. \line 6.8 Usar uma abordagem de programa\'e7\'e3o orientada a objetos freq\'fcentemente pode simplificar a chamada de fun\'e7\'f5es, reduzindo o n\'famero de argumentos a serem passados. Esse benef\'edcio da programa\'e7\'e3o orientada a objetos deriva-se do fato de que o encapsulamento de membros de dados e fun\'e7\'f5es membro dentro de um objeto d\'e1 \'e0s fun\'e7\'f5es membro o direito de acessar os membros de dados. \line\b\fs18 6.9 \b0\fs16 Um tema central deste livro \'e9 \ldblquote reutilize, reutilize, reutilize\rdblquote . Discutiremos cuidadosamente v\'e1rias t\'e9cnicas para \ldblquote polir\rdblquote  as classes, visaido a facilitar a sua reutiliza\'e7\'e3o. Concentrar-nos-emos em \ldblquote lapidar classes valiosas\rdblquote  e criar \ldblquote ativos de software\rdblquote  valiosos. \line\b\fs18 6.10 \b0\fs16 Coloque a declara\'e7\'e3o da classe em um arquivo de cabe\'e7alho para ser inclu\'eddo por qualquer cliente que queira usar a classe. Isso constitui a interface p\'fablica da classe (e fornece ao cliente os prot\'f3tipos de fun\'e7\'e3o de que ele necessita para poder chamar as fun\'e7\'f5es membro da classe). Coloque as defini\'e7\'f5es das fun\'e7\'f5es membro da classe em um arquivo-fonte. Isso constitui a implementa\'e7\'e3o da classe. \line\b\fs18 6.11 \b0\fs16 Os clientes de uma classe n\'e3o necessitam de acesso ao c\'f3digo-fonte da classe para utiliz\'e1-la. Por\'e9m, os clientes necessitam poder ligar seu c\'f3digo ao c\'f3digo objeto da classe. Isto encoraja vendedores de software independente (ISVs, \i independent software vendors) \i0 a oferecer bibliotecas de classes para venda ou licen\'e7a de uso. Os ISVs oferecem em seus produtos somente os arquivos de cabe\'e7alho e os m\'f3dulos objeto. Nenhuma informa\'e7\'e3o propriet\'e1ria \'e9 revelada \f1\fs8 - \f0\fs16 como seria o caso se fosse fornecido c\'f3digo-fonte. A comunidade de usu\'e1rios de C++ se beneficia tendo mais bibliotecas de classe dispon\'edveis, produzidas por ISVs. \line 6.12 As informa\'e7\'f5es importantes sobre a interface de uma classe deveriam ser inclu\'eddas no arquivo de cabe\'e7alho. As informa\'e7\'f5es que ser\'e3o usadas s\'f3 internamente na classe e n\'e3o ser\'e3o necessitadas por clientes da classe deveriam ser inclu\'eddas no arquivo-fonte n\'e3o-divulgado. Isso \'e9 outro exemplo do princ\'edpio do m\'ednimo privil\'e9gio. \line\b\fs18 6.13 \b0\fs16 C++ encoraja a constru\'e7\'e3o de programas que sejam independentes da implementa\'e7\'e3o. Quando muda a implementa\'e7\'e3o de uma classe usada por c\'f3digo independente de implementa\'e7\'e3o, aquele c\'f3digo n\'e3o necessita ser modificado. Se qualquer parte da interface da classe muda, o c\'f3digo independente de implementa\'e7\'e3o precisa ser recompilado. \line\b\fs18 6.14 \b0\fs16 Mantenha todos os membros de dados de uma classe private. Forne\'e7a fun\'e7\'f5es membro public para inicializar os valores dos membros de dados private e obter os valores dos membros de dados private. Esta arquitetura ajuda a esconder \b\fs14 a \b0\fs16 implementa\'e7\'e3o de uma classe de seus clientes, o que reduz bugs e aumenta a facilidade do programa ser modificado. \line 6.15 Os projetistas de classes usam membros private, protected e public para garantir a no\'e7\'e3o de oculta\'e7\'e3o de informa\'e7\'f5es e seguir o princ\'edpio do m\'ednimo privil\'e9gio. \line\b\fs18 6.16 \b0\fs16 O projetista de classes n\'e3o necessita fornecer fun\'e7\'f5es \i set \i0 e/ou \i get \i0 para cada item de dados private: esses recursos devem ser fornecidos somente quando for apropriado. Se o servi\'e7o \'e9 \'fatil para o c\'f3digo cliente, esse servi\'e7o deve ser inclu\'eddo na interface public da classe. \line 6.17 Fun\'e7\'f5es membro tendem a se enquadrar em v\'e1rias categorias diferentes: fun\'e7\'f5es que l\'eaem e retornam o valor de mcmbros de dados private: fun\'e7\'f5es que inicializam o valor de membros de dados private: fun\'e7\'f5es que implementam os servi\'e7os da classe; e fun\'e7\'f5es que executam v\'e1rias tarefas mec\'e2nicas para a classe, tais como inicializar objetos da classe, atribuir a objetos da classe, fazer a convers\'e3o entre classes e tipos primitivos ou entre classes e outras classes e administrar a mem\'f3ria para objetos da classe. \line\b\fs18 6.18 \b0\fs16 Um fen\'f4meno observado na programa\'e7\'e3o orientada a objetos \'e9 que, uma vez que esteja definida uma classe, criar e manipular objetos daquela classe geralmente envolve apenas efetuar uma seq\'fc\'eancia simples de chamadas a fun\'e7\'f5es membro \f1\fs8 - \f0\fs16 poucas, sen\'e3o nenhuma, estruturas de controle s\'e3o necess\'e1rias. Em contraste com isso, \'e9 comum ter-se estruturas de controle na implementa\'e7\'e3o das fun\'e7\'f5es membro de uma classe. \fs24\par
\b\fs14 CAP\'cdTULO \b0\fs16 6 \f1\fs8 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs22 447 \line\f0\fs18 6.19 \b0\fs16 Se uma fun\'e7\'e3o membro de uma classe \fs22 j\'e1 \fs16 oferece toda ou parte da funcionalidade exigida por um construtor (ou outra fun\'e7\'e3o membro) da classe, chame aquela fun\'e7\'e3o membro de dentro do construtor (ou de outra fun\'e7\'e3o membro). Isso simplifica a manuten\'e7\'e3o do c\'f3digo e reduz a probabilidade de um erro se for modificada a implementa\'e7\'e3o do c\'f3digo. Como regra geral: evite repetir c\'f3digo. \line 6.20 E poss\'edvel que uma classe n\'e3o tenha um construtor default, se forem constru\'eddos quaisquer construtores e nenhum deles for explicitamente um construtor default. \line 6.21 Como veremos (ao longo do restante do livro), construtores e destruidores t\'eam uma import\'e2ncia muito maior em C++ e na programa\'e7\'e3o orientada a objetos do que foi poss\'edvel transmitir em nossa breve introdu\'e7\'e3o aqui. \line 6.22 Tornar os membros de dados private e controlar o acesso, especialmente acesso para escrever, \'e0queles membros de dados atrav\'e9s de fun\'e7\'f5es membro publie ajuda a assegurar a integridade dos dados. \line 6.23 Acessar dados private atrav\'e9s de fun\'e7\'f5es membro \i\f1 set \i0\f0 e \i\f1 get \i0\f0 n\'e3o s\'f3 protege os membros de dados de receber valores inv\'e1lidos, como tamb\'e9m isola os clientes da classe da representa\'e7\'e3o dos membros de dados. Deste modo, se a representa\'e7\'e3o dos dados mudar, por alguma raz\'e3o (tipicamente para reduzir o volume de armazenamento exigido ou para melhorar o desempenho), somente as fun\'e7\'f5es membro necessitam ser mudadas \f1\fs8 - \f0\fs16 os clientes n\'e3o necessitam ser mudados desde que a interface fornecida pelas fun\'e7\'f5es membro permane\'e7a a mesma. Os clientes podem, por\'e9m, necessitar ser recompilados. \line 6.24 Cada elemento de uma classe deve ter visibilidade private at\'e9 que possa ser provado que o elemento necessita de visibilidade public. \line\b\i\f1\fs24 Dicas de teste e depura \'e7\'e3o \line\i0\f0\fs18 6.1 \b0\fs16 O fato de que chamadas de fun\'e7\'f5es membro geralmente n\'e3o passam nenhum, ou substancialmente menos, argumentos do que chamadas de fun\'e7\'e3o convencionais em linguagens n\'e3o-orientadas a objetos, reduz a probabilidade de passar os \line argumentos errados, os tipos errados de argumentos e/ou a quantidade errada de argumentos. \line 6.2 Use as diretivas para o pr\'e9-processador #ifndef. #define e #endif para evitar que arquivos de cabe\'e7alho sejam inclu\'eddos mais de uma vez em um programa. \line 6.3 Tornar os membros de dados de uma classe private e as fun\'e7\'f5es membro da classe public facilita a depura\'e7\'e3o porque os problemas com manipula\'e7\'f5es de dados ficam restritos ou a fun\'e7\'f5es membro da classe ou a friends da \line classe. \line\b\fs18 6.4 \b0\fs16 Toda fun\'e7\'e3o membro (e friend) que modifica membros de dados private de um objeto deve assegurar que os dados permane\'e7am em um estado consistente. \line 6.5 Os benef\'edcios da integridade de dados n\'e3o s\'e3o obtidos automaticamente apenas porque os membros de dados s\'e3o declarados como private \f1\fs8 - \f0\fs16 o programador deve providenciar a verifica\'e7\'e3o de validade. C++, por\'e9m, fornece uma estrutura \line na qual os programadores podem projetar programas melhores de maneira conveniente. \line\b\i\f1\fs24 Exerc\'edcios de auto-revis\'e3o \line\i0\f0\fs18 6.1 \b0\fs16 Preencha os espa\'e7os em branco em cada um dos seguintes itens: \line a) A palavra-chave \f1\fs8 ___________ \f0\fs16 introduz uma defini\'e7\'e3o de estrutura. \line b) Membros de classe s\'e3o acessados atrav\'e9s do operador junto com o nome de um objeto da classe ou \line atrav\'e9s do operador junto com um ponteiro para um objeto da classe. \line c) Membros de uma classe especificados como \f1\fs8 ___________ \f0\fs16 s\'e3o acess\'edveis somente a fun\'e7\'f5es membros e friends da classe. \line d) Um \f1\fs8 ___________ \f0\fs16\'e9 uma fun\'e7\'e3o membro especial usada para inicializar os membros de dados de uma classe. \line e) O acesso default para membros de uma classe \'e9 \f1\fs8 __________ \line\f0\fs16 f) Uma fun\'e7\'e3o \f1\fs8 ___________ \f0\fs16\'e9 usada para atribuir valores a membros de dados private de uma classe. \line g) pode ser usada para atribuir um objeto de uma classe a outro objeto da mesma classe. \line h) Fun\'e7\'f5es membro de uma classe s\'e3o normalmente declaradas \f1\fs8 _______________ \f0\fs16 e membros de dados de uma classe s\'e3o normalmente declarados \f1\fs8 ____________ \line\f0\fs16 i) Uma fun\'e7\'e3o \f1\fs8 ___________ \f0\fs16\'e9 usada para recuperar valores de dados de private de uma classe. \line\fs22 j) \b\fs18 O \b0\fs16 conjunto de fun\'e7\'f5es membro public de uma classe \'e9 chamado de \f1\fs8 _____________ \f0\fs16 da classe. \line k) Uma implementa\'e7\'e3o de classe \'e9 dita ocultada de seus clientes ou \f1\fs8 ____________ \line\f0\fs16 1) As palavras-chave \f1\fs8 ____________ \f0\fs16 e \f1\fs8 ____________ \f0\fs16 podem ser usadas para introduzir uma defini\'e7\'e3o de classe. \line m) Membros de uma classe especificados como \f1\fs8 ___________ \f0\fs16 s\'e3o acess\'edveis em qualquer lugar em que um objeto da classe est\'e1 no escopo. \fs24\par
\b\f1\fs14 448 \f0\fs18 C++ COMO PROGRAMAR \line\b0\fs16 6.2 Encontre o(s) erro(s) em cada um dos seguintes itens e explique como corrigi-lo(s). \line a) Assuma que o seguinte prot\'f3tipo seja declarado na classe Time. \line\f3\fs18 void \lquote Time \b\f1\fs14 ( \b0\f3\fs18 int ); \line b) O seguinte c\'f3digo \f0\fs16\'e9 uma defini\'e7\'e3o parcial da classe Time. \line\f3\fs18 class Time \line public: \line\i\f1 II \i0\f3 prot\'f3tipos de fun\'e7\'f5es \line private: \line int hour \f1\fs12 = \f3\fs18 O; \line int minute \f1\fs12 = \f3\fs18 O; \line int second \f1\fs12 = \f0\fs16 O; \line\f3\fs18 c) Suponha que o seguinte \f0\fs16 prot\'f3tipo \f3\fs18 seja declarado na classe Employee. \line int Employee( const char \f1\fs8 , \f3\fs18 const char \f1\fs10 * \line\b\i\fs24 Respostas aos exerc\'edcios de auto-revis\'e3o \line\b0\i0\f0\fs16 6.1 a) struct. b) ponto \b\f1\fs14 (.), \b0\f0\fs16 seta \b\f1\fs14 (->). \b0\f0\fs16 c) private. d) construtor, e) private. f) \i\f1 set. \i0\f0 g) c\'f3pia membro a membro default (executada pelo operador de atribui\'e7\'e3o). h) public, private. i) \i\f1 gel. \i0\f0\fs24 j) \fs16 interface. k) encapsulada. 1) class, struct. \f3\fs18 m) public. \line 6.2 a) Erro: destruidores n\'e3o podem retomar valores ou receber argumentos. \line\f0\fs16 Corre\'e7\'e3o: remova o tipo de retorno void e o par\'e2metro int da declara\'e7\'e3o. \line b) Erro: membros n\'e3o podem ser explicitamente inicializados na defini\'e7\'e3o de classe. \line Corre\'e7\'e3o: remova a inicializa\'e7\'e3o expl\'edcita da defini\'e7\'e3o da classe e inicialize os \line membros de dados em um construtor. \line c) Erro: construtores n\'e3o podem retornar valores. \line Corre\'e7\'e3o: remova o tipo de retorno int da declara\'e7\'e3o. \line\b\i\f1\fs24 Exerc\'edcios \line\b0\i0\f0\fs16 6.3 Qual \'e9 o prop\'f3sito do operador de resolu\'e7\'e3o de escopo? \line\b\fs18 6.4 \b0\f3 Compare \f0\fs16 e contraste as no\'e7\'f5es de struct e de class em C++. \line 6.5 Forne\'e7a um construtor que \'e9 capaz de usar a hora atual fornecida pela fun\'e7\'e3o time ( ) \b\f1\fs14 - \b0\f0\fs16 declarada no cabe\'e7alho \f3\fs18 time \f1\fs8 . \f0\fs16 h da biblioteca padr\'e3o C \f1\fs8 - \f3\fs18 para inicializar um objeto da classe Time. \line\b\f0 6.6 \b0\f3 Crie uma classe chamada Complexos para fazer \f0\fs16 aritm\'e9tica \f3\fs18 com n\'fameros complexos. Escreva um programa para testar sua classe. \line Os n\'fameros complexos t\'eam a \f0\fs16 forma \line\f3\fs18 parteReal + partelmaginaria \f1\fs10 * \b\f0\fs18 j \line\b0\f3 onde i \f0\fs16\'e9 \line\f3\fs18 Use vari\'e1veis \f0\fs16 double \f3\fs18 para representar os dados private da classe. Forne\'e7a uma fun\'e7\'e3o construtor que possibilita que um objeto desta classe seja inicializado quando \'e9 declarado. O construtor deve conter valores default no caso de \f0\fs16 nenhum inicializador \f3\fs18 ser fornecido. Forne\'e7a fun\'e7\'f5es membro public para cada um dos seguintes itens: \line a) Adi\'e7\'e3o de dois n\'fameros \f0\fs16 Complexos: as partes reais s\'e3o somadas juntas e as partes imagin\'e1rias s\'e3o somadas juntas. b) Subtra\'e7\'e3o de dois n\'fameros Complexos: a parte real do operando direito \'e9 subtra\'edda \f3\fs18 da \f0\fs16 parte \f3\fs18 real do operando \f0\fs16 esquerdo e a parte imagin\'e1ria do operando direito \'e9 subtra\'edda da parte imagin\'e1ria do operando esquerdo. \line c) Imprimir n\'fameros do tipo Complexos na forma (a, b) onde a \'e9 a parte real e b \'e9 a parte imagin\'e1ria. \fs24\par
\b\fs14 CAP\'cdTULO 6 \b0\f1\fs8 - \b\f0\fs14 CLASSES E ABSTRA\'c7\'c3O DE DADOS \f1\fs22 449 \line\f0\fs18 6.7 Crie \b0\fs16 uma classe chamada Racional para fazer aritm\'e9tica com fra\'e7\'f5es. Escreva um programa para testar sua classe. \line Use vari\'e1veis inteiras para representar os dados private da classe \f1\fs8 - \f0\fs16 o numerador e o denominador. Forne\'e7a uma \line fun\'e7\'e3o construtor que permita que um objeto desta classe seja inicializado quando \'e9 declarado, O construtor deve conter valores default no caso de nenhum inicializador ser fornecido e deve armazenar a fra\'e7\'e3o em formato reduzido (i.e., a fra\'e7\'e3o \line 2 \line 4 \line seria armazenada no objeto como 1 no numerador e 2 no denominador). Forne\'e7a fun\'e7\'f5es membro public para cada um dos seguintes itens: \line a) Adi\'e7\'e3o de dois n\'fameros do tipo Racional. O resultado deve ser armazenado em forma reduzida. \line b) Subtra\'e7\'e3o de dois n\'fameros do tipo Racional. O resultado deve ser armazenado em forma reduzida. \line c) Multiplica\'e7\'e3o de dois n\'fameros do tipo Racional. O resultado deve ser armazenado em forma reduzida. \line d) Divis\'e3o de dois n\'fameros do tipo Racional. O resultado deve ser armazenado em forma reduzida. \line e) Imprimir n\'fameros do tipo Racional no formato a/b, onde a \'e9 o numerador e b \'e9 o denominador. \line f) Imprimir n\'fameros do tipo Racional em formato de ponto flutuante. \line 6.8 Modifique a classe Time da Fig. 6. 10 para incluir uma fun\'e7\'e3o membro tick que incrementa a hora armazenada em um objeto do tipo Time em um segundo. O objeto do tipo Time deve sempre permanecer em um estado consistente. Escreva um programa que testa a fun\'e7\'e3o membro tick em um la\'e7o que imprime a hora no formato padr\'e3o durante cada repeti\'e7\'e3o do la\'e7o, para ilustrar que a fun\'e7\'e3o membro tick funciona corretamente. N\'e3o deixe de testar os seguintes casos: \line a) Incrementar para o pr\'f3ximo minuto. \line b) Incrementar para a pr\'f3xima hora. \line c) Incrementar para o dia seguinte (i.e., 11:59:59 da noite para 12:00:00 da manh\'e3). \line\b\fs18 6.9 \b0\fs16 Modifique a classe Date da Fig. 6.12 para executar a verifica\'e7\'e3o de erros sobre os valores de inicializadores fornecidos para os membros de dados month, day e year. Forne\'e7a tamb\'e9m uma fun\'e7\'e3o membro nextDay para incrementar o dia por um. O objeto Date deve sempre permanecer em um estado consistente. Escreva um programa que testa a fun\'e7\'e3o nextDay em um la\'e7o que imprime a data durante cada repeti\'e7\'e3o do la\'e7o para ilustrar que a fun\'e7\'e3o nextDay funciona corretamente. N\'e3o deixe de testar os seguintes casos: \line a) Incrementar para o pr\'f3ximo m\'eas. \line b) Incrementar para o pr\'f3ximo ano. \line\b\fs18 6.10 \b0\fs16 Combine a classe Time modificada do Exerc\'edcio 6.8 e a classe Date modificada do Exerc\'edcio 6.9cm uma classe chamada DateAndTime (no Cap\'edtulo 9 discutiremos heran\'e7a, que nos habilitar\'e1 a realizar esta tarefa rapidamente sem modificar as defini\'e7\'f5es de classes existentes). Modifique a fun\'e7\'e3o tick para chamar a fun\'e7\'e3o nextDay se a hora for incrementada para o dia seguinte. Modifique as fun\'e7\'f5es printStandard e printNilitary para enviar para a sa\'edda a data, al\'e9m da hora. Escreva um programa para testar a nova classe DateAndTime. Fa\'e7a um teste espec\'edfico, incrementando a hora para o dia seguinte. \line\b\fs18 6.11 \b0\fs16 Modifique as fun\'e7\'f5es \i set \i0 no programa da Fig. 6. 10 para retomar valores de erro apropriados se for feita uma tentativa de \i inicializar \i0 um membro de dados de um objeto da classe Time com um valor inv\'e1lido. \line 6.12 Crie uma classe Retangulo. A classe tem atributos comprimento e largura, cada um com valor default igual a 1. Ela tem fun\'e7\'f5es membro que calculam o perimetro e a area do ret\'e2ngulo. Forne\'e7a fun\'e7\'f5es \b\i\fs14 Sete \b0\fs16 get, \i0 tanto para o compri \f1\fs8 - \f0\fs16 mento como para a largura. As fun\'e7\'f5es \i set \i0 devem verificar se o comprimento e a largura s\'e3o n\'fameros de ponto flutuante maiores que 0.0 e menores que 20.0. \line 6.13 Crie uma classe Retangulo mais sofisticada que a que voc\'ea criou no Exerc\'edcio 6.12. Esta classe armazena s\'f3 as coordenadas cartesianas dos quatro cantos do ret\'e2ngulo. O construtor chama uma fun\'e7\'e3o \b\i\fs14 Set \b0\i0\fs16 que recebe quatro conjuntos de coordenadas e verifica se cada um deles est\'e1 no primeiro quadrante sem que nenhum valor de coordenada x ou y seja maior que 20.0. A fun\'e7\'e3o \b\i\fs14 Set \b0\i0\fs16 tamb\'e9m verifica se as coordenadas fornecidas de fato especificam um ret\'e2ngulo. As fun\'e7\'f5es membro calculam o comprimento, largura, perimetro e area. O comprimento \'e9 a maior das duas dimens\'f5es. Inclua uma fun\'e7\'e3o predicado quadrado, que determina se o ret\'e2ngulo \'e9 um quadrado. \line\b\fs18 6.14 \b0\fs16 Modifique a classe Retangulo do Exerc\'edcio 6.13 para incluir uma fun\'e7\'e3o desenhar que exibe o ret\'e2ngulo dentro de uma \ldblquote caixa\rdblquote  de 25 por 25, abrangendo a parte do primeiro quadrante em que o ret\'e2ngulo se situa. Inclua uma fun\'e7\'e3o inicializarCaractereDePreenchimento para especificar o caractere com o qual o corpo do ret\'e2ngulo ser\'e1 desenhado. Inclua uma fun\'e7\'e3o inicializarCaractereDoPerimetro para especificar o caractere que ser\'e1 usado para desenhar \fs24\par
\b\f1\fs22 450 \f0\fs18 C++ COMO PROGRAMAR \line\b0\fs16 a \f1\fs18 borda do ret\'e2ngulo. Se for ambicioso, \f0\fs16 voc\'ea pode incluir fun\'e7\'f5es para mudar a escala do ret\'e2ngulo, gir\'e1-lo e mov\'ea-lo dentro da parte designada do primeiro quadrante. \line 6.15 Crie uma classe InteiroGigante que usa um array de d\'edgitos de 40 elementos para armazenar inteiros t\'e3o grandes quanto 40 d\'edgitos. Forne\'e7a as fun\'e7\'f5es membro leialnteiroGigante. imprimalnteiroGigante. adicionelnteirosGigantes e subtraialnteirosGigantes. Para comparar objetos do tipo InteiroGigante. providencie fun\'e7\'f5es elgualA. naoElgualA, eMaiorQue. eMenorQue. eMaiorQueOulgualAc eMenorQueOulgualA \line\f1\fs8 - \f0\fs16 cada uma dessas fun\'e7\'f5es \'e9 uma \ldblquote fun\'e7\'e3o predicado\rquote , que simplesmente retorna true se a rela\'e7\'e3o entre os dois inteiros gigantes for verdadeira e retoma false se a rela\'e7\'e3o n\'e3o for verdadeira. Forne\'e7a uma fun\'e7\'e3o predicado eZero. Se voc\'ea for ambicioso, forne\'e7a tamb\'e9m fun\'e7\'f5es membro multipliquelnteirosGigantes. dividalnteirosGigantes e \f3 modulolnteirosGigantes. \line\b\f0\fs18 6.16 \b0\f3\fs16 Crie uma classe JogoDaVelha que lhe permitir\'e1 escrever um programa completo para jogar o jogo da velha. A classe \f0 cont\'e9m como dados private um array de inteiros bidimensional, 3 \f3 por \f0 3. \b\fs18 O \b0\fs16 construtor \f3 deve inicializar \f0 o tabuleiro vazio todo com zeros. Permita que duas pessoas possam jogar. Onde quer que o primeiro jogador fa\'e7a sua jogada, coloque um d\'edgito 1 no quadrado especificado; coloque um d\'edgito 2 onde quer que o segundo jogador jogue. Cada jogada deve ser em um quadrado vazio. Ap\'f3s cada jogada, determine se o jogo foi ganho por um dos dois jogadores ou se o jogo terminou sem vencedor. Se voc\'ea for ambicioso, modifique seu programa de forma que o computador fa\'e7a as jogadas para um dos jogadores automaticamente. Al\'e9m disso, permita ao jogador especificar se ele quer come\'e7ar primeiro ou depois. Se voc\'ea for excepcionalmente ambicioso, desenvolva um programa que jogar\'e1 o jogo da velha em tr\'eas dimens\'f5es, com um cubo de 4 por 4 por 4 c\'e9lulas (Cuidado: este \'e9 um projeto extremamente desafiante, que pode consumir muitas semanas de esfor\'e7o!). \par
\par
\pard\lang1033\f4\fs20\par
}
 