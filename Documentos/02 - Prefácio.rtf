{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fcharset0 Times New Roman;}}
\viewkind4\uc1\pard\sb100\sa240\lang2070\f0\fs24 Pref\'e1cio \line Bem-vindo \'e0 linguagem C++ padr\'e3o ANSI/ISO Este livro foi escrito por um cara velho e um cara jovem. O cara velho (HMD; Massachusetts Institute of Technology 1967) vem programando e/ou ensinando programa\'e7\'e3o nos \'faltimos 39 anos, O cara jovem (PJD; MIT, 1991) tem programado durante 18 anos e pegou gosto por ensinar e escrever, O cara velho programa e ensina usando sua experi\'eancia; o cara jovem faz isso com uma reserva inesgot\'e1vel de energia. O cara velho quer clareza; o cara jovem quer desempenho. O cara velho aprecia a eleg\'e2ncia e a beleza; o cara jovem quer resultados. Reunimo-nos para produzir um livro que esperamos que voc\'ea achar\'e1 informativo, interessante e divertido. \line Esta \'e9 uma \'e9poca empolgante para a comunidade C++, com a aprova\'e7\'e3o do padr\'e3o ANSIIISO para C++. O \line ANSI (o Instituto Americano de Padr\'f5es Nacionais) e o ISO (a Organiza\'e7\'e3o de Padr\'f5es Internacionais) cooperaram para desenvolver o que se tornou um dos padr\'f5es mundiais mais importantes para a comunidade de computa\'e7\'e3o. \line Quando escrevemos a segunda edi\'e7\'e3o de C++ How to Program, direcionamos o livro para cursos de n\'edvel acad\'eamico, nos quais ent\'e3o eram ensinados principalmente Pascal ou C, enfatizando o paradigma de programa\'e7\'e3o procedural. Escrever um livro de ensino de C\'f7+ para o p\'fablico dos cursos de Ci\'eancia da Computa\'e7\'e3o 1 e II apresentava-nos um desafio dif\'edcil. Necessit\'e1vamos descrever dois paradigmas de programa\'e7\'e3o, tanto a programa\'e7\'e3o procedural (porque C++ ainda inclui C) e a programa\'e7\'e3o orientada a objetos. Isto praticamente dobrou a quantidade de material que precisaria ser apresentado no n\'edvel introdut\'f3rio. Escolhemos uma estrat\'e9gia de apresentar o material ao estilo de C sobre tipos de dados primitivos, estruturas de controle, fun\'e7\'f5es, arrays, ponteiros, strings e estruturas nos primeiros cinco cap\'edtulos do livro. Ent\'e3o apresentamos a programa\'e7\'e3o orientada a objetos nos Cap\'edtulos 6 a 15. \line C++ How to Program se tornou o livro de ensino de C++ mais amplamente usado no mundo no ambiente \line acad\'eamico. Atrasamos a reda\'e7\'e3o desta nova edi\'e7\'e3o por duas raz\'f5es: \line 1. C++ estava em desenvolvimento ativo durante este tempo, com novas minutas do documento de padroniza\'e7\'e3o surgindo regularmente, mas sem um sinal claro do comit\'ea de padroniza\'e7\'e3o de que a minuta do \line padr\'e3o seria aceita \ldblquote como est\'e1\rdblquote  dentro de pouco tempo. \line 2. Est\'e1vamos esperando por um sinal claro de que j\'e1 era tempo de lan\'e7ar uma nova edi\'e7\'e3o de C++ How to Program. Esse sinal chegou em julho de 1997 com a publica\'e7\'e3o da terceira edi\'e7\'e3o do livro de Bjarne Stroustrup, A Linguagem de Programa\'e7\'e3o C++. Stroustrup criou C++, e seus livros s\'e3o os trabalhos definitivos sobre a linguagem. Nesse momento, sentimos que a \ldblquote nova defini\'e7\'e3o\rdblquote  de C++ estava suficientemente est\'e1vel para publicarmos C++ How to Program - Second Edition. \line Desviamos nossa aten\'e7\'e3o por um tempo para produzir cinco publica\'e7\'f5es sobre Java. Mas a excita\'e7\'e3o da aceita\'e7\'e3o iminente da minuta do padr\'e3o ANSI/ISO para C++ trouxe nossa aten\'e7\'e3o de volta para C++. \line C++ Como Programar - Terceira Edi\'e7\'e3o \line Nesta Terceira Edi\'e7\'e3o, executamos um processo extensivo de revis\'e3o, que levou a milhares de aperfei\'e7oamentos. Tamb\'e9m atualizamos completamente os programas no texto, para ficarem de acordo com o uso de ambientes de nomes em C\'f7+ padr\'e3o. \line _1 \par
VIII PREF\'c1CIO \line A principal novidade desta Terceira Edi\'e7\'e3o \'e9 um estudo de caso completo, totalmente implementado, sobre o projeto orientado a objetos usando a Unified Modeling LanguageTM (UML). Sentimos que um comprometimento com projetos orientados a objetos de grande porte \'e9 algo que est\'e1 faltando em livros-texto introdut\'f3rios. Este estudo de caso opcional \'e9 altamente recomendado porque vai melhorar consideravelmente a experi\'eancia do estudante em uma seq\'fc\'eancia de programa\'e7\'e3o de primeiro ano na universidade. Este estudo de caso oferece aos estudantes uma \line oportunidade de mergulhar em um programa em C++ com mais de 1000 linhas, que foi cuidadosamente examinado por uma equipe de revisores de empresas e acad\'eamicos destacados. \line Na edi\'e7\'e3o anterior deste livro, inclu\'edmos se\'e7\'f5es especiais, denominadas \ldblquote Pensando em objetos\rdblquote , no final dos Cap\'edtulos 1 a 7. Estas se\'e7\'f5es conduziram o estudante atrav\'e9s das etapas necess\'e1rias para projetar o simulador em software de um sistema de elevador. Pedimos ao estudante para completar estas etapas e implementar seu projeto em C++. Para C++ Como Programar - Terceira Edi\'e7\'e3o, remodelamos completamente este estudo de caso. Nos finais dos Cap\'edtulos 1 a 7 e no final do Cap\'edtulo 9, usamos a se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote  para \line apresentar uma introdu\'e7\'e3o cuidadosamente cadenciada ao projeto orientado a objetos usando a UML. A UML \'e9, agora, o esquema de representa\'e7\'e3o gr\'e1fica mais amplamente usado para a modelagem de sistemas orientados a \line objetos. A UML \'e9 uma linguagem gr\'e1fica complexa, rica em recursos. Em nossas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote , apresentamos um subconjunto conciso e simplificado destes recursos. Usamos, ent\'e3o, este subconjunto para \line guiar o leitor atrav\'e9s de uma primeira experi\'eancia de projeto com a UML voltada ao programador/projetista \line ] orientado a objetos iniciante. Apresentamos este estudo de caso de forma totalmente resolvida. Isto n\'e3o \'e9 um exerc\'edcio; em vez disso, \'e9 uma experi\'eancia de aprendizado de ponta a ponta que termina com um walkthrough detalhado do c\'f3digo em C++. \line Em cada um dos cinco primeiros cap\'edtulos, concentramo-nos na metodologia \ldblquote convencional\rdblquote  de programa\'e7\'e3o estruturada, pois os objetos que iremos construir ser\'e3o compostos, em parte, por peda\'e7os de programas estruturados. Ent\'e3o, conclu\'edmos cada cap\'edtulo com uma se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote , na qual apresentamos uma introdu\'e7\'e3o \'e0 orienta\'e7\'e3o a objetos utilizando a Unified Modeling Language (UML). Nosso objetivo, nestas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote , \'e9 ajudar os estudantes a desenvolver uma forma de pensar orientada a objetos, de modo que possam imediatamente colocar em uso os conceitos de programa\'e7\'e3o orientada a objetos que eles come\'e7am a aprender no Cap\'edtulo 6. Na primeira destas se\'e7\'f5es, no fim do Cap\'edtulo 1, introduzimos conceitos b\'e1sicos (i.e., \ldblquote pense em objetos\rdblquote ) e terminologia (i.e., \ldblquote fale em objetos\rdblquote ). Nas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote  opcionais, no fim dos Cap\'edtulos 2 a 5, consideramos t\'f3picos mais substanciais, \'e0 medida em que atacamos um problema desafiador com as t\'e9cnicas de projeto orientado a objetos (OOD). Analisamos uma defini\'e7\'e3o de problema t\'edpica, que requer que um sistema seja constru\'eddo, determinamos os objetos necess\'e1rios para implementar aquele sistema, determinamos os atributos que os objetos precisar\'e3o ter, determinamos os comportamentos que estes objetos precisar\'e3o exibir e especificamos como os objetos precisar\'e3o interagir uns com os outros para atender aos requisitos do sistema. Fazemos tudo isto mesmo antes de discutir como escrever programas C++ orientados a objetos. Nas se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote  no fim dos Cap\'edtulos 6, 7 e 9, discutimos uma implementa\'e7\'e3o em C++ do sistema orientado a objetos que projetamos nos cap\'edtulos anteriores. \line\lquote 1 Este estudo de caso \'e9 significativamente maior do que qualquer outro projeto tentado no livro. Sentimos que o estudante adquire experi\'eancia significativa seguindo este processo completo de projeto e implementa\'e7\'e3o. Este projeto nos for\'e7ou a incorporar t\'f3picos que n\'e3o discutimos em nenhuma outra se\'e7\'e3o do livro, incluindo intera\'e7\'e3o entre objetos, uma discuss\'e3o aprofundada de handies, a filosofia de uso de refer\'eancias versus ponteiros e o uso de declara\'e7\'f5es antecipadas para evitar o problema de refer\'eancias circulares em inclus\'f5es. Este estudo de caso vai ajudar a preparar os estudantes para os tipos de projetos de grande porte encontrados nas empresas. \line Se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote  \line No Cap\'edtulo 2, come\'e7amos a primeira fase de um projeto orientado a objetos (OOD) para o simulador de elevador - identificar as classes necess\'e1rias para implementar o simulador. Tamb\'e9m introduzimos o caso de uso de UML, diagramas de classes e objetos e os conceitos de associa\'e7\'f5es, multiplicidade, composi\'e7\'e3o, pap\'e9is e v\'ednculos. \line No Cap\'edtulo 3, determinamos muitos dos atributos de classes necess\'e1rios para implementar o simulador de elevador. Tamb\'e9m introduzimos o diagrama de estados e diagramas de atividades da UML e os conceitos de eventos e a\'e7\'f5es e como eles se relacionam com estes diagramas. \line No Cap\'edtulo 4, determinamos muitas das opera\'e7\'f5es (comportamentos) das classes na simula\'e7\'e3o de elevador. Tamb\'e9m introduzimos o diagrama de seq\'fc\'eancia da UML e o conceito de mensagens enviadas entre objetos. \par
1 \par
PREF\'c1CIO IX \line No Cap\'edtulo 5, determinamos muitas das colabora\'e7\'f5es (intera\'e7\'f5es entre objetos do sistema) necess\'e1rias para implementar o sistema de elevador e representamos tais colabora\'e7\'f5es usando o diagrama de colabora\'e7\'e3o da UML. Al\'e9m disso, inclu\'edmos uma bibliografia e uma lista de recursos da Internet e da World Wide Web que cont\'eam as especifica\'e7\'f5es da UML 1.3 e outros materiais de refer\'eancia, recursos gerais, tutoriais, FAQs, artigos, publica\'e7\'f5es e software. \line No Capftulo 6, usamos o diagrama de classes da UML desenvolvido em se\'e7\'f5es anteriores para esbo\'e7ar os \line arquivos de cabe\'e7alho C++ que definem nossas classes. Tamb\'e9m introduzimos o conceito de handies para objetos do sistema e come\'e7amos a estudar como implementar handies em C++. \line No Cap\'edtulo 7, apresentamos um programa simulador de elevador completo (aproximadamente 1000 linhas de c\'f3digo) e um walkthrough detalhado do c\'f3digo. O c\'f3digo \'e9 derivado diretamente do projeto baseado em UML criado em se\'e7\'f5es anteriores e emprega nossas boas pr\'e1ticas de programa\'e7\'e3o, incluindo o uso de membros de dados e fun\'e7\'f5es static e const. Tamb\'e9m discutimos aloca\'e7\'e3o din\'e2mica de mem\'f3ria, composi\'e7\'e3o e intera\'e7\'e3o entre objetos atrav\'e9s de handies e como usar declara\'e7\'f5es antecipadas para evitar o problema de refer\'eancias circulares em inclus\'f5es. \line No Cap\'edtulo 9, atualizamos o projeto e implementa\'e7\'e3o da simula\'e7\'e3o do elevador para incorporar heran\'e7a. \line Tamb\'e9m sugerimos modifica\'e7\'f5es adicionais, de modo que o estudante possa ent\'e3o projetar e implementar usando as ferramentas apresentadas nas se\'e7\'f5es anteriores. \line Sinceramente, esperamos que este rec\'e9m-atualizado estudo de caso de simula\'e7\'e3o de elevador ofere\'e7a uma experi\'eancia desafiadora e significativa tanto para estudantes quanto para instrutores. Empregamos um processo incremental orientado a objetos cuidadosamente desenvolvido para produzir um projeto baseado em UML para nosso simulador de elevador. A partir deste projeto, produzimos uma implementa\'e7\'e3o em C++ substancial que funciona, usando conceitos-chave de programa\'e7\'e3o, incluindo classes, objetos, encapsulamento, visibilidade, composi\'e7\'e3o e heran\'e7a. Agradecer\'edamos muito se voc\'ea dedicasse um momento para nos enviar seus coment\'e1rios, cr\'edticas e sugest\'f5es, a fim de aprimorar este estudo de caso, para: deitei@deitei com. \line Material auxiliar para C++: Como Programar - Terceira Edi\'e7\'e3o \line Trabalhamos arduamente para produzir um livro-texto e material auxiliar que, esperamos, voc\'ea e seus estudantes v\'e3o considerar valiosos. Os seguintes recursos auxiliares est\'e3o dispon\'edveis: \line Os 268 exemplos de programas de C++: Como Programar - Terceira Edi\'e7\'e3o est\'e3o inclu\'eddos no CDROM na contracapa final do livro-texto. Isto ajuda os instrutores a preparar aulas mais rapidamente e ajuda os estudantes a dominar C++. Os exemplos tamb\'e9m est\'e3o dispon\'edveis para download em www. deitei com. Quando extrair o c\'f3digo fonte do arquivo ZIP, voc\'ea deve usar um leitor de arquivos ZIP tal como WinZip (http: //www winzip comi) ou PKZIP (http: //www pkware com/), que entenda diret\'f3rios. O arquivo deve ser extra\'eddo para um diret\'f3rio separado (por exemplo, cpphtp3e_exempios). \line\bullet  O sof\'edware Microsofi Visual C++ Introductory Edition \'e9 fornecido no CD-ROM do livro-texto. Este software permite aos estudantes editar, compilar e depurar programas C++. Tornamos dispon\'edvel, sem custo adicional, um breve tutorial de Visual C++ 6 (no formato PDF da Adobe) em nosso site da Web (www.deitei.com). \line\bullet  Um site da Web relacionado (www prenhaii com/deitei) oferece recursos para instrutores e estudantes. Os recursos para instrutores incluem ap\'eandices do livro-texto (por exemplo, Ap\'eandice D, \ldblquote Recursos sobre C++ na Internet\rdblquote ) e um gerenciador de sum\'e1rios, para planejamento de aula. Os recursos para estudantes incluem objetivos dos cap\'edtulos, perguntas do tipo verdadeiro/falso, destaques dos cap\'edtulos, materiais de refer\'eancia e um quadro de avisos. \line\bullet  PowerPoint(I?) Instructor Lecture Notes customiz\'e1veis, com muitos recursos completos, incluindo c\'f3digo fonte e t\'f3picos para discuss\'e3o para cada programa e ilustra\'e7\'e3o importantes. Estas notas de aula est\'e3o \line dispon\'edveis sem custo para instrutores e estudantes no site www. deitei com. \line\bullet  Lab Manual (dispon\'edvel na primavera americana de 2001) - um item para venda contendo sess\'f5es fechadas para laborat\'f3rio. \par
X PREF\'c1CIO \line Uma revolu\'e7\'e3o no desenvolvimento de software \line Durante anos, o hardware vem melhorando drasticamente. Mas o software, por alguma raz\'e3o, parecia resistir a quase todas as tentativas para constru\'ed-lo de forma mais r\'e1pida e melhor. Hoje em dia, estamos em meio a uma revolu\'e7\'e3o na maneira como o software est\'e1 sendo projetado e escrito. Essa revolu\'e7\'e3o est\'e1 baseada na no\'e7\'e3o de bom senso, herdada do hardware, de usar componentes padronizados e intercambi\'e1veis, exatamente como feito por Henry Ford nos dias do Ford Modelo T. Estes componentes de software s\'e3o chamados \ldblquote objetos\rdblquote  - mais corretamente, \ldblquote classes,\rdblquote  que s\'e3o as \ldblquote f\'f4rmas\rdblquote  com as quais os objetos s\'e3o produzidos. \line A mais madura e bem-conhecida das linguagens orientadas a objetos \'e9 a Smalltalk, desenvolvida no in\'edcio dos anos 70 no Palo Alto Research Center da Xerox. Mas a linguagem orientada a objetos mais amplamente usada - por um fator de 10 vezes a mais que a Smalltalk - \'e9 a linguagem C++ desenvolvida por Bjarne Stroustrup e outros no in\'edcio dos anos 80 na AT&T. No tempo decorrido entre a publica\'e7\'e3o da primeira e segunda edi\'e7\'f5es deste livro, outro competidor apareceu em cena - a linguagem de programa\'e7\'e3o orientada a objetos Java, desenvolvida no in\'edcio dos anos 90 por James Gosling e outros na Sun Microsystems. \line Por que uma nova linguagem de programa\'e7\'e3o orientada a objetos importante a cada 10 anos? Na verdade, Smalltalk estava \'e0 frente de seu tempo, como uma experi\'eancia de pesquisa. C++ estava adequada \'e0 sua \'e9poca e \'e0s necessidades de programa\'e7\'e3o dos sistemas de alta performance e do desenvolvimento de aplicativos de hoje em dia. JavaTM ofereceu aos desenvolvedores a possibilidade de criar aplicativos altamente port\'e1veis, com uso intensivo de multim\'eddia, e aplicativos com uso intensivo de redes baseados na InternetlWorld Wide Web. \line Programa\'e7\'e3o procedural, programa\'e7\'e3o baseada em objetos, \line programa \'e7\'e3o orientada a objetos e programa\'e7\'e3o gen\'e9rica \line Neste livro, voc\'ea dominar\'e1 os cinco componentes-chave de C++, bem como quatro paradigmas de programa\'e7\'e3o contempor\'e2neos: \line\bullet  Programa \'e7\'e3o procedural em C - Cap\'edtulos 1-5 e l6-ll os t\'f3picos-chave incluem tipos de dados, estruturas de controle, fun\'e7\'f5es, arrays, ponteiros, strings, estruturas, manipula\'e7\'e3o de bits, manipula\'e7\'e3o de caracteres, pr\'e9-processamento e outros. \line 2. Melhorias introduzidas por C++ em rela\'e7\'e3o \'e0 programa\'e7\'e3o procedural em C - Se\'e7\'f5es 3.15-3.21; os t\'f3picos- chave incluem fun\'e7\'f5es mime, refer\'eancias, argumentos default, sobrecarga de fun\'e7\'f5es e fun\'e7\'f5es gabarito. \line 3. Programa\'e7\'e3o baseada em objetos em C++ - Cap\'edtulos 6-8; os t\'f3picos-chave incluem tipos de dados abstratos, classes, objetos, encapsulamento, ocultamento de informa\'e7\'f5es, controle de acesso a membros, construtores, destruidores, reusabilidade de software, objetos e fun\'e7\'f5es membro constantes, composi\'e7\'e3o, o conceito de friend, aloca\'e7\'e3o din\'e2mica de mem\'f3ria, membros static, o ponteiro this e outros. \line 4. Programa\'e7\'e3o orientada a objetos em C++ - Cap\'edtulos 9-15, 19 e 21; os t\'f3picos-chave incluem classes base, heran\'e7a simples, classes derivadas, heran\'e7a m\'faltipla, fun\'e7\'f5es virtual, vincula\'e7\'e3o din\'e2mica, polimorfismo, fun\'e7\'f5es virtual puras, classes abstratas, classes concretas, entrada/sa\'edda com streams, classes gabarito, tratamento de exce\'e7\'f5es, processamento de arquivos, estruturas de dados, strings como objetos no pleno sentido, tipo de dados bool, operadores de coer\'e7\'e3o, ambientes de nomes, informa\'e7\'f5es sobre tipo durante a execu\'e7\'e3o (RTTI, run-time type information), construtores explicit e membros muta- bie. \line 5. Programa\'e7\'e3o gen\'e9rica em C++ - Cap\'edtulo 20 - o maior cap\'edtulo do livro; os t\'f3picos-chave incluem a biblioteca padr\'e3o de gabaritos (STL), cont\'eaineres gen\'e9ricos, cont\'eaineres seq\'fcenciais, cont\'eaineres associativos, adaptadores de cont\'eaineres, iteradores que percorrem cont\'eaineres gen\'e9ricos e algoritmos que processam os elementos de cont\'eaineres gen\'e9ricos. \par
PREF\'c1CIO XI \line Evoluindo de Pascal e C para C.+ e JavaTM \line C++ substituiu C como a linguagem de implementa\'e7\'e3o de sistemas preferida na ind\'fastria. Mas a programa\'e7\'e3o em C continuar\'e1 a ser uma habilidade importante e valiosa na pr\'f3xima d\'e9cada por causa da quantidade enorme de c\'f3digo legado em C que deve ser mantido. O Dr. Harvey M. Deitei vem ministrando cursos de programa\'e7\'e3o introdut\'f3rios em ambientes acad\'eamicos por duas d\'e9cadas, com \'eanfase no desenvolvimento de programas claramente escritos e bem-estruturados. Muito do que \'e9 ensinado nestes cursos s\'e3o os princ\'edpios b\'e1sicos de programa\'e7\'e3o com \'eanfase no uso efetivo de estruturas de controle e fun\'e7\'f5es. Apresentamos este material exatamente do modo feito por HMD em seus cursos acad\'eamicos. Existem algumas armadilhas, mas, onde aparecem, n\'f3s as apontamos e explicamos procedimentos para lidar com elas eficazmente. Nossa experi\'eancia foi que os estudantes encaram o curso aproximadamente da mesma maneira que encaram cursos introdut\'f3rios de Pascal ou C. Existe uma diferen\'e7a not\'e1vel, no entanto: os estudantes est\'e3o altamente motivados pelo fato que eles est\'e3o aprendendo uma linguagem de ponta (C++) e um paradigma de programa\'e7\'e3o de ponta (programa\'e7\'e3o orientada a objetos) que ser\'e3o imediatamente \'fateis para eles assim que deixarem o ambiente acad\'eamico. Isto aumenta seu entusiasmo em rela\'e7\'e3o ao material - uma grande ajuda quando voc\'ea pensar que C\'f7+ \'e9 mais dif\'edcil de se aprender que Pascal ou C. \line Nossa meta era clara: produzir um livro de ensino de programa\'e7\'e3o C++ para cursos introdut\'f3rios de programa\'e7\'e3o de computadores, de n\'edvel universit\'e1rio, para estudantes com pouca ou nenhuma experi\'eancia em programa\'e7\'e3o e, ainda assim, oferecer a profundidade e o tratamento rigoroso de teoria e pr\'e1tica exigidos por cursos tradicionais de C++ de n\'edvel mais avan\'e7ado. Para atingir estas metas, produzimos um livro maior que outros textos sobre C++ - isto ocorre porque nosso texto tamb\'e9m ensina pacientemente os princ\'edpios da programa\'e7\'e3o procedural, da programa\'e7\'e3o baseada em objetos, da programa\'e7\'e3o orientada a objetos e da programa\'e7\'e3o gen\'e9rica. Centenas de milhares de pessoas estudaram este material em cursos acad\'eamicos e semin\'e1rios profissionais a n\'edvel mundial. \line At\'e9 o in\'edcio da d\'e9cada de 90, cursos de ci\'eancia da computa\'e7\'e3o estavam focalizados na programa\'e7\'e3o estruturada em Pascal e C. Desde ent\'e3o, estes cursos voltaram-se amplamente para programa\'e7\'e3o orientada a objetos em C++ e Java. Na Deitei & Associates mc., estamos focados na produ\'e7\'e3o de materiais educacionais de qualidade para as linguagens de programa\'e7\'e3o de ponta atuais. Enquanto C+ + Como Programar - Terceira Edi\'e7\'e3o vai para impress\'e3o, estamos trabalhando em fava: How to Program - Fourth Edition, Advanced C++ How to Program e Advanced lava How to Program. \line Introdu\'e7\'e3o da orienta\'e7\'e3o a objetos desde o Cap\'edtulo 1! \line Enfrentamos um desalio dit\'edcli ao projetar este livro. O livro deveria apresentar uma abordagem orientada a objetos pura? Ou deveria apresentar uma abordagem h\'edbrida, balanceando programa\'e7\'e3o procedural com programa\'e7\'e3o orientada a objetos? \line Muitos instrutores que v\'e3o ensinar a partir deste texto t\'eam ensinado programa\'e7\'e3o procedural (provavelmente \line em C ou Pascal). C++ em si n\'e3o \'e9 uma linguagem puramente orientada a objetos. Em vez disso, \'e9 uma linguagem h\'edbrida que possibilita tanto a programa\'e7\'e3o procedural como a programa\'e7\'e3o orientada a objetos. \line Assim, escolhemos a seguinte abordagem. Os primeiros cinco cap\'edtulos do livro introduzem a programa\'e7\'e3o procedural em C++. Apresentam conceitos de computadores, estruturas de controle, fun\'e7\'f5es, arrays, ponteiros e strings. Estes cap\'edtulos cobrem a \ldblquote parte C\rdblquote  de C++ e as \ldblquote melhorias na programa\'e7\'e3o procedural\rdblquote  de C++ em rela\'e7\'e3o aC. \line Fizemos algo para tornar estes primeiros cinco cap\'edtulos realmente \'fanicos no g\'eanero. No fim de cada um destes cap\'edtulos, inclu\'edmos uma se\'e7\'e3o especial, intitulada \ldblquote Pensando em objetos\rdblquote . Estas se\'e7\'f5es introduzem os conceitos e a terminologia da orienta\'e7\'e3o a objetos para ajudar os estudantes a come\'e7ar a se familiarizar com o que s\'e3o objetos e como se comportam. \line A se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote  do Cap\'edtulo 1 introduz os conceitos e a terminologia da orienta\'e7\'e3o a objetos. As se\'e7\'f5es nos Cap\'edtulos 2 a 5 apresentam uma especifica\'e7\'e3o de requisitos para o projeto de um sistema significativo orientado a objetos, ou seja, construir um simulador de elevador, e guia cuidadosamente o estudante atrav\'e9s das fases t\'edpicas do processo de projeto orientado a objetos. Estas se\'e7\'f5es discutem como identificar os objetos em um problema, como especificar os atributos e comportamentos dos objetos e como especificar as \par
XII PREF\'c1CIO \line intera\'e7\'f5es entre objetos. Quando o estudante tiver terminado o Cap\'edtulo 5, ter\'e1 completado um cuidadoso projeto orientado a objetos do simulador de elevador e estar\'e1 pronto - se n\'e3o ansioso - para come\'e7ar a programa\'e7\'e3o do elevador em C++. Os Cap\'edtulos 6 e 7 cobrem a abstra\'e7\'e3o de dados e classes. Estes cap\'edtulos tamb\'e9m cont\'eam se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote  que ajudam os estudantes atrav\'e9s das v\'e1rias fases da programa\'e7\'e3o de seus simula- dores de elevador em C++. A se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote  do Cap\'edtulo 9 aplica os conceitos que herdou de C++ ao simulador de elevador. \line Sobre este livro \line C++ Como Programar cont\'e9m uma rica rela\'e7\'e3o de exemplos, exerc\'edcios e projetos retirados de muitos campos para oferecer ao estudante uma oportunidade de resolver problemas interessantes do mundo real. O livro se concentra nos princ\'edpios da boa engenharia de software e enfatiza a import\'e2ncia da clareza nos programas. Evitamos uma terminologia obscura e as especifica\'e7\'f5es de sintaxe, preferindo o ensino por exemplos. \line Este livro foi escrito por educadores que passam a maioria de seu tempo ensinando e escrevendo sobre linguagens de programa\'e7\'e3o na vanguarda do \ldblquote estado da pr\'e1tica\rdblquote . \line O texto coloca uma \'eanfase forte em pedagogia. Por exemplo, virtualmente todo conceito novo, tanto de C++ como de programa\'e7\'e3o orientada a objetos, \'e9 apresentado no contexto de um programa em C++ completo, que funciona, imediatamente seguido por uma janela mostrando a sa\'edda do programa. Ler estes programas \'e9 muito semelhante a digit\'e1-los e execut\'e1-los em um computador. Chamamos esta nossa abordagem de \ldblquote c\'f3digo ativo\rdblquote . \line Entre as outras t\'e9cnicas pedag\'f3gicas usadas no texto est\'e3o um conjunto de Objetivos e uma Vis\'e3o Geral no in\'edcio de cada cap\'edtulo; Erros Comuns de Programa\'e7\'e3o, Boas Pr\'e1ticas de Programa\'e7\'e3o, Dicas de Desempenho, Dicas de Portabilidade, Observa\'e7\'f5es de Engenharia de Sojtware e Dicas de Teste e Depura \'e7\'e3o, enumerados em cada cap\'edtulo e resumidos no fim dos mesmos; um Resumo abrangente em forma de lista de t\'f3picos e uma se\'e7\'e3o de Terminologia em ordem alfab\'e9tica em cada cap\'edtulo; Exerc\'edcios de Auto-Revis\'e3o e Respostas em cada cap\'edtulo; e a cole\'e7\'e3o mais rica de Exerc\'edcios dispon\'edvel em qualquer livro sobre C++. \line Os exerc\'edcios variam de perguntas simples de recorda\'e7\'e3o at\'e9 problemas de programa\'e7\'e3o longos e projetos de porte. Os instrutores que necessitam de projetos significativos de conclus\'e3o de curso encontrar\'e3o muitos problemas apropriados listados nos exerc\'edcios para os Cap\'edtulos 3 a 21. Colocamos muito esfor\'e7o nos exerc\'edcios, para aumentar a utilidade deste curso para o estudante. \line Ao escrever este livro, usamos diversos compiladores C++. Na sua maioria, os programas do texto funcionar\'e3o em todos os compiladores ANSI/ISO. \line Este texto est\'e1 baseado na linguagem de programa\'e7\'e3o C++ tal como desenvolvida pelo Accredited Standards Committee X3, Information Technology e seu Technical Committee X3J]6, Programming Lctnguage C+\'f7, respectivamente. Esta linguagem foi aprovada pela International Standards Organization (ISO). Para detalhes adicionais, entre em contato com: \line X3 Secretariat \line 1250 Eye Street NW \line Washington DC 20005, EUA \line Um programador s\'e9rio deveria ler estes documentos cuidadosamente e us\'e1-los como refer\'eancia regularmente. Estes documentos n\'e3o s\'e3o tutoriais. Em vez disso, definem C++ e C com o n\'edvel de precis\'e3o extraordin\'e1rio que os implementadores de compiladores e desenvolvedores \ldblquote industriais\rdblquote  exigem. \line Auditamos cuidadosamente nossa apresenta\'e7\'e3o contra estes documentos. Nosso livro foi planejado para ser \line usado nos n\'edveis introdut\'f3rios e intermedi\'e1rios. N\'e3o tentamos cobrir todas as caracter\'edsticas discutidas nestes documentos abrangentes. \line Objetivos \line Cada cap\'edtulo come\'e7a com uma exposi\'e7\'e3o de objetivos. Esta diz ao estudante o que esperar e d\'e1 ao mesmo uma oportunidade, depois de ler o cap\'edtulo, de determinar se atingiu estes objetivos. E um construtor de alta confian\'e7a e uma fonte de est\'edmulo positivo. \par
PREF\'c1CIO XIII \line Cita\'e7\'f5es \line Os objetivos do aprendizado s\'e3o seguidos por uma s\'e9rie de cita\'e7\'f5es. Algumas s\'e3o humor\'edsticas, algumas s\'e3o filos\'f3ficas e algumas propiciam a percep\'e7\'e3o de conceitos interessantes. Nossos estudantes apreciam relacionar as cita\'e7\'f5es ao material do cap\'edtulo. Voc\'ea pode apreciar melhor algumas das cita\'e7\'f5es depois de ler os cap\'edtulos. \line Vis\'e3o geral \line A vis\'e3o geral do cap\'edtulo ajuda o estudante a abordar o material de \ldblquote cima para baixo (top-down)\rdblquote . Isto tamb\'e9m auxilia os estudantes a antecipar o que est\'e1 por vir e estabelecer um ritmo confort\'e1vel e eficiente de aprendizado. \line Se\'e7\'f5es \line Cada cap\'edtulo \'e9 organizado em pequenas se\'e7\'f5es que abordam t\'f3picos-chave de C++. \line 13.741 linhas de c\'f3digo em 268 programas exemplo (com as sa\'eddas dos programas) \line Os recursos de C++ s\'e3o apresentados no contexto de programas completos em C++ que funcionam. Cada programa \'e9 imediatamente seguido por uma janela contendo a sa\'edda produzida quando o programa \'e9 executado - chamamos isso de nossa \ldblquote abordagem com c\'f3digo ativo\rdblquote . Isto possibilita ao estudante confirmar que os programas s\'e3o executados conforme esperado. Relacionar a sa\'edda aos comandos do programa que produzem as sa\'eddas \'e9 uma maneira excelente de aprender e refor\'e7ar conceitos. Nossos programas exercitam os diversos recursos de C++. Ler o livro cuidadosamente se assemelha muito a digitar e executar estes programas em um computador. \line 469 Ilustra\'e7\'f5es/figuras \line Foram inclu\'eddos quadros e desenhos em abund\'e2ncia. A discuss\'e3o de estruturas de controle no Cap\'edtulo 2 apresenta fluxogramas cuidadosamente desenhados. (Nota: n\'e3o ensinamos o uso de fluxogramas como uma ferramenta de desenvolvimento de programas, mas usamos breves apresenta\'e7\'f5es apoiadas em fluxogramas para especificar a opera\'e7\'e3o precisa das estruturas de controle de C++). O Cap\'edtulo 15, \ldblquote Estruturas de dados\rdblquote , utiliza desenhos para ilustrar a cria\'e7\'e3o e a manuten\'e7\'e3o de listas encadeadas, filas, pilhas e \'e1rvores bin\'e1rias. O resto do livro \'e9 fartamente ilustrado. \line 625 Dicas de programa\'e7\'e3o \line Inclu\'edmos seis elementos de projeto para ajudar os estudantes a enfocar aspectos importantes do desenvolvimento de programas, teste e depura\'e7\'e3o, desempenho e portabilidade. Destacamos centenas destas dicas na forma de Boas pr\'e1ticas de programa\'e7\'e3o, Erros comuns de programa\'e7\'e3o, Dicas de desempenho, Dicas de portabilidade, Observa\'e7\'f5es de engenharia de software e Dicas de teste e depura \'e7\'e3o. Estas dicas e pr\'e1ticas representam as melhores que pudemos compilar em quase seis d\'e9cadas (combinadas) de experi\'eancia de programa\'e7\'e3o e ensino. Um de nossos estudantes - uma especialista em matem\'e1tica - disse-nos recentemente que ela acha que esta abordagem \'e9 algo semelhante a enfatizar axiomas, teoremas e corol\'e1rios em livros de matem\'e1tica; fornece uma base sobre a qual se pode construir software de qualidade. \line 115 Boas pr\'e1ticas de programa\'e7\'e3o \line Boas pr\'e1ticas de programa\'e7\'e3o s\'e3o destacadas no texto. Elas chamam a aten\'e7\'e3o do estudante para t\'e9cnicas que ajudam a produzir programas melhores. Quando damos cursos introdut\'f3rios a n\'e3o-programadores, afirmamos que o \ldblquote lema\rdblquote  de cada curso \'e9 \ldblquote clareza\rdblquote  e dizemos aos estudantes que destacaremos (nestas Boas pr\'e1ticas de programa\'e7\'e3o) as t\'e9cnicas para escrever programas que sejam mais claros, mais compreens\'edveis e de manuten\'e7\'e3o mais f\'e1cil. \line 216 Erros comuns de programa\'e7\'e3o \line Os estudantes que est\'e3o aprendendo uma linguagem - especialmente em seu primeiro curso de programa\'e7\'e3o - tendem a cometer certos tipos de erros freq\'fcentemente. Chamar a aten\'e7\'e3o dos estudantes para estes Erros comuns de programa\'e7\'e3o ajuda os estudantes a evitar cometer os mesmos erros. Tamb\'e9m ajuda reduzir as longas filas do lado de fora dos salas dos instrutores durante seu hor\'e1rio de trabalho! \line 87Dicas de desempenho \line f Em nossa experi\'eancia, ensinar os estudantes a escrever programas claros e compreens\'edveis \'e9 sem d\'favida a \line meta mais importante de um primeiro curso de programa\'e7\'e3o. Mas os estudantes querem escrever progra \par
XIV PREF\'c1cIo \line mas que sejam executados o mais r\'e1pido poss\'edvel, usem menos mem\'f3ria, necessitem do m\'ednimo de digita\'e7\'e3o para escrev\'ea-los ou impressionem as pessoas de v\'e1rias outras maneiras. Os estudantes realmente se importam com o desempenho. Eles querem saber o que podem fazer para \ldblquote turbinar\rdblquote  seus programas. Assim, inclu\'edmos Dicas de desempenho para destacar as oportunidades de melhoria do desempenho de um programa. \line 37 Dicas de portabilidade \line O desenvolvimento de software \'e9 uma atividade complexa e cara. As organiza\'e7\'f5es que desenvolvem software necessitam freq\'fcentemente produzir vers\'f5es customizadas para uma diversidade de computadores e sistemas operacionais. Assim, existe hoje em dia uma forte \'eanfase na portabilidade, i.e., na produ\'e7\'e3o de software execut\'e1vel em diversos sistemas de computador com pouca, ou nenhuma, altera\'e7\'e3o. Muitas pessoas aclamam C\'f7+ como uma linguagem apropriada para desenvolver software port\'e1vel, especialmente por causa do relacionamento estreito de C++ com ANSI/ISO C e pelo fato de que o ANSI/ISO C++ \'e9 o padr\'e3o global para C++. Algumas pessoas sup\'f5em que, se elas implementarem um aplicativo em C++. o aplicativo ser\'e1 automaticamente port\'e1vel. Este simplesmente n\'e3o \'e9 o caso. A obten\'e7\'e3o de portabilidade exige um projeto cuidadoso e cauteloso. Existem muitas armadilhas. Inclu\'edmos numerosas Dicas de portabilidade para ajudar os estudantes a escrever c\'f3digo port\'e1vel. \line 146 Observa\'e7\'f5es de engenharia de software \line O paradigma de programa\'e7\'e3o orientada a objetos exige um completo repensar do modo como constru\'edmos sistemas de software. C++ \'e9 uma linguagem adequada para praticar a boa engenharia de software. As Observa\'e7\'f5es de engenharia de software destacam t\'e9cnicas, assuntos relativos a arquitetura e assuntos relativos ao projeto, etc., que afetam a arquitetura e a constru\'e7\'e3o de sistemas de software, especialmente grandes sistemas. Muito do que o estudante aprender aqui ser\'e1 \'fatil em cursos de n\'edvel superior e na ind\'fastria, \'e0 medida que o estudante come\'e7ar a trabalhar com sistemas grandes e complexos do mundo real. \line 27 Dicas de teste e depura \'e7\'e3o \line Este \ldblquote tipo de dica\rdblquote  pode estar mal-nomeado. Quando decidimos incorporar as Dicas de teste e depura \'e7\'e3o \line a esta nova edi\'e7\'e3o, pens\'e1vamos que estas dicas seriam sugest\'f5es para testar programas e expor erros (bugs) \line e sugest\'f5es para remover aqueles erros. De fato, a maioria destas dicas tendem a ser observa\'e7\'f5es sobre as \line capacidades e recursos de C++ que, antes de mais nada, evitam a introdu\'e7\'e3o de erros nos programas. \line Resumo \line Cada cap\'edtulo termina com recursos pedag\'f3gicos adicionais. Apresentamos um Resumo extenso do cap\'edtulo, no \line estilo de uma lista de t\'f3picos, em todos os cap\'edtulos. Isto ajuda o estudante a revisar e refor\'e7ar conceitos-chave. \line Existem em m\'e9dia 37 t\'f3picos no resumo de cada cap\'edtulo. \line Terminologia \line Inclu\'edmos uma se\'e7\'e3o de Terminologia com uma lista dos termos importantes definidos no cap\'edtulo em ordem alfab\'e9tica - tamb\'e9m neste caso trata-se de refor\'e7o adicional. Existem em m\'e9dia 72 termos por cap\'edtulo. \line Resumo das dicas, pr\'e1ticas e erros \line Coletamos e listamos as Boas pr\'e1ticas de programa\'e7\'e3o, os Erros comuns de programa\'e7\'e3o, as Dicas de desempenho, as Dicas de portabilidade, as Observa\'e7\'f5es de engenharia de soflware e as Dicas de teste e depura \'e7\'e3o do cap\'edtulo. \line 554 Exerc\'edcios de auto-revis\'e3o e respostas (a contagem inclui partes separadas) \line Numerosos Exerc\'edcios de auto-revis\'e3o e Respostas aos exerc\'edcios de auto-revis\'e3o s\'e3o inclu\'eddos para estudo individual. Isto d\'e1 ao estudante uma oportunidade para ganhar confian\'e7a com o material e se preparar para tentar os exerc\'edcios regulares. \line 877 Exerc\'edcios (a contagem inclui partes separadas; 1431 exerc\'edcios no total) \line Cada cap\'edtulo termina com um conjunto significativo de exerc\'edcios, inclusive uma recorda\'e7\'e3o simples da terminologia e conceitos importantes; escrever comandos de C++ individuais; escrever partes pequenas de fun\'e7\'f5es em C++ e \par
PREF\'c1CIO XV \line ligita- classes; escrever fun\'e7\'f5es, classes e programas completos em C++; e desenvolver projetos de conclus\'e3o de curso de nte se porte significativo. O grande n\'famero de exerc\'edcios possibilita aos instrutores adaptar seus cursos \'e0s necessidades amas. peculiares de cada um de seus p\'fablicos e variar as tarefas dos cursos a cada semestre. Os instrutores podem usar de um estes exerc\'edcios para elaborar li\'e7\'f5es de casa, pequenos testes e exames finais. \line Manual do instrutor de 550 p\'e1ginas com solu\'e7\'f5es para os exerc\'edcios \line As solu\'e7\'f5es para os exerc\'edcios est\'e3o inclu\'eddas no CD do Instrutor. [NOTA: por favor, n\'e3o nos escreva pedindo o \line CD do instrutor. A distribui\'e7\'e3o deste CD \'e9 estritamente limitada a professores do meio acad\'eamico que ensi ve nam usando o livro. Os instrutores podem obter o manual de solu\'e7\'f5es somente atrav\'e9s de seus representantes \line puta- Bookman.1 As solu\'e7\'f5es para aproximadamente metade dos exerc\'edcios est\'e3o inclu\'eddas 110 CD C & C+ + Multimedia Cvber Classroom: Third Edition (Prentice HaIl dos EUA). \line Mui ecial \line 4523 entradas de \'edndice (total de 7653 contando refer\'eancias m\'faltiplas) \line ++ Inclu\'edmos um extenso \'edndice no final do livro. Ajuda o estudante a encontrar qualquer termo ou conceito por palaldd vra-chave. O \'cdndice \'e9 \'fatil para as pessoas que est\'e3o lendo o livro pela primeira vez e \'e9 especialmente \'fatil para \line i a e programadores praticantes que usam o livro como refer\'eancia. A maioria dos termos nas se\'e7\'f5es de Terminologia \line 7orta- aparecem no \'cdndice (junto com muitos outros itens de cada cap\'edtulo). Assim, o estudante pode usar o \'cdndice junto com as se\'e7\'f5es de Terminologia para certificar-se de que cobriu o material-chave de cada cap\'edtulo. \line - Um passeio pelo livro \line Lumos \line re. As O livro est\'e1 dividido em v\'e1rias partes principais. A primeira parte, os Cap\'edtulos 1 a 5, apresenta um tratamento \line untos completo da programa\'e7\'e3o procedural em C++, incluindo tipos de dados, entrada/sa\'edda, estruturas de controle, fun ment \'e7\'f5es, arrays, ponteiros e strings. A se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote  nos finais dos Cap\'edtulos 1 a 5 introduz a tecnologia \line nd\'fas- de objetos e apresenta um caso de estudo opcional interessante e desafiador para projetar e implementar um sistema aI. orientado a objetos de porte substancial. \line A segunda parte, os Cap\'edtulos 6 a 8, apresenta um tratamento substancial da abstra\'e7\'e3o de dados com classes, \line objetos e sobrecarga de operadores. Esta se\'e7\'e3o poderia ser efetivamente chamada \ldblquote Programando com objetos\rdblquote . As se\'e7\'f5es \ldblquote Pensando em objetos\rdblquote  nos finais dos Cap\'edtulos 6 e 7 desenvolvem e apresentam um programa C++ com \line ra\'e7ao mais de 1000 linhas que implementa o projeto apresentado nos Cap\'edtulos 2 a 5. \line bugs) A terceira parte, os Cap\'edtulos 9 e 10, apresenta heran\'e7a, as fun\'e7\'f5es virtuais e o polimorfismo - as tecnologias \line bre as b\'e1sicas da verdadeira programa\'e7\'e3o orientada a objetos. \line 5. A se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote  no final do Cap\'edtulo 9 incorpora heran\'e7a no projeto e na implementa\'e7\'e3o do \line simulador de elevador. \line A quarta parte, os Cap\'edtulos 11 a 14, apresenta o estilo C++ de entrada/sa\'edda orientada a streams - incluindo \line lo, no o uso de EIS em stream pelo teclado, pela tela do monitor de v\'eddeo, com arquivos e com arrays de caracteres; s\'e3o have. discutidos tanto o processamento de arquivos seq\'fcenciais como de acesso direto (i.e., acesso aleat\'f3rio). \line A quinta parte, os Cap\'edtulos 12 e 13, discute duas das mais recentes adi\'e7\'f5es principais a C++, quais sejam, \line gabaritos e o tratamento de exce\'e7\'f5es. Os gabaritos, tamb\'e9m chamados tipos parametrizados, estimulam a reusabilidade de software. Algumas exce\'e7\'f5es ajudam os programadores a desenvolver sistemas mais robustos, resistentes a \line Ifabe- falhas e para neg\'f3cios e miss\'f5es cr\'edticas. \line A sexta parte, o Cap\'edtulo 15, apresenta um tratamento completo de estruturas de dados din\'e2micas, tais \line como listas encadeadas, filas, pilhas e \'e1rvores. Este cap\'edtulo, quando suplementado com o estudo da biblioteca padr\'e3o de gabaritos (STL) no Cap\'edtulo 20, cria um rico tratamento de estruturas de dados que comp\'f5e um \line enho, agrad\'e1vel suplemento em C++ aos cursos tradicionais de estruturas de dados e de algoritmos do curr\'edculo de ilo. Ci\'eancia da Computa\'e7\'e3o. \line A s\'e9tima parte, os Cap\'edtulos 16 a 18, discute uma variedade de t\'f3picos incluindo a manipula\'e7\'e3o de bits, \line caracteres e strings, o pr\'e9-processador e uma miscel\'e2nea de \ldblquote outros t\'f3picos\rdblquote . \line ndivi- A \'faltima parte do texto principal, os Cap\'edtulos 19 a 21, \'e9 dedicada \'e0s melhorias mais recentes de C++ e da tar biblioteca padr\'e3o de C++ que foram inclu\'eddos no padr\'e3o ANSIJISO C++. Est\'e3o inclu\'eddas discuss\'f5es da classe \line string, do processamento de strings em srreams, a biblioteca padr\'e3o de gabaritos e uma apresenta\'e7\'e3o variada de outras adi\'e7\'f5es recentes a C++. \line O assunto final do livro consiste em materiais de refer\'eancia que suportam o texto principal, incluindo Ap\'eandiinolo- ces sobre preced\'eancia de operadores, o conjunto de caracteres ASCII, sistemas de numera\'e7\'e3o (bin\'e1rio, decimal, \line ,++ e \par
XVI PREF\'c1CIO \line octal e hexadecimal) e recursos para C++ dispon\'edveis na lnternetlWorld Wide Web. Uma bibliografia extensa \'e9 inclu\'edda para encorajar uma leitura adicional dos temas. O texto termina com um \'edndice detalhado que ajuda o leitor a localizar quaisquer termos no texto por palavra-chave. Agora vamos olhar cada um dos cap\'edtulos em detalhe. \line Cap\'edtulo 1 - Introdu\'e7\'e3o aos computadores e \'e0 programa\'e7\'e3o em C++ - discute o que s\'e3o computadores, como funcionam e como s\'e3o programados. Introduz a no\'e7\'e3o de programa\'e7\'e3o estruturada e explica por que este conjunto de t\'e9cnicas conduziu a uma revolu\'e7\'e3o no modo como s\'e3o escritos os programas. O cap\'edtulo apresenta uma hist\'f3ria breve do desenvolvimento de linguagens de programa\'e7\'e3o, das linguagens de m\'e1quina \'e0s linguagem de montagem, at\'e9 as linguagens de alto n\'edvel. A origem da linguagem de programa\'e7\'e3o C++ \'e9 discutida. O cap\'edtulo inclui uma introdu\'e7\'e3o a um ambiente de programa\'e7\'e3o C++ t\'edpico e fornece uma introdu\'e7\'e3o concisa sobre como escrever programas em C++. E apresentado um tratamento detalhado de tomada de decis\'f5es e opera\'e7\'f5es aritm\'e9ticas em C++. Depois de estudar este cap\'edtulo, o estudante compreender\'e1 como escrever programas simples, mas completos, em C+\'f7. Discutimos a explos\'e3o do interesse pela Internet que aconteceu com o advento da World Wide Web e a linguagem de programa\'e7\'e3o Java. Discutimos nainespace e o comando using para o benef\'edcio dos leitores com acesso a compiladores compat\'edveis com o padr\'e3o. Usamos os arquivos de cabe\'e7alho no novo estilo. Levar\'e1 alguns anos para \ldblquote limpar\rdblquote  os compiladores mais velhos que ainda est\'e3o sendo amplamente usados. Os leitores mergulham direto na orienta\'e7\'e3o a objetos na se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote , que introduz a terminologia b\'e1sica da tecnologia de objetos. \line Cap\'edtulo 2 - Estruturas de controle - introduz a no\'e7\'e3o de algoritmos (procedimentos) para resolver problemas. Explica a import\'e2ncia de utilizar estruturas de controle eficazmente para produzir programas que sejam compreens\'edveis, depur\'e1veis, de manuten\'e7\'e3o mais f\'e1cil e mais prov\'e1veis de funcionarem corretamente na primeira tentativa. Introduz a estrutura de seq\'fc\'eancia, as estruturas de sele\'e7\'e3o (if, iflelse e switch) e as estruturas de repeti\'e7\'e3o (while, do/while e for). Examina a repeti\'e7\'e3o em detalhes e compara as alternativas de la\'e7os (loops) controlados por contadores e por sentinelas. Explica a t\'e9cnica de refinamento passo a passo, de cima para baixo, que \'e9 fundamental para a produ\'e7\'e3o de programas corretamente estruturados, e apresenta um auxflio popular ao projeto de programas, o pseudo c\'f3digo. Os m\'e9todos e abordagens usados no Cap\'edtulo 2 s\'e3o aplic\'e1veis para o uso efetivo de estruturas de controle em qualquer linguagem de programa\'e7\'e3o, n\'e3o apenas em C++. Este cap\'edtulo ajuda o estudante a desenvolver bons h\'e1bitos de programa\'e7\'e3o, como prepara\'e7\'e3o para enfrentar as tarefas de programa\'e7\'e3o mais substanciais no restante do texto. O cap\'edtulo termina com uma discuss\'e3o de operadores l\'f3gicos - && (e), 1 1 (ou) e (nega\'e7\'e3o). O quadro de palavras-chave foi aumentado com as novas palavras-chave de C++ introduzidas em C++ padr\'e3o ANSI/ISO. Introduzimos o novo estilo do operador static cast. Este \'e9 mais seguro que o antigo estilo de coer\'e7\'e3o de C++ herdado de C. Acrescentamos o exerc\'edcio sobre o problema de \ldblquote Peter Minuit\rdblquote , de maneira que os estudantes possam ver as maravilhas do juro composto - com o computador fazendo a maior parte do trabalho! Discutimos as novas regras de escopo para contadores de la\'e7o em la\'e7os for. Na se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote , come\'e7amos a primeira fase de um projeto orientado a objetos (OOD, object-oriented design) para o simulador de elevador - identificando as classes necess\'e1rias para implementar o simulador. Tamb\'e9m introduzimos o caso de uso da UML, diagramas de classes e objetos e os conceitos de associa\'e7\'f5es, multiplicidade, composi\'e7\'e3o, pap\'e9is e v\'ednculos (links). \line Cap\'edtulo 3 - Fun\'e7\'f5es - discute o projeto e constru\'e7\'e3o de m\'f3dulos de programas. Os recursos de C++ relacionados com fun\'e7\'f5es incluem fun\'e7\'f5es da biblioteca padr\'e3o, fun\'e7\'f5es definidas pelo programador, recurs\'e3o e os recursos de chamadas por valor e chamadas por refer\'eancia. As t\'e9cnicas apresentadas no Cap\'edtulo 3 s\'e3o essenciais para a produ\'e7\'e3o de programas estruturados adequadamente, em especial os tipos de programas e software maiores que os programadores de sistema e os programadores de aplicativos provavelmente desenvolver\'e3o em aplica\'e7\'f5es do mundo real. A estrat\'e9gia \ldblquote dividir para conquistar\rdblquote  \'e9 apresentada como um meio efetivo de resolver problemas complexos dividindo-os em componentes mais simples que interagem entre si. Os estudantes apreciam o tratamento de n\'fameros aleat\'f3rios e de simula\'e7\'e3o e apreciam a discuss\'e3o do jogo de dados craps que faz um uso elegante das estruturas de controle. O cap\'edtulo oferece uma introdu\'e7\'e3o s\'f3lida \'e0 recurs\'e3o e inclui uma tabela resumindo as dezenas de exemplos e exerc\'edcios de recurs\'e3o distribu\'eddos ao longo do restante do livro. Alguns textos deixam a recurs\'e3o para um cap\'edtulo mais \'e0 frente no livro; acreditamos que este t\'f3pico seja mais bem coberto gradualmente ao longo do texto. A rela\'e7\'e3o extensa de 60 exerc\'edcios no fim do cap\'edtulo inclui v\'e1rios problemas cl\'e1ssicos de recurs\'e3o, tal como o das Torres de Hanoi. O cap\'edtulo discute as chamadas \ldblquote melhorias de C++ em rela\'e7\'e3o a C\rdblquote , incluindo fun\'e7\'f5es mime, par\'e2metros por refer\'eancia, argumentos default, o operador un\'e1rio de resolu\'e7\'e3o de escopo, sobrecarga de fun\'e7\'f5es e gabaritos de fun\'e7\'f5es. O quadro de arquivos de cabe\'e7alho foi modificado para incluir muitos dos novos arquivos de cabe\'e7alho que \par
XVIII PREF\'c1CIO \line recompens\'e1-lo com uma profunda compreens\'e3o do complexo t\'f3pico de ponteiros. Salientamos, mais uma vez, que cobrimos arrays e strings objetos no pleno sentido mais adiante no livro. No Cap\'edtulo 8, usamos a sobrecarga de operadores para elaborar classes personalizadas Array e String. No Cap\'edtulo 19, discutimos a classe string da biblioteca padr\'e3o e mostramos como manipular objetos string. No Cap\'edtulo 20, discutimos a classe vector para implementar arrays como objetos. O Cap\'edtulo 5 est\'e1 repleto de exerc\'edcios desafiadores. N\'e3o deixe de ler a Se\'e7\'e3o especial: construindo seu pr\'f3prio computador Na se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote , determinamos muitas das colabora\'e7\'f5es (intera\'e7\'f5es entre objetos no sistema) necess\'e1rias para implementar o sistema do elevador e representamos estas colabora\'e7\'f5es usando o diagrama de colabora\'e7\'e3o da UML. Tamb\'e9m inclu\'edmos uma bibliografia e uma lista de recursos da Internet e da World Wide Web que cont\'e9m as especifica\'e7\'f5es da UML 1.3 e outros materiais de refer\'eancia de UML, recursos gen\'e9ricos, tutoriais, FAQs, artigos, publica\'e7\'f5es e software. \line Cap\'edtulo 6- Classes e abstra\'e7\'e3o de dados - inicia nossa discuss\'e3o da programa\'e7\'e3o baseada em objetos. O cap\'edtulo representa uma oportunidade maravilhosa para ensinar a abstra\'e7\'e3o de dados da \ldblquote maneira certa\rdblquote  - atrav\'e9s de uma linguagem (C+\'f7) expressamente dedicada a implementar tipos de dados abstratos (ADTs, abstract data types). Em anos recentes, a abstra\'e7\'e3o de dados se tornou um dos t\'f3picos principais nos cursos introdut\'f3rios de computa\'e7\'e3o. Os Cap\'edtulos 6 a 8 incluem um tratamento s\'f3lido da abstra\'e7\'e3o de dados. O Cap\'edtulo 6 discute a implementa\'e7\'e3o de ADTs como structs, a implementa\'e7\'e3o de ADTs como classes no estilo de C++ - e por que esta abordagem \'e9 superior a usar structs - o acesso a membros de class. a separa\'e7\'e3o da interface da implementa\'e7\'e3o, o uso de fun\'e7\'f5es de acesso e fun\'e7\'f5es utilit\'e1rias, a inicializa\'e7\'e3o de objetos com construtores, a destrui\'e7\'e3o de objetos com destruidores, a atribui\'e7\'e3o por c\'f3pia membro a membro default e a reusabilidade de software. Os exerc\'edcios do cap\'edtulo desafiam o estudante a desenvolver classes para n\'fameros complexos, n\'fameros racionais, horas, datas, ret\'e2ngulos, inteiros enormes e para jogar \ldblquote jogo da velha\rdblquote . Os estudantes geralmente apreciam programas de jogos. A se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote  lhe pede para escrever um arquivo de cabe\'e7alho de classe para cada uma das classes em seu simulador de elevador. O leitor mais inclinado \'e0 matem\'e1tica apreciar\'e1 os exerc\'edcios sobre a cria\'e7\'e3o da classe Complex (para n\'fameros complexos), da classe Rational (para n\'fameros racionais) e da classe Hugelnteger (para inteiros arbitrariamente grandes). Na se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote , usamos o diagrama de classes da UML desenvolvido nas se\'e7\'f5es anteriores para esbo\'e7ar os arquivos de cabe\'e7alho de C++ que definem nossas classes. Tamb\'e9m introduzimos o conceito de handles para objetos no sistema e come\'e7amos a estudar como implementar handles em C++. \line Cap\'edtulo 7- Classes: parte II - continua o estudo de classes e abstra\'e7\'e3o de dados. O cap\'edtulo discute a declara\'e7\'e3o e uso de objetos constantes, fun\'e7\'f5es membro constantes, composi\'e7\'e3o - o processo de construir classes que t\'eam objetos de outras classes como membros, fun\'e7\'f5es friend e classes friend que t\'eam direitos de acesso especiais a membros private e protected de classes, o ponteiro this. que possibilita a um objeto saber seu pr\'f3prio endere\'e7o, a aloca\'e7\'e3o din\'e2mica de mem\'f3ria, membros de classe static para armazenar e manipular dados usados em toda a classe, exemplos de tipos de dados abstratos populares (arrays, strings e filas), classes cont\'eaineres e iteradores. Os exerc\'edcios do cap\'edtulo pedem ao estudante para desenvolver uma classe conta de poupan\'e7a e uma classe para armazenar conjuntos de inteiros. Em nossa discuss\'e3o de objetos const. mencionamos brevemente a nova palavra-chave mutable que, como veremos no Cap\'edtulo 21, \'e9 usada de uma maneira sutil para possibilitar a modifica\'e7\'e3o de implementa\'e7\'e3o \ldblquote n\'e3o-vis\'edvel\rdblquote  em objetos const. Discutimos a aloca\'e7\'e3o din\'e2mica de mem\'f3ria com new e delete. Quando new falha, retorna um ponteiro O no estilo de C++ antes da padroniza\'e7\'e3o. Usamos este estilo anterior ao padr\'e3o nos Cap\'edtulos 7 a 12. Adiamos para o Cap\'edtulo 13 a discuss\'e3o do novo estilo de falha de new, em que new agora \ldblquote dispara uma exce\'e7\'e3o\rdblquote . Motivamos a discuss\'e3o de membros de classe static com um exemplo baseado em videogame. Enfatizamos ao longo do livro e em nossos semin\'e1rios profissionais como \'e9 importante esconder detalhes da implementa\'e7\'e3o dos clientes de uma classe. Ent\'e3o, mostramos dados private em nossos cabe\'e7alhos de classe, que certamente revelam a implementa\'e7\'e3o. Introduzimos uma nova se\'e7\'e3o sobre classes proxy, um meio agrad\'e1vel de ocultar at\'e9 mesmo dados private dos clientes de uma classe. A se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote  lhe pede para incorporar administra\'e7\'e3o din\'e2mica de mem\'f3ria e composi\'e7\'e3o ao seu simulador de elevador. Os estudantes apreciar\'e3o o exerc\'edcio de criar a classe Integerset. Esta serve como uma excelente motiva\'e7\'e3o para o tratamento da sobrecarga de operadores no Cap\'edtulo 8. Na se\'e7\'e3o \ldblquote Pensando em objetos\rdblquote , apresentamos um programa completo de simulador de elevador em C++ (aproximadamente 1000 linhas de c\'f3digo) e um walkthrough detalhado do c\'f3digo. O c\'f3digo \'e9 diretamente derivado do projeto baseado na UML criado em se\'e7\'f5es anteriores e emprega nossas boas pr\'e1ticas de programa\'e7\'e3o, inclusive o uso de membros de dados e fun\'e7\'f5es static e const. Tamb\'e9m discutimos aloca\'e7\'e3o din\'e2mica de mem\'f3ria, composi\'e7\'e3o e intera\'e7\'e3o entre objetos atrav\'e9s de handles e como usar declara\'e7\'f5es antecipadas para evitar o problema de refer\'eancias circulares em inclus\'f5es. \par
XX PREF\'c1CIO \line desenhados. Cada objeto sabe como desenhar a si pr\'f3prio. Um novo objeto pode ser acrescentado ao programa sem modificar aquele programa, desde que aquele novo objeto tamb\'e9m saiba desenhar a si pr\'f3prio. Este estilo de programa\'e7\'e3o \'e9 usado tipicamente para implementar as interfaces de usu\'e1rio gr\'e1ficas (GUIs, graphical user interfaces), hoje em dia populares. O cap\'edtulo discute a mec\'e2nica de obten\'e7\'e3o do comportamento polim\'f3rfico atrav\'e9s do uso de fun\'e7\'f5es virtual. Distingue entre classes abstratas (das quais n\'e3o podem ser instanciados objetos) e classes concretas (das quais podem ser instanciados objetos). Classes abstratas s\'e3o \'fateis para fornecer uma interface que possa ser transmitida por heran\'e7a \'e0s classes ao longo da hierarquia. Um destaque do cap\'edtulo s\'e3o seus dois estudos de caso principais de polimorfismo - um sistema de folha de pagamento e outra vers\'e3o da hierarquia de formas ponto, c\'edrculo e cilindro discutida no Cap\'edtulo 9. Os exerc\'edcios do cap\'edtulo pedem ao estudante para discutir v\'e1rios assuntos e abordagens conceituais, acrescentar classes abstratas \'e0 hierarquia de formas, desenvolver um pacote de gr\'e1fico b\'e1sico, modificar a classe empregado do cap\'edtulo - e desenvolver todos estes projetos com fun\'e7\'f5es virtual e programa\'e7\'e3o polim\'f3rfica. Os dois estudos de caso de polimorfismo do cap\'edtulo mostram um contraste nos estilos de heran\'e7a. O primeiro exemplo (de um sistema de folha de pagamento) \'e9 um uso claro, \ldblquote sensato\rdblquote , da heran\'e7a. O segundo, que se baseia na hierarquia ponto, c\'edrculo e cilindro desenvolvida no Cap\'edtulo 9, \'e9 um exemplo do que alguns profissionais chamam de \ldblquote heran\'e7a estrutural\rdblquote  - n\'e3o t\'e3o natural e sensata quanto a primeira - mas, \ldblquote mecanicamente correta\rdblquote . Usamos este segundo exemplo por causa da se\'e7\'e3o intitulada Polimorfismo, fun\'e7\'f5es virtuais e vincula \'e7\'e3o din\'e2mica \ldblquote vistos por dentro \ldblquote . Damos nossos semin\'e1rios profissionais de C++ para engenheiros de software seniores. Estas pessoas apreciaram os dois exemplos de polimorfismo na primeira edi\'e7\'e3o, mas sentiram que estava faltando algo em nossas apresenta\'e7\'f5es. Sim, disseram, mostramos a eles como programar com polimorfismo em C++. Mas eles queriam mais. Eles nos disseram que estavam preocupados com a sobrecarga operacional resultante de reprogramar polimorficamente. E um recurso desej\'e1vel, disseram, mas \'e9 claro que ele tem um custo. Assim, nosso p\'fablico profissional insistiu que fornec\'eassemos uma explica\'e7\'e3o mais profunda que mostrasse precisamente como o polimorfismo \'e9 implementado em C++ e, como consequ\'eancia, precisamente que \ldblquote custos\rdblquote , em termos de tempo de execu\'e7\'e3o e de mem\'f3ria, devemos pagar quando programarmos com este poderoso recurso. Respondemos a eles desenvolvendo uma ilustra\'e7\'e3o que mostra as vtables (tabelas das fun\'e7\'f5es virtual) que o compilador de C++ constr\'f3i automaticamente para suportar o estilo de programa\'e7\'e3o polim\'f3rfico. Desenhamos estas tabelas em nossas classes em que discutimos a hierarquia de formas ponto, c\'edrculo e cilindro. Nosso p\'fablico nos disse que isto realmente lhes deu as informa\'e7\'f5es para decidir se o polimorfismo \'e9 um estilo de programa\'e7\'e3o apropriado a cada novo projeto que viessem apegar. Inclu\'edmos esta apresenta\'e7\'e3o na Se\'e7\'e3o 10.10 e a ilustra\'e7\'e3o da vtable na Fig. 10.2. Estude esta apresenta\'e7\'e3o cuidadosamente. Ela lhe dar\'e1 uma compreens\'e3o muito mais profunda do que realmente est\'e1 acontecendo no computador quando voc\'ea programa com heran\'e7a e polimorfismo. \line Cap\'edtulo 11 - Entrada/sa\'edda com streams em C++ - cont\'e9m um tratamento abrangente do novo estilo de entrada! sa\'edda orientado a objetos introduzido em C++. O cap\'edtulo discute os v\'e1rios recursos de E/S de C++, incluindo a sa\'edda com o operador de inser\'e7\'e3o em stream, a entrada com o operador de extra\'e7\'e3o de stream, E/S segura quanto a tipos (uma agrad\'e1vel melhoria em rela\'e7\'e3o a C), E/S formatada, E/S n\'e3o-formatada (para melhor desempenho), manipuladores de stream para controlar a base do stream (decimal, octal ou hexadecimal), n\'fameros de ponto flutuante, o controle dos comprimentos de campos, manipuladores definidos pelo usu\'e1rio, estados de formato do stream, estados de erro do stream, E/S de objetos de tipos definidos pelo usu\'e1rio e a vincula\'e7\'e3o de streams de sa\'edda a streams de entrada (para assegurar que os prompts realmente apare\'e7am antes do momento em que se espera que o usu\'e1rio digite respostas). O conjunto extenso de exerc\'edcios pede ao estudante para escrever v\'e1rios programas que testam a maioria dos recursos de EIS discutidos no texto. \line Cap\'edtulo 12 - Gabaritos - discute uma das mais recentes adi\'e7\'f5es \'e0 linguagem C++. Gabaritos de fun\'e7\'f5es foram introduzidos no Cap\'edtulo 3. O Cap\'edtulo 12 apresenta um exemplo adicional de gabarito de fun\'e7\'e3o. Os gabaritos de classes possibilitam ao programador capturar a ess\'eancia de um tipo de dados abstrato - ADT - (tal como uma pilha, um array ou uma fila) e ent\'e3o criar - com um m\'ednimo de c\'f3digo adicional - vers\'f5es daquele ADT para tipos particulares (tal como uma fila de ints, uma fila de floats, uma fila de strings, etc.). Por essa raz\'e3o, classes gabarito s\'e3o freq\'fcentemente chamadas de tipos parametrizados. O cap\'edtulo discute o uso de par\'e2metros de tipo e par\'e2metros n\'e3o de tipo e considera a intera\'e7\'e3o entre gabaritos e outros conceitos de C++, tais como heran\'e7a, friends e membros static. Os exerc\'edcios desafiam o estudante a escrever uma variedade de gabaritos de fun\'e7\'f5es e gabaritos de classes e a empregar estes em programas completos. Aumentamos muito o tratamento de gabaritos com a discuss\'e3o dos cont\'eaineres, iteradores e algoritmos da biblioteca padr\'e3o de gabaritos (STL) no Cap\'edtulo 20. \par
PREF\'c1CIO XXI \line Cap\'edtulo 13- Tratamento de exce\'e7\'f5es - discute uma das mais recentes melhorias da linguagem C++. O tratamento de exce\'e7\'f5es possibilita ao programador escrever programas que s\'e3o mais robustos, mais tolerantes a falhas e mais apropriados para ambientes de neg\'f3cios cr\'edticos e miss\'f5es cr\'edticas. O cap\'edtulo discute quando o tratamento de exce\'e7\'f5es \'e9 apropriado; introduz os fundamentos do tratamento de exce\'e7\'f5es com blocos try, comandos throw e blocos catch; indica como e quando \ldblquote disparar novamente\rdblquote  uma exce\'e7\'e3o; explica como escrever uma especifica\'e7\'e3o de exce\'e7\'e3o e processar exce\'e7\'f5es inesperadas; e discute os importantes v\'ednculos entre exce\'e7\'f5es e construtores, destruidores e heran\'e7a. Um destaque do cap\'edtulo s\'e3o seus 43 exerc\'edcios que orientam o estudante na implementa\'e7\'e3o de programas que ilustram a diversidade e o poder dos recursos de tratamento de exce\'e7\'f5es de C++. Discutimos disparar novamente uma exce\'e7\'e3o e ilustramos os dois modos em que new pode falhar quando a mem\'f3ria se esgota. Antes do novo padr\'e3o para C++. new falhava retornando O, de forma semelhante \'e0 que nialloc falha em C retornando um valor de ponteiro NULL. Mostramos o novo estilo de new de falhar, disparando uma exce\'e7\'e3o badalloc (aloca\'e7\'e3o ruim). Ilustramos como usar set newhandler para especificar uma fun\'e7\'e3o customizada que deve ser chamada para lidar com situa\'e7\'f5es de esgotamento de mem\'f3ria. Discutimos o gabarito de classe autoytr para garantir que a mem\'f3ria dinamicamente alocada ser\'e1 corretamente deletada, para evitar perdas de mem\'f3ria. Apresentamos a nova hierarquia de exce\'e7\'f5es da biblioteca padr\'e3o. \line Cap\'edtulo 14- Processamento de arquivos - discute as t\'e9cnicas usadas para processar arquivos de texto com acesso seq\'fcencial e acesso aleat\'f3rio, O cap\'edtulo come\'e7a com uma introdu\'e7\'e3o \'e0 hierarquia de dados de bits, bytes, campos, registros e arquivos. Em seguida, \'e9 apresentada a vis\'e3o simples de arquivos e streams de C++. Os arquivos de acesso seq\'fcencial s\'e3o discutidos usando-se programas que mostram como abrir e fechar arquivos, como armazenar dados seq\'fcencialmente em um arquivo e como ler dados seq\'fcencialmente de um arquivo. Arquivos de acesso aleat\'f3rio s\'e3o discutidos usando-se programas que mostram como criar seq\'fcencialmente um arquivo para acesso aleat\'f3rio, como ler e escrever dados em um arquivo com acesso aleat\'f3rio e como ler dados seq\'fcencialmente de um arquivo acessado aleatoriamente. O quarto programa de acesso aleat\'f3rio combina muitas das t\'e9cnicas de acesso a arquivos, tanto seq\'fcencial como aleatoriamente, em um programa de processamento de transa\'e7\'f5es completo. Estudantes em nossos semin\'e1rios em empresas nos disseram que, ap\'f3s estudar o material sobre processamento de arquivos, eles podiam produzir programas de processamento de arquivos significativos, que eram imediatamente \'fateis em suas organiza\'e7\'f5es. Os exerc\'edcios pedem ao estudante para implementar diversos programas que constroem e processam tanto arquivos de acesso seq\'fcencial como arquivos de acesso aleat\'f3rio. O material relacionado ao processamento de strings em streams foi posicionado no fim do Cap\'edtulo 19. \line Cap\'edtulo 15 - Estruturas de dados - discute as t\'e9cnicas usadas para criar e manipular estruturas de dados din\'e2micas. O cap\'edtulo come\'e7a com discuss\'f5es de classes com auto-refer\'eancia e aloca\'e7\'e3o din\'e2mica de mem\'f3ria e prossegue com uma discuss\'e3o sobre como criar e manter v\'e1rias estruturas de dados din\'e2micas, incluindo listas encadeadas, filas (ou linhas de espera), pilhas e \'e1rvores. Para cada tipo de estrutura de dados, apresentamos programas completos, que funcionam, e mostramos amostras de suas sa\'eddas. O cap\'edtulo realmente ajuda o estudante a dominar ponteiros. O cap\'edtulo inclui exemplos abundantes, usando indire\'e7\'e3o (acesso indireto) e dupla indire\'e7\'e3o - um conceito particularmente dif\'edcil. Um problema que ocorre quando se trabalha com ponteiros \'e9 que os estudantes t\'eam dificuldade de visualizar as estruturas de dados e como seus nodos s\'e3o interligados. Assim, inclu\'edmos ilustra\'e7\'f5es que mostram os links e a seq\'fc\'eancia em que s\'e3o criados. O exemplo de \'e1rvore bin\'e1ria \'e9 um belo ponto de fechamento para o estudo de ponteiros e estruturas din\'e2micas de dados. Este exemplo cria uma \'e1rvore bin\'e1ria; garante a elimina\'e7\'e3o de duplicatas; e introduz percursos recursivos da \'e1rvore em pr\'e9-ordem, em ordem e p\'f3s-ordem. Os estudantes t\'eam uma genu\'edna sensa\'e7\'e3o de realiza\'e7\'e3o quando estudam e implementam este exemplo. Particularmente, gostam de ver que o percurso em ordem imprime os valores dos nodos em uma ordem classificada. O cap\'edtulo inclui uma cole\'e7\'e3o substancial de exerc\'edcios. Um destaque dos exerc\'edcios \'e9 a se\'e7\'e3o especial \ldblquote Construindo seu pr\'f3prio compilador\rdblquote . Os exerc\'edcios encaminham o estudante por todo o desenvolvimento de um programa de convers\'e3o de nota\'e7\'e3o in-fixa para p\'f3s-fixa e um programa de avalia\'e7\'e3o de express\'f5es p\'f3s-fixas. Ent\'e3o, modificamos o algoritmo de avalia\'e7\'e3o de express\'f5es p\'f3s-fixas para gerar c\'f3digo em linguagem de m\'e1quina. O compilador coloca este c\'f3digo em um arquivo (usando as t\'e9cnicas do Cap\'edtulo 14). Os estudantes ent\'e3o executam a linguagem de m\'e1quina produzida por seus compiladores nos simuladores de software que eles constru\'edram nos exerc\'edcios do Cap\'edtulo 5! Os 67 exerc\'edcios incluem uma simula\'e7\'e3o de supermercado usando filas, uma busca recursiva em uma lista, uma impres\'e3o recursiva de uma lista de tr\'e1s para diante, a exclus\'e3o de um nodo de uma \'e1rvore bin\'e1ria, um percurso em ordem de n\'edvel de uma \'e1rvore bin\'e1ria, impress\'e3o de \'e1rvores, escrever uma parte de um compilador otimizador, escrever um \par
XXII PREF\'c1CIO \line interpretador, inser\'e7\'e3o/dele\'e7\'e3o em qualquer lugar em uma lista encadeada, implementa\'e7\'e3o de listas e filas sem ponteiros de cauda, an\'e1lise do desempenho da busca e classifica\'e7\'e3o de uma \'e1rvore bin\'e1ria e implementa\'e7\'e3o de uma classe lista indexada. Depois de estudar o Cap\'edtulo 15, o leitor est\'e1 preparado para o tratamento de cont\'eaineres, iteradores e algoritmos da STL, no Cap\'edtulo 20. Os cont\'eaineres da STL s\'e3o estruturas de dados parametrizadas pr\'e9- empacotadas, que a maioria dos programadores achar\'e1 suficientes para a maioria dos aplicativos que necessitar\'e3o implementar. A STL \'e9 um salto gigante para se visualisar a abordagem de reusar, reusar, reusar. \line Cap\'edtulo 16- Bits, caracteres, strings e estruturas - apresenta diversos recursos importantes. Os poderosos recursos de manipula\'e7\'e3o de bits de C++ possibilitam aos programadores escrever programas que utilizam recursos de hardware em n\'edvel mais baixo. Isto ajuda os programadores a processar strings de bits, ligar ou desligar bits individuais e armazenar informa\'e7\'f5es mais compactamente. Tais recursos, freq\'fcentemente encontrados apenas em linguagem de montagem de baixo n\'edvel, s\'e3o valiosos para os programadores que est\'e3o escrevendo software de sistema, tais como sistemas operacionais e software de rede. Como voc\'ea se lembra, introduzimos a manipula\'e7\'e3o de strings char* ao estilo de C no Cap\'edtulo 5 e apresentamos as fun\'e7\'f5es de manipula\'e7\'e3o de strings mais populares. No Cap\'edtulo 16, continuamos nossa apresenta\'e7\'e3o de strings de caracteres e char* ao estilo de C. Apresentamos os v\'e1rios recursos de manipula\'e7\'e3o de caracteres da biblioteca <cctype> - estes incluem a possibilidade de testar um caractere para ver se ele \'e9 um d\'edgito, um caractere alfab\'e9tico, um caractere alfanum\'e9rico. um d\'edgito hexadecimal, uma letra min\'fascula, uma letra mai\'fascula, etc. Apresentamos as demais fun\'e7\'f5es de manipula\'e7\'e3o de strings das v\'e1rias bibliotecas relacionadas com strings; como sempre, toda fun\'e7\'e3o \'e9 apresentada no contexto de um programa em C++ completo e que funciona. Estruturas s\'e3o como registros em Pascal e outras linguagens - elas agregam itens de dados de v\'e1rios tipos. S\'e3o usadas no Cap\'edtulo 14 para formar arquivos que consistem de registros de informa\'e7\'f5es. S\'e3o usadas em conjunto com ponteiros e a aloca\'e7\'e3o din\'e2mica de mem\'f3ria, no Cap\'edtulo 15 para formar estruturas de dados din\'e2micas, tais como listas encadeadas, filas, pilhas e \'e1rvores. Um destaque do cap\'edtulo \'e9 sua simula\'e7\'e3o revisada, de alta performance, do embaralhamento e distribui\'e7\'e3o de cartas. Esta \'e9 uma oportunidade excelente para o instrutor enfatizar a qualidade dos algoritmos. Os 38 exerc\'edcios incentivam o estudante a p\'f4r \'e0 prova a maioria dos recursos discutidos no cap\'edtulo. O exerc\'edcio especial conduz o estudante atrav\'e9s do desenvolvimento de um programa de revis\'e3o ortogr\'e1fica. Os Cap\'edtulos 1 a 5 e 16 a 18 tratam principalmente da parte de C\'f7+ \ldblquote herdada de C\rdblquote . Em particular, este cap\'edtulo apresenta um tratamento mais profundo de strings char* ao estilo de C, para benef\'edcio dos programadores de C++ que provavelmente trabalhar\'e3o com c\'f3digo legado em C. Lembramos ainda uma vez que o Cap\'edtulo 19 discute a classe string e a manipula\'e7\'e3o de strings como objetos no pleno sentido da orienta\'e7\'e3o a objetos. \line Cap\'edtulo 17 - O pr\'e9-processador - fornece discuss\'f5es detalhadas das diretivas do pr\'e9-processador. O cap\'edtulo inclui informa\'e7\'f5es mais completas sobre a diretiva #include. que faz com que uma c\'f3pia de um arquivo especificado seja inclu\'edda em lugar da diretiva antes de o arquivo ser compilado, e a diretiva #define, que cria constantes e macros simb\'f3licas. O cap\'edtulo explica a compila\'e7\'e3o condicional para possibilitar ao programador controlar a execu\'e7\'e3o de diretivas do pr\'e9-processador e a compila\'e7\'e3o do c\'f3digo do programa. S\'e3o discutidos o operador #, que converte seu operando em um string, e o operador ##. que concatena duas \ldblquote unidades l\'e9xicas\rdblquote . S\'e3o apresentadas as v\'e1rias constantes simb\'f3licas pr\'e9-definidas do pr\'e9-processador LLINE , FILE, DATE e TIMEJ. Finalmente, a macro assert do arquivo de cabe\'e7alho assert. h \'e9 discutida; assert \'e9 de grande valor em testes, depura\'e7\'e3o, verifica\'e7\'e3o e valida\'e7\'e3o de programas. Usamos assert em muitos exemplos, mas o leitor \'e9 fortemente aconselhado a come\'e7ar a usar o tratamento de exce\'e7\'f5es em seu lugar, como discutimos no Cap\'edtulo 13. \line Cap\'edtulo 18-T\'f3picos sobre c\'f3digo legado em C - apresenta t\'f3picos adicionais, incluindo v\'e1rios t\'f3picos avan\'e7ados normalmente n\'e3o cobertos em cursos introdut\'f3rios. Mostramos como redirecionar a entrada de um programa para vir de um arquivo, redirecionar a sa\'edda de um programa para ser colocada em um arquivo, redirecionar a sa\'edda de um programa para ser fornecida como entrada para outro programa (piping), anexar a sa\'edda de um programa a um arquivo existente, desenvolver fun\'e7\'f5es que usam listas de argumentos de comprimento vari\'e1vel, passar argumentos atrav\'e9s da linha de comando para a fun\'e7\'e3o main e us\'e1-los em um programa, compilar programas cujos componentes est\'e3o espalhados em diversos arquivos, registrar fun\'e7\'f5es com atexit para serem executadas no t\'e9rmino do programa, terminar a execu\'e7\'e3o do programa com a fun\'e7\'e3o exit, usar os qualificadores de tipo const e volatile, especificar o tipo de uma constante num\'e9rica usando os sufixos de inteiro e ponto flutuante, usar a biblioteca de manipula\'e7\'e3o de sinalizadores para capturar eventos inesperados, criar e usar arrays din\'e2micos com calloc e realloc, usar unions como uma t\'e9cnica de economizar espa\'e7o e usar especifica\'e7\'f5es de \ldblquote liga\'e7\'e3o\rdblquote  quando pro \par
XXIV PREF\'c1CIO \par
atrav\'e9s de convers\'f5es impl\'edcitas. Discutimos a palavra-chave mutable, que permite que um membro de um objeto const seja alterado. Anteriormente, isto era realizado fazendo-se uma coer\'e7\'e3o para \ldblquote retirar a caracter\'edstica de const\rdblquote , uma pr\'e1tica perigosa. Tamb\'e9m discutimos alguns recursos que n\'e3o s\'e3o novos, mas que optamos por n\'e3o incluir na parte principal do livro porque s\'e3o relativamente obscuros, quais sejam: operadores ponteiros para membros * e -> e o uso de classes base virtual com heran\'e7a m\'faltipla. \line Ap\'eandice A - Tabela de preced\'eancia de operadores - reformatamos a tabela para ser mais \'fatil. Cada operador est\'e1 agora em uma linha pr\'f3pria com o s\'edmbolo do operador, seu nome e sua associatividade. \line Ap\'eandice B - Conjunto de caracteres ASCII - resistimos \'e0 tenta\'e7\'e3o de expandir este ap\'eandice substancialmente para incluir o relativamente novo conjunto internacional de caracteres Unicode. Na pr\'f3xima edi\'e7\'e3o, esperamos discutir o Unicode em detalhes. \line Ap\'eandice C - Sistemas de numera\'e7\'e3o - discute os sistemas de numera\'e7\'e3o bin\'e1rio, octal, decimal e hexadecimal. Examina como converter n\'fameros entre bases e explica as representa\'e7\'f5es bin\'e1rias em complemento de um e de dois. \line Ap\'eandice D - Recursos sobre C++ na Internet e na Web - cont\'e9m uma listagem enorme de recursos de C++ valiosos, tais como demonstra\'e7\'f5es, informa\'e7\'f5es sobre compiladores populares (incluindo gratuitos), livros, artigos, confer\'eancias, bancos de ofertas de emprego, di\'e1rios, revistas, ajudas, tutoriais, FAQs (perguntas feitas freq\'fcentemente), grupos de not\'edcias, c\'f3pias do documento padr\'e3o C\'f7+ ANSI/ISO, cursos baseados na Web, not\'edcias sobre produtos e ferramentas de desenvolvimento em C++. \line Bibliografia - lista 125 livros e artigos - alguns de interesse hist\'f3rico e a maioria bastante recente - para incentivar o estudante a fazer leituras adicionais sobre C++ e OOP. \line\'cdndice - o livro cont\'e9m um \'edndice abrangente para possibilitar ao leitor localizar por palavra-chave qualquer termo ou conceito no texto. \line Agradecimentos \line Um dos grandes prazeres de escrever um livro de ensino \'e9 agradecer os esfor\'e7os de muitas pessoas cujos nomes n\'e3o podem aparecer na capa, mas cujo trabalho duro, coopera\'e7\'e3o, amizade e compreens\'e3o foram cruciais para a produ\'e7\'e3o do livro. \line Muitas outras pessoas na Deitel & Associates, Inc. dedicaram longas horas a este projeto. \line Tem Nieto, um diplomado do Massachusetts Institute ofTechnology, \'e9 um de nossos colegas em tempo integral na Deitei & Associates, mc. e recentemente foi promovido a Director of Product Development. Ele ministra semin\'e1rios de C++, C e Java e trabalha conosco na reda\'e7\'e3o de livros-texto e nos esfor\'e7os de desenvolvimento de cursos e cria\'e7\'e3o de material multim\'eddia. Tem foi co-autor do Cap\'edtulo 19, do Cap\'edtulo 21 e da se\'e7\'e3o especial intitulada \ldblquote Construindo seu pr\'f3prio compilador\rdblquote  no Cap\'edtulo 15. Ele tamb\'e9m fez contribui\'e7\'f5es para o Manual do Instrutor e para a C+ + Multimedia Cyber Classroom: \line Third Edition. \line\bullet  Barbara Deitei administrou a prepara\'e7\'e3o do manuscrito e coordenou junto \'e0 Prentice Hail todos os esfor\'e7os relacionados \'e0 produ\'e7\'e3o do livro. Os esfor\'e7os de Barbara s\'e3o sem d\'favida os mais esmerados dos que fazemos para desenvolver livros. Ela tem uma paci\'eancia infinita. Manipulou os infind\'e1veis detalhes relativos \'e0 publica\'e7\'e3o de um livro de 1.100 p\'e1ginas, um manual do instrutor de 550 p\'e1ginas e o CD de 650 megabytes da C++ Multimedia Cyber Classroom. Passou longas horas pesquisando as cita\'e7\'f5es no princ\'edpio de cada cap\'edtulo. E fez tudo isso em paralelo com suas vastas responsabilidades financeiras e administrativas na DeiteI & Associates. Inc. \line\bullet  Abbey Deitei, uma diplomada do programa de administra\'e7\'e3o industrial da Carnegie Melion University e agora Presidente e Diretora de Marketing Internacional na Deitel & Associates, Inc., escreveu o Ap\'eandice D e sugeriu o t\'edtulo para o livro. Pedimos que Abbey navegasse a World Wide Web e procurasse os melhores sites de C++. Utilizou todos os principais mecanismos de busca da Web e reuniu estas informa\'e7\'f5es \par
1 \par
para voc\'ea no Ap\'eandice D. Para cada recurso e demonstra\'e7\'e3o, Abbey forneceu uma breve explica\'e7\'e3o. Rejeitou centenas de sites e listou para voc\'ea os melhores que ela p\'f4de encontrar. Abbey estar\'e1 mantendo a listagem destes recursos e demonstra\'e7\'f5es em nosso site da Web www. deitei com. Envie a ela as URLs para seus sites favoritos, por e-mau para o endere\'e7o deitei@deitei com, e ela colocar\'e1 links para estes sites em nosso pr\'f3prio site. \line O grupo de estudantes estagi\'e1rios na Deitel & Associates, mc. que trabalhou neste livro inclui: \line\bullet  Ben Wiedermann - um estudante de Ci\'eancia da Computa\'e7\'e3o da Boston University - foi o desenvolvedor, programador e escritor l\'edder, trabalhando com o Dr. Harvey M. Deitei no estudo de caso da UML. Desejamos reconhecer o extraordin\'e1rio comprometimento e contribui\'e7\'f5es de Ben para este projeto. \line\bullet  Sean Santry - um graduado em Ci\'eancia da Computa\'e7\'e3o e filosofia pelo Boston Coilege - trabalhou na codifica\'e7\'e3o e nos walkthroughs de c\'f3digo do estudo de caso da UML. Sean juntou-se \'e0 Deitei & Associates, lnc. em tempo integral e est\'e1 trabalhando como l\'edder de desenvolvimento com Paul Deitei em nosso futuro livro, Advanced Java How to Program. \line\bullet  Biake Perdue - um estudante de Ci\'eancia da Computa\'e7\'e3o da Vanderbilt University - ajudou a desenvolver o estudo de caso da UML. \line\bullet  Kalid Azad - um estudante de Ci\'eancia da Computa\'e7\'e3o da Princeton University - trabalhou extensamente no material auxiliar do livro, incluindo as notas de aula para o instrutor em PowerPoint e o banco de testes. \line\bullet  Aftab Bukhari -um estudante de Ci\'eancia da Computa\'e7\'e3o da Boston University - executou verifica\'e7\'e3o e testes extensos dos programas e trabalhou no material auxiliar do livro, incluindo as Notas de Aula para o Instrutor em PowerPoint e o Manual do Instrutor. \line\bullet  Jason Rosenfeld - um estudante de Ci\'eancia da Computa\'e7\'e3o da Northwestern University - trabalhou no material auxiliar do livro, incluindo o Manual do Instrutor. \line\bullet  Melissa Jordan - uma estudante de projeto gr\'e1fico da Boston University - coloriu a arte final de todo o livro e criou diversas ilustra\'e7\'f5es originais. \line\bullet  Rudolf Faust - um calouro da Stanford University - ajudou a criar o banco de testes. \line N\'f3s temos sorte de ter podido trabalhar neste projeto com um time talentoso e dedicado de profissionais de publica\'e7\'e3o na Prentice HaIl. Este livro foi realizado por causa do encorajamento, entusiasmo e persist\'eancia de nossa editora de Ci\'eancia da Computa\'e7\'e3o, Petra Recter, e sua chefe - a melhor amiga que tivemos em 25 anos de publica\'e7\'e3o - Marcia Horton, Editora Chefe da Divis\'e3o de Engenharia e Ci\'eancia da Computa\'e7\'e3o da Prentice HaIl. Camille Trentacoste fez um trabalho maravilhoso como gerente de produ\'e7\'e3o. Sarah Burrows fez um trabalho maravilhoso com sua atua\'e7\'e3o tanto no processo de revis\'e3o quanto nos suplementos do livro. \line A C++ Multimedia Cyber Classroom: Third Edition foi desenvolvida em paralelo com C++ Como Programar - Terceira Edi\'e7\'e3o. Apreciamos sinceramente a perspic\'e1cia, compreens\'e3o e per\'edcia t\'e9cnica nas \ldblquote novas m\'eddias\rdblquote  de nosso editor Mark Taub e sua colega Karen McLean. Mark e Karen fizeram um trabalho not\'e1vel conseguindo publicar a C++ Multimedia Cyber Classroom: Third Edition dentro de um cronograma apertado. Eles est\'e3o, seguramente, entre os l\'edderes mundiais em publicaca\'e7\'e3o nas novas m\'eddias. \line Devemos um agradecimento especial \'e0 criatividade de Tamara Newnam Cavallo (smart- art@earthiink net), que fez o trabalho art\'edstico para nossos \'edcones de dicas de programa\'e7\'e3o e para a capa. Eia criou a criatura deliciosa que compartilha com voc\'ea as dicas de programa\'e7\'e3o do livro. Ajude-nos a dar um nome a este am\'e1vel bichinho. Algumas primeiras sugest\'f5es: D. Bug, lnterGnat, Ms. Kito, DeetleBug (um apelido infeliz dado ao \ldblquote cara velho\rdblquote  no segundo grau) e Feature (\ldblquote n\'e3o \'e9 um bug, \'e9 uma feature\rdblquote ). \line Queremos reconhecer os esfor\'e7os dos revisores de nossa Terceira Edi\'e7\'e3o e deixar uma nota especial de agradecimento a Crissy Statuto, da Prentice HalI, que administrou este extraordin\'e1rio trabalho de revis\'e3o. \line Revisores do material de C++ \line\bullet  Tamer Nassif (Motorola) \line\bullet  Christophe Dinechin (Hewlett-Packard) \line\bullet  Thomas Kiesler (Montgomery College) \line\bullet  Mary Astone (Troy State University) \line\bullet  Simon North (Synopsis) \par
PREF\'c1CIO XXV \par
1 \par
XXVI PREFACIO \line\bullet  Harold Howe (Inprise) \line\bullet  William Hasserman (University ofWisconsin) \line\bullet  Phillip Wasserman (Chabot Coliege) \line\bullet  Richard Albright (University of Delaware) \line\bullet  Mahe Velauthapilla (Georgetown University) \line\bullet  Chris Uzdavinis (Automated Trading Desk) \line\bullet  Stephen Clamage (Chairman do Comit\'ea de Padr\'f5es ANSI C++) \line\bullet  Ram Choppa (Akili Systems; University of Houston) \line\bullet  Wolfgang Peiz (University ofAkron) \line Revisores do estudo de caso da I]ML \line\bullet  Spencer Roberts (Titus Corporation) \line\bullet  Don Kostuch (You Can C Clearly Now) \line\bullet  Kendall Scott (Consultor independente; autor de UML) \line\bullet  Grant Larsen (Blueprint Technologies) \line\bullet  Brian Cook (Technical Resource Connection; OMG) \line\bullet  Michael Chonoles (Chefe de Metodologia, Lockheed Martin Advanced Concepts; OMG) \line\bullet  Stephen Tockey (Construx Software; OMG) \line\bullet  Cameron Skinner (Advanced Software Technologies; OMG) \line\bullet  Rick Cassidy (Advanced Concepts Center) \line\bullet  Mark Contois (NetBeans) \line\bullet  David Papurt (Consultor independente; professor e autor de C++) \line\bullet  Chris Norton (AD2IT; consultor independente) \line Desejamos reconhecer, novamente, os esfor\'e7os de nossos revisores de edi\'e7\'f5es anteriores (alguns da primeira edi\'e7\'e3o, alguns da segunda edi\'e7\'e3o e alguns de ambas): \line\bullet  Richard Albright (University of Delaware) \line\bullet  Ken Arnold (Sun Microsystems) \line\bullet  lan Baker (Microsoft) \line\bullet  Pete Becker (Membro do Comit\'ea ANSI/ISO C++; Dinkumware LTD.) \line\bullet  Timothy D. Bom (Delta C-Fax) \line\bullet  John Carson (George Washington University) \line\bullet  Steve Clamage (Chairman do Comit\'ea de Padr\'f5es ANSJJISO C++; Sunsoft) \line\bullet  Marian Corcoran (Membro do Comit\'ea de Padr\'f5es ANSI/ISO C++) \line\bullet  Edgar Crisostomo (Siemens/Roim) \line\bullet  David Finkel (Worcester Polytechnic Institute) \line\bullet  Rex Jaeschke (Chairman do Comit\'ea ANSI/ISO) \line\bullet  Frank Kelbe (Naval Postgraduate School) \line\bullet  Chris Kelsey (Kelsey Associates) \line\bullet  Don Kostuch (You Can C Clearly Now) \line\bullet  Meng Lee (Co-criador da STL; Hewlett-Packard) \line\bullet  Barbara Moo (AT&T Bell Labs) \line\bullet  David Papurt (Consultor) \line\bullet  Wolfgang Pelz (University ofAkron) \line\bullet  Jandelyn Plane (University of Maryland Coilege Park) \line\bullet  Paul Power (Borland) \line\bullet  Kenneth Reek (Rochester Institute of Technology) \line\bullet  Larry Rosler (Hewlett-Packard) \line\bullet  Robin Rowe (HalyconlNaval Postgraduate School) \line\bullet  Brett Schuchert (ObjectSpace; Co-Autor de STL Primer) \line\bullet  Alexander Stepanov (Co-criador da STL; Silicon Graphics) \line\bullet  William Tepfenhart (AT&T; Autor de UML and C++. A Practical Guide to Object-Oriented Development) \par
PREF\'c1CIO XXVII \line\bullet  David Vandevoorde (Membro do Comit\'ea ANSI/ISO C++ Hewlett-Packarcl) \line\bullet  Terry Wagner (University of Texas) \line Dentro de prazos finais apertados, eles vasculharam todos os aspectos do texto e fizeram incont\'e1veis sugest\'f5es para melhorar a precis\'e3o e perfei\'e7\'e3o da apresenta\'e7\'e3o. \line Apreciar\'edamos sinceramente seus coment\'e1rios, cr\'edticas, corre\'e7\'f5es e sugest\'f5es para melhorar o texto. Enderece toda correspond\'eancia para: \line deitel@deitel com \line Responderemos imediatamente. Bem, por agora \'e9 s\'f3. Bem-vindo ao mundo excitante de C+\'f7, da programa\'e7\'e3o orientada a objetos, da UML e da programa\'e7\'e3o gen\'e9rica com a STL. Esperamos que voc\'ea aprecie esta olhada na programa\'e7\'e3o de computadores contempor\'e2nea. Boa sorte! \line Dr. Harvey M. Deitei \line Paul J. Deitei \line Sobre os autores \line Dr. Harvey M. Deitei, CEO de Deitei & Associates, mc., tem uma experi\'eancia de 39 anos no campo da computa\'e7\'e3o, incluindo extensa experi\'eancia acad\'eamica e na ind\'fastria. Ele \'e9 um dos principais instrutores de Ci\'eancia da Computa\'e7\'e3o e apresentadores de semin\'e1rios do mundo. Dr. Deitei recebeu os graus de B.S. e M.S. do Massachusetts Institute of Technology e um Ph.D. da Boston University. Trabalhou em projetos pioneiros de sistemas operacionais de mem\'f3ria virtual na IBM e no MIT, que desenvolveram t\'e9cnicas amplamente implementadas hoje em dia em sistemas como UNIX, Windows NTTM e 0S12. Tem 20 anos de experi\'eancia de ensino acad\'eamico, incluindo o de professor assalariado e de Chairman do Departamento de Ci\'eancia da Computa\'e7\'e3o no Boston Coilege antes de fundar a Deitei & Associates, mc. com Paul J. Deitei. E autor ou co-autor de dezenas de livros e pacotes de multim\'eddia e est\'e1 escrevendo atualmente mais cinco. Com tradu\'e7\'f5es publicadas em japon\'eas, russo, espanhol, chin\'eas elementar, chin\'eas avan\'e7ado, coreano, franc\'eas, portugu\'eas, polon\'eas e italiano, os textos dos Deitei alcan\'e7aram um reconhecimento internacional. \line Paul J. Deitei, Vice-Presidente Executivo da Deitei & Associates, mc., \'e9 diplomado pela Sloan School of Management do Massachusetts Institute ofTechnology, onde estudou Tecnologia de Informa\'e7\'e3o. Atrav\'e9s da Deitei & Associates, mc., deu cursos de Java, C, C++, lnternet e World Wide Web para clientes da ind\'fastria, incluindo Compaq, Sun Microsystems, White Sands Missile Range, Rogue Wave Software, Computervision, Stratus, Fidelity, Cambridge Technology Partners, Open Environment Corporation, One Wave, Hyperion Software, Lucent Technologies, Adra Systems, Entergy, CableData Systems, NASA no Kennedy Space Center, National Severe Storm Center, IBM e muitas outras organiza\'e7\'f5es. Tem lecionado C++ e Java para o Boston Chapter da Association for Computing Machinery e ministrou cursos de Java baseados em sat\'e9lite atav\'e9s de uma colabora\'e7\'e3o entre a Deitei & Associates, mc., a Prentice Hali e a Tecnology Education Network. \line Os Deitei s\'e3o co-autores dos livros de ensino de Ci\'eancia da Computa\'e7\'e3o a n\'edvel acad\'eamico introdut\'f3rio mais vendidos, C How to Program. Third Edition, Java How to Program: Third Edition, Visual Basic 6 How lo Program (em co-autoria com Tem R. Nieto) e Internet and World Wide Web How to Program (em co-autoria com Tem R. Nieto). Os Deitei s\'e3o tamb\'e9m co-autores do C++ Multimedia Cyber Classroom: Third Edition (cuja primeira edi\'e7\'e3o foi o primeiro livro baseado em muitim\'eddia da Prentice Hali), do Java 2 Multimedia Cyber Classroom: Third Edition, da Visual Basic 6 Multimedia Cyber Classroom e do Internet and World Wide Web Programming Multimedia Cvber Classroom. Os Deitei s\'e3o tamb\'e9m co-autores do The Complete C+ + Training Course. Third Edition, The Complete Visual Basic 6 Training Course. The Complete Java 2 Training Course: Third Edition e do The Complete InterneI and World Wide Web Programming Training Course - cada um destes produtos cont\'e9m o livro correspondente da s\'e9rie Como Programar e a Multimedia Cyber Classroom correspondente. \par
XXVIII PREF\'c1CIO \line Sobre a Deitei & Associates, mc. \line A Deitei & Associates, mc. \'e9 uma organiza\'e7\'e3o em r\'e1pido crescimento, internacionalmente reconhecida no treinamento corporativo e publica\'e7\'f5es, especializada na educa\'e7\'e3o em linguagens de programa\'e7\'e3o, Internet, World Wide Web e tecnologia de objetos. A empresa oferece cursos sobre programa\'e7\'e3o em C++, Java, C, Visual Basic, Internet e World Wide Web e tecnologia de objetos. Os principais dirigentes da Deitei & Associates, mc. s\'e3o Dr. Harvey M. Deitei e Paul J. Deitei. Entre os clientes da empresa incluem-se algumas das maiores empresas fabricantes de computadores do mundo, ag\'eancias governamentais e organiza\'e7\'f5es comerciais. Atrav\'e9s de sua parceria para publica\'e7\'f5es com a Prentice Hail, Deitei & Associates, mc. publica livros de ponta e livros profissionais, Cyber Classrooms interativas em multim\'eddia baseadas em CD-ROM e cursos baseados na World Wide Web. A Deitei & Associates, lnc. e os autores podem ser contactados via e-mau em \line deitei@deitei com \line Para conhecer mais sobre Deitei & Associates, mc., suas publica\'e7\'f5es e sobre seus curr\'edculos de cursos no local, visite: \line www. deitei, com \line Para conhecer mais sobre as publica\'e7\'f5es Deitei/Prentice Hail, visite: \line www prenhali .com/deitei \par
\pard\lang1033\f1\fs20\par
}
 