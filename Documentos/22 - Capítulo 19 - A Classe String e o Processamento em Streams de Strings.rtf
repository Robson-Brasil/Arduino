{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fcharset0 Times New Roman;}}
\viewkind4\uc1\pard\sb100\sa240\lang2070\f0\fs24\par
\par
\ul 19 \ulnone\line A classe string e o processamento em stream \line de strings  \par
 Objetivos \par
\par
\bullet  Usar a classe string da biblioteca padr\'e3o de C++ para \line que possamos tratar strings como objetos no pleno sentido \line  \bullet  Ser capaz de atribuir, concatenar, comparar, pesquisar e \line  intercambiar (swap) strings \line\bullet  Ser capaz de determinar as caracter\'edsticas de um string \line\bullet  Ser capaz de encontrar, substituir e inserir caracteres em \line um string \line\bullet  Ser capaz de converter strings ao estilo de strings de C \line\bullet  Ser capaz de usar iteradores de strings \line\bullet  Ser capaz de executar entrada e sa\'edda de strings na \line mem\'f3ria \line A dftren\'e7a entre a palavra certa e a quase certa \'e9 realmente \line uma quest\'e3o importante - \'e9 a diferen\'e7a entre um vaga-lume \line e um rel\'e2mpago. \line Mark Twain, Carta a George Bainton (15 de outubro de 1888) \line Escrevi uma carta longa demais, pois \line me faltou tempo para escrev\'ea-la mais curta. \line Biaise Pascal \line Silenciosa \'e9 a palavra. \line Miguel de Cervantes, Don Quixote de Ia Mancha \par
Que a a\'e7\'e3o sirva \'e0 palavra, e a palavra, \'e0 a\'e7\'e3o; com essa observa\'e7\'e3o particulai que voc\'ea n\'e3o transgrida a mod\'e9stia da natureza. \line William Shakespeare, Hamlet \par
890 C++ COMO PROGRAMAR \line\ul Vis\'e3o Geral \ulnone\line 19.1 Introdu\'e7\'e3o \line 19.2 Atribui\'e7\'e3o e concatena\'e7\'e3o de strings \line 19.3 Comparando str\'edngs \line 19.4 Substrings \line 19.5 Intercambiando strings \line 19.6 Caracter\'edsticas de str\'edng \line 19.7 Encontrando caracteres em um string \line 19.8 Substituindo caracteres em um string \line 19.9 Inserindo caracteres em um string \line 19.10 Convers\'e3o para strings char* no estilo da linguagem C \line 19.11 Iteradores \line 19.12 Processamento de strings em streams \line Resumo\bullet  Terminologia Erros comuns de programa\'e7\'e3o Boa pr\'e1tica de programa\'e7\'e3o \bullet  Dica de desempenho \bullet  Dica de teste e depura \'e7\'e3o \bullet  Exerc\'edcios de auto-revis\'e3o Respostas aos exerc\'edcios de auto-revis\'e3o\bullet  Exerc\'edcios \line 19.1 Introdu\'e7\'e3o \line A classe gabarito basic string de C++ fornece opera\'e7\'f5es t\'edpicas de manipula\'e7\'e3o de strings, tais como c\'f3pia, pesquisa, etc. A defini\'e7\'e3o do gabarito e de todos os recursos de apoio est\'e3o no namespace std estas incluem o comando typedef \line typedef basic_string< char > string; \line que cria o tipo alias (nome alternativo) string para basicstrirzg< char >. Tamb\'e9m \'e9 fornecido um typedef para o tipo wchar_t. O tipo wchar_t armazena caracteres (por exemplo, caracteres de 2 bytes, caracteres de 4 bytes, etc.) para suportar outros conjuntos de caracteres. Em todo este cap\'edtulo, usamos exclusivamente string. Para usar strings. inclua o arquivo de cabe\'e7alho <string> da biblioteca padr\'e3o de C++. [Nota: o tipo wchart \'e9 comumente usado para representar Unicode, que tem caracteres de 16 bits, mas o tamanho da wchat_t n\'e3o \'e9 fixado pelo padr\'e3o.j \line Um objeto string pode ser inicializado com um argumento para o construtor tal como \line string sl( \ldblquote Bom dia!\rdblquote  ); 1/ cria um string a partir de um const char* \line que cria um string contendo os caracteres em \ldblquote Bom dia! \ldblquote  exceto, talvez, o caractere de termina\'e7\'e3o \lquote\\0 , ou com dois argumentos como em \line string s2( 8, \lquote x\rquote  ); 1/ string de 8 caracteres \lquote x\rquote  \line que cria um string contendo oito caracteres \lquote x\rquote  . A classe strng tamb\'e9m fornece um construtor default e um construtor de c\'f3pia. \line Um string tamb\'e9m pode ser inicializado atrav\'e9s da sintaxe alternativa de constru\'e7\'e3o na defini\'e7\'e3o de um string, como em \line string m\'eas = \ldblquote mar\'e7o\rdblquote ; // o mesmo que: string m\'eas( \ldblquote mar\'e7o\rdblquote  ); \line Lembre-se de que o operador = na declara\'e7\'e3o precedente n\'e3o \'e9 uma atribui\'e7\'e3o, mas sim uma chamada para o construtor de c\'f3pia da classe string, o qual faz a convers\'e3o implicitamente. \par
1 \line 1 \par
CAP\'cdTULO 19 - A CLASSE String E O PROCESSAMENTO EM STREAM DE STRINGS 891 \line Note que a classe string n\'e3o fornece convers\'f5es de int ou char para string em uma defini\'e7\'e3o de \line string. Por exemplo, as defini\'e7\'f5es \line string errorl= \lquote c\rquote ; \line string error2( u\rquote  ); \line string error3 = 22; \line string error4( 8 ); \line resultam em erros de sintaxe. Note que atribuir um \'fanico caractere a um objeto string \'e9 permitido em um comando de atribui\'e7\'e3o, como em \line s = \line Erro comum de programa\'e7\'e3o 19.1 \line Tentar converter um int ou um char para um string atrav\'e9s de uma atribui\'e7\'e3o em uma declara\'e7\'e3o \line ou atrav\'e9s de um argumento para um construtor \'e9 um erro de sintaxe. \line Erro comum de programa\'e7\'e3o 19.2 \line Construir um string que \'e9 longo demais para ser representado dispara uma exce\'e7\'e3o lengtherror. \line Diferentemente dos strings char* ao estilo de C, strings n\'e3o s\'e3o necessariamente terminados por um caractere nulo. O comprimento de um string \'e9 armazenado no objeto string e pode ser acessado com a fun\'e7\'e3o membro lenght. O operador subscrito, [ ] , pode ser usado com strings para acessar caracteres individuais. Como strings ao estilo de C, strings t\'eam um primeiro subscrito O e um \'faltimo subscrito de length-1. Note que um string n\'e3o \'e9 um ponteiro - a express\'e3o &s [ O 1 n\'e3o \'e9 equivalente a s quando s \'e9 um string. \line A maioria das fun\'e7\'f5es membro de string aceitam como argumentos uma posi\'e7\'e3o inicial dada por um \line subscrito e o n\'famero de caracteres sobre os quais operar. \line Tentar passar para uma fun\'e7\'e3o membro de string um valor maior do que o comprimento do string (como o n\'famero de caracteres a serem processados) resulta no valor sendo feito igual \'e0 diferen\'e7a entre o valor passado e o comprimento do string. Por exemplo, passar 2 (subscrito inicial) e 100 (n\'famero de caracteres) para uma fun\'e7\'e3o que opera sobre um string de tamanho 50 resulta em 48 (50-2) sendo usado para o n\'famero de caracteres. \line O operador de extra\'e7\'e3o de stream (\'bb)\'e9 sobrecarregado para suportar strings. O comando \line string stringObject; \line cm \'bb stringObject; \line l\'ea um string do dispositivo padr\'e3o de entrada. A entrada \'e9 delimitada por caracteres em branco. A fun\'e7\'e3o getline (do arquivo de cabe\'e7alho <string>) tamb\'e9m \'e9 sobrecarregada para strings. O comando \line string s; \line getline( cm, s ); \line l\'ea um string a partir do teclado para s. A entrada \'e9 delimitada por um caractere de nova linha (\lquote  \\n\rquote ). \line 19.2 Atribui\'e7\'e3o e concatena\'e7\'e3o de strings \line O programa da Fig. 19.1 demonstra a atribui\'e7\'e3o e concatena\'e7\'e3o de strings. \par
Fig. 19.1 Demonstrando a atribui\'e7\'e3o e concatena\'e7\'e3o de string (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx205\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5483\pard\intbl 1 \cell // Fig. 19.1: figl9Ol.cpp \cell\row
\intbl 2 \cell II Demonstrando a atribui\'e7\'e3o e concatena\'e7\'e3o de strings \cell\row
\intbl 3 \cell #include <iostream> \cell\row
\intbl 4 \cell\cell\row
\intbl 5 \cell using std::cout; \cell\row
\pard\par
\pard\sb100\sa240 892 C++ COMO PROGRAMAR \line 6 using std: :endl; \line 7 \line 8 #include <string> \line 9 \line 10 using std::string; \line 11 \line 12 int main() \line 13 \{ \line 14 string sl( \ldblquote cat\rdblquote  ) , s2, s3; \line 15 \line 16 s2 = si; /1 atribui si a s2 com = \line 17 s3.assign( si ) ; II atribui si a s3 com assigri() \line i8 cout \'ab \ldblquote si: \lquote  \'ab si \'ab \ldblquote\\ns2: \ldblquote  \'ab s2 \'ab \ldblquote\\ns3: \line 19 \'ab s3 \'ab \ldblquote\\n\\n\rdblquote ; \line 20 \line 21 II modifica s2 e s3 \line 22 s2[0]=s3[2)=\rquote r\rquote ; \line 23 \line 24 cout \'ab \ldblquote Ap\'f3s a modifica\'e7\'e3o de s2 e s3:\\n\rquote  \line 25 \'ab \ldblquote si: \ldblquote  \'ab si \'ab \lquote\\ns2: \ldblquote  \'ab s2 \'ab \ldblquote\\ns3: \ldblquote ; \line 26 \line 27 II demonstrando a fun\'e7\'e3o membro atO \line 28 int ien = s3.1ength \line 29 for ( int x = 0; x < len; ++x \line 30 cout \'ab s3.at( x ); \line 31 \line 32 II concatena\'e7\'e3o \line 33 string s4( si + \lquote apuit\rdblquote  ), s5; II declara s4 e s5 \line 34 \line 35 II + sobrecarregado \line 36 s3 += \ldblquote pet\rdblquote ; II cria \ldblquote carpet\rdblquote  \line 37 si.append( \ldblquote acomb\rdblquote  ); II cria \ldblquote catacomb\rdblquote  \line 38 \line 39 II acrescenta as posi\'e7\'f5es com subscritos 4 at\'e9 o fim de si \line 40 II para criar o string \ldblquote conib\rdblquote  (inicialmente, s5 estava vazio) \line 41 s5.append( si, 4, si.size() ); \line 42 \line 43 cout \'ab \\n\\nAp\'f3s a concatena\'e7\'e3o:\\n \'ab \ldblquote si: \ldblquote  \'ab si \line 44 \'ab \ldblquote\\ns2: \ldblquote  \'ab s2 \'ab \lquote\\ns3: \ldblquote  \'ab s3 \'ab \lquote\\ns4: \ldblquote  \'ab s4 \line 45 \'ab \ldblquote\\ns5: \ldblquote  \'ab s5 \'ab endi; \line 46 \line 47 return 0; \line 48 \} \line si: cat \line s2: cat \line s3: cat \line Ap\'f3s a modifica\'e7\'e3o de s2 e s3: \line si: cat \line s2: rat \line s3: car \line Ap\'f3s a concatena\'e7\'e3o: \line si: catacomb \line s2: rat \line s3: carpet \line s4: catapult \line s5: comb \line Fig. 19.1 Demonstrando a atribui\'e7\'e3o e concatena\'e7\'e3o de string (parte 2 de 2). \par
CAP\'cdTULO 19 - A CLASSE String E O PROCESSAMENTO EM STREAM DE STRINGS 893 \par
A linha 8 inclui o cabe\'e7alho string \'e0 classe string. Tr\'eas strings si, s2 e s3 s\'e3o criados na linha 14. A linha \line 16 \line s2 = si; II atribui si a s2 com = \line atribui o string si para s2. Ap\'f3s ocorrer a atribui\'e7\'e3o, s2 \'e9 uma c\'f3pia de si, mas s2 n\'e3o est\'e1 vinculado a si de nenhuma maneira. A linha 17 \line s3.assign( si ) ; II atribui si a s3 com assign() \line usa a fun\'e7\'e3o membro assign para copiar si a s3. \'c9 feita uma c\'f3pia separada (i. e., si e s3 s\'e3o objetos independentes). A classe string tamb\'e9m fornece uma vers\'e3o sobrecarregada da fun\'e7\'e3o assign, que copia um n\'famero especificado de caracteres, como em \line meuString.assign( s, inicio, numeroDeCaracteres); \line onde s \'e9 o string a ser copiado, inicio \'e9 o subscrito inicial e numeroDeCaracteres \'e9 o n\'famero de caracteres a serem copiados. \line A linha 22 \line s2[ O 1 = s3[ 2 1 = \line usa o operador subscrito para atribuir r\rquote  para s 3 [ 2 ) (formando car \lquote ) e para atribuir T r\rquote  a s2 [ O 1 (formando \ldblquote rat\rdblquote ). Os strings s\'e3o ent\'e3o exibidos. \line As linhas 28 a 30 \line int len = s3.iengthO; \line for ( int x = O; x < len; ++x \line cout \'ab s3.at( x \line usam um la\'e7o for para exibir o conte\'fado de s3 um caractere por vez, usando a fun\'e7\'e3o at. A fun\'e7\'e3o at fornece um acesso com verifica\'e7\'e3o de intervalo, i.e., ultrapassar o fim do string dispara uma exce\'e7\'e3o out of range (ver o Cap\'edtulo 13 para uma discuss\'e3o detalhada do tratamento de exce\'e7\'f5es). Note que o operador subscrito, [ J, n\'e3o fornece um acesso com verifica\'e7\'e3o de intervalo. Isto \'e9 consistente com o uso de arrays. \line Erro comum de programa\'e7\'e3o 19.3 \line Acessar um subscrito de string fora dos limites do string usando afun\'e7\'e3o at dispara uma exce\'e7\'e3o out_of_range. \line Erro comum de programa\'e7\'e3o 19.4 \line Acessar um elemento al\'e9m do tamanho de um string usando o operador subscrito \'e9 um erro de l\'f3gica. \line O string s4 \'e9 declarado (linha 33) e inicializado com o resultado da concatena\'e7\'e3o de si e \ldblquote apuit\rdblquote  usando o operador de adi\'e7\'e3o, +, sobrecarregado, o qual para a classe string indica concatena\'e7\'e3o. A linha 36 \line s3 += \ldblquote pet\rdblquote ; II cria carpet\rdblquote  \line usa o operador adi\'e7\'e3o de atribui\'e7\'e3o, +=, para concatenar s3 e \ldblquote pet\rquote . \line A linha 37 \line si.append( \ldblquote acoznb\rdblquote  ); // cria \ldblquote catacomb\rdblquote  \line usa a fun\'e7\'e3o append para concatenar si e \ldblquote acomb\rdblquote . A linha 41 \line s5.append( si, 4, si.size() ); \line anexa caracteres de si a s5. Os caracteres do quarto ao \'faltimo elemento de si s\'e3o concatenados a s5. A fun\'e7\'e3o size retorna o n\'famero de caracteres no string si. \par
894 C++ COMO PROGRAMAR \line 19.3 Comparando strings \line A classe string fornece fun\'e7\'f5es para comparar strings. O programa da Fig. 19.2 demonstra os recursos para compara\'e7\'e3o de strings. \line 1 II Fig. 19.2: figi9_02.cpp \line 2 II Demonstrando os recursos para compara\'e7\'e3o de strings \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::endl; \line 7 \line 8 #include <string> \line 9 \line 10 using std::string; \line 11 \line 12 int main() \line 13 \{ \line 14 string si( \ldblquote Testando as fun\'e7\'f5es de compara\'e7\'e3o.\rdblquote ), \line 15 s2(Hello\rdblquote  ), s3( \ldblquote stinger\rquote  ), zi( s2 ); \line 16 \line 17 cout \'ab \ldblquote si: \ldblquote  \'ab si \'ab \ldblquote\\ns2: \'ab s2 \line 18 \'ab \ldblquote\\ns3: \ldblquote  \'ab s3 \'ab \\nzi: \lquote  \'ab zi \'ab \ldblquote\\n\\n\rdblquote ; \line 19 \line 20 II comparing si and zi \line 21 if(si==zi) \line 22 cout \'ab \ldblquote si == zi\\n\rdblquote ; \line 23 else \{ // si != zi \line 24 if(sl>zl) \line 25 cout \'ab \ldblquote si > zi\\n\rquote ; \line 26 else // si < zi \line 27 cout \'ab \ldblquote si < zi\\n\rdblquote ; \line 28 ) \line 29 \line 30 II comparing si and s2 \line 31 int f = si.compare( s2 ); \line 32 \line 33 if (f==0) \line 34 cout \'ab \ldblquote si.compare( s2 ) == 0\\n\rdblquote ; \line 35 elseif ( f>0 \line 36 cout \'ab \ldblquote sl.compare( s2 ) > 0\\n\rdblquote ; \line 37 else // f< O \line 38 cout \'ab \ldblquote si.compare( s2 ) < 0\\n\rdblquote ; \line 39 \line 40 II cornparing si (elements 2 - 5) and s3 (elements O - 5) \line 41 f = si.compare( 2, 5, s3, 0, 5 ); \line 42 \line 43 if(f==0) \line 44 cout \'ab \ldblquote si.compare( 2, 5, s3, 0, 5 ) == 0\\n\rdblquote ; \line 45 elseif ( f>0 \line 46 cout \'ab \lquote sl.compare( 2, 5, s3, 0, 5 ) > 0\\n\rdblquote ; \line 47 else // f<0 \line 48 cout \'ab \ldblquote sl.compare( 2, 5, s3, 0, 5 ) < 0\\n\rdblquote ; \line 49 \line 50 II comparing s2 and zi \line 51 f = zi.compare( 0, s2.size(), s2 ); \line Fig. 19.2 Comparando strings (parte 1 de 2). \par
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 19- A CLASSE string E O PROCESSAMENTO EM STREAM DE STR\'cdNGS 895 \line 52 \line 53 if (f==0) \line 54 cout \'ab zi.compare( 0, s2.sizeO, s2 ) 0 \'ab endi; \line 55 elseif ( f>0 \line 56 cout \'ab \lquote zi.compare( 0, s2.size(), s2 ) > 0 \'ab endi; \line 57 else // f< O \line 58 cout \'ab \ldblquote zl.compare( 0, s2.size(), s2 ) < 0\rdblquote  \'ab endi; \line 59 \line 60 return 0; \line 61 \} \line si: Testando as fun\'e7\'f5es de compara\'e7\'e3o. \line s2: Helio \line s3: stinger \line zi: Heilo \line si > zi \line si.compare( s2 ) > O \line sl.compare( 2, 5, s3, 0, 5 ) == O \line zi.compare( 0, s2.size, s2 ) == O \line Fig. 19.2 Comparando strings (parte 2 de 2). \line O programa compara quatro strings com as linhas 14 e 15 \line string sl( \ldblquote Testando as fun\'e7\'f5es de compara\'e7\'e3o.\rdblquote  \line s2(\rdblquote Hello\rdblquote  ), s3( stinger\rquote  ), zi( s2 ); \line e envia para a sa\'edda cada string (linhas 17 e 18). A condi\'e7\'e3o \line si == zi \line na linha 21 testa se si \'e9 igual a zi. Se a condi\'e7\'e3o \'e9 true, \ldblquote si == zi\rdblquote  \'e9 exibido. Se a condi\'e7\'e3o \'e9 faise, a condi\'e7\'e3o \line si > zi \line na linha 24 \'e9 testada. Todas as fun\'e7\'f5es de operador sobrecarregadas demonstradas aqui, bem como as n\'e3o demonstradas aqui (!=, <, >= e <=) retornam valores booi. \line A linha 31 \line int f = sl.compare( s2 ); \line usa a fun\'e7\'e3o compare de string para comparar si com s2. A vari\'e1vel f\'e9 declarada e recebe O se os strings s\'e3o equivalentes, um n\'famero positivo se si \'e9 lexicograficamente maior que s2 ou um n\'famero negativo se si \'e9 lexicograficamente menor que s2. \line A linha 41 \line f = sl.compare( 2, 5, s3, 0, 5 ); \line usa uma vers\'e3o sobrecarregada da fun\'e7\'e3o compare. para comparar partes de si e s3. Os dois primeiros argumentos (2 e 5) especificam o subscrito inicial e o comprimento da parte de si a ser comparada com s3. O terceiro argumento \'e9 o string de compara\'e7\'e3o. Os \'faltimos dois argumentos (0 e 5) s\'e3o o subscrito inicial e o comprimento da parte do string de compara\'e7\'e3o a ser comparada. O valor atribu\'eddo a f \'e9 O para igualdade, um n\'famero positivo se si \'e9 lexicograficamente maior que s3 ou um n\'famero negativo se si \'e9 lexicograficamente menor que s3. Um string \'e9 ent\'e3o impresso com base no valor de f. \line A linha 5 1 \line f = zi.compare( 0, s2.sizeO, s2 ); \par
896 C++ COMO PROGRAMAR \line usa outra vers\'e3o sobrecarregada da fun\'e7\'e3o compare para comparar zl e s2. O primeiro argumento especifica o subscrito inicial de zi na compara\'e7\'e3o. O segundo argumento especifica o comprimento da parte de zi usada na compara\'e7\'e3o. A fun\'e7\'e3o size retorna o n\'famero de caracteres no string especificado. O \'faltimo argumento \'e9 o string de compara\'e7\'e3o. O valor atribu\'eddo a f \'e9 ou O para igualdade, um n\'famero positivo se zi \'e9 lexicograticamente maior que s2 ou um n\'famero negativo se zi \'e9 lexicograficamente menor que s2. Um string \'e9 ent\'e3o impresso com base no valor de f. \line 19.4 Substrings \line A classe string fornece a fun\'e7\'e3o substr para recuperar um substring de um string. O programa da Fig. 19.3 demonstra substr. \line 1 II Fig. 19.3: figl9_03.cpp \line 2 // Demonstrando a fun\'e7\'e3o substr \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::endl; \line 7 \line 8 #include <string> \line 9 \line 10 using std::string; \line 11 \line 12 int main() \line 13 \line 14 string s ( \ldblquote O aeroplano desapareceu no horizonte.\rdblquote  \line 15 \line 16 // procura o substring \ldblquote plano\rdblquote , que come\'e7a \line 17 // no subscrito 6 e consiste em 5 elementos \line 18 cout \'ab s.substr( 6, 5 ) \'ab endi; \line 19 \line 20 return 0; \line 21\} \line plano \line Fig. 19.3 Demonstrando a fun\'e7\'e3o substr. \line O programa declara e inicializa um string na linha 18. A linha \line cout \'ab s.substr( 6, 5 ) \'ab endi; \line usa a fun\'e7\'e3o substr para recuperar um substring de s. O primeiro argumento especifica o subscrito onde come\'e7a o substring. O \'faltimo argumento especifica o n\'famero de caracteres a extrair. \line 19.5 Intercambiando strings \line A classe string fornece a fun\'e7\'e3o swap para intercambiar strings. O programa da Fig. 19.4 intercambia dois strings. \line 1 II Fig. 19.4: figl9_04.cpp \line 2 // Usando a fun\'e7\'e3o swap para intercambiar dois strings \line 3 #include <iostream> \line Fig. 19.4 Usando a fun\'e7\'e3o swap para intercambiar dois strings (parte 1 de 2). \par
CAP\'cdTULO 19- A CLASSE String E o PROCESSAMENTO EM STREAM DE STRINGS 897 \line 4 \line 5 using std::cout; \line 6 using std: :endl; \line 7 \line 8 #include <string> \line 9 \line 10 using std::string; \line 11 \line 12 int main() \line 13 \line 14 string first( \ldblquote um\rdblquote  ), second( \ldblquote dois\rdblquote  ); \line 15 \line 16 cout \'ab \ldblquote Antes de swap:\\nprimeiro: \ldblquote  \'ab first \line 17 \'ab \ldblquote\\n segundo: \ldblquote  \'ab second; \line 18 first.swap( second ); \line 19 cout \'ab \ldblquote\\n\\nDepois de swap:\\nprimeiro: \ldblquote  \'ab first \line 20 \'ab \ldblquote\\n segundo: \ldblquote  \'ab second \'ab endi; \line 21 \line 22 return 0; \line 23 \} \line Antes de swap: \line primeiro: um \line segundo: dois \line Depois de swap: \line primeiro: dois \line segundo: um \line Fig. 19.4 Usando a fun\'e7\'e3o swap para intercambiar dois strings (parte 2 de 2). \line A linha 14 declara e inicializa os strings first e second. Cada string \'e9 ent\'e3o exibido. A linha 18 \line first.swap( second ); \line usa a fun\'e7\'e3o swap para permutar os valores de first e second. Os dois strings s\'e3o novamente impressos para confirmar que eles foram de fato trocados. \line 19.6 Caracter\'edsticas de string \line A classe string fornece fun\'e7\'f5es para coletar informa\'e7\'f5es sobre o tamanho de um string, seu comprimento, capacidade, comprimento m\'e1ximo e outras caracter\'edsticas. O tamanho ou comprimento de um string \'e9 o n\'famero de caracteres comumente armazenados no string. A capacidade de um string \'e9 o n\'famero total de elementos que podem ser armazenados no string sem aumentar a capacidade de mem\'f3ria do string. O tamanho m\'e1ximo do string \'e9 o tamanho do maior string que pode ser armazenado em um objeto string. O programa da Fig. 19.5 demonstra as fun\'e7\'f5es da classe string para encontrar o tamanho, o comprimento e outras caracter\'edsticas de um string. \par
Fig. 19.5 Imprimindo caracter\'edsticas de um string (parte 1 de 3). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx205\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6102\pard\intbl 1 \cell II Fig. 19.5: figl9_05.cpp \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx205\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2525\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6102\pard\intbl 2 \cell II Demonstrando fun\'e7\'f5es \cell relacionadas a tamanho e capacidade \cell\row
\intbl 3 \cell #include <iostream> \cell\cell\row
\intbl 4 \cell\cell\cell\row
\intbl 5 \cell using std: :cout; \cell\cell\row
\intbl 6 \cell using std::endl; \cell\cell\row
\pard\par
\pard\sb100\sa240 89S C++ COMO PROGRAMAR \line 7 using std::cin; \line 8 \line 9 #include <string> \line 10 \line 11 using std::string; \line 12 \line 13 void printStats ( const string & ); \line 14 \line 15 int main() \line 16 \line 17 string s; \line 18 \line 19 cout \'ab \ldblquote Caracter\'edsticas antes da leitura:\\n; \line 20 printStats( s \line 21 \line 22 cout \'ab \ldblquote\\n\\nDigite um string: \line 23 cm \'bb s; /1 delimitado por espa\'e7o em branco \line 24 cout \'ab \ldblquote O string digitado era: \ldblquote  \'ab s; \line 25 \line 26 cout \'ab \ldblquote\\nCaracter\'edsticas depois da leitura:\\n\rquote ; \line 27 printStats( s \line 28 \line 29 s.resize( s.length() + 10 ); \line 30 cout \'ab \ldblquote\\n\\nCaracter\'edsticas ap\'f3s redimensionar com (length+l0):\\n\rdblquote ; \line 31 printStats ( s ); \line 32 \line 33 cout \'ab endl; \line 34 return 0; \line 35 \} \line 36 \line 37 void printStats( const string &str \line 38 \line 39 cout \'ab \ldblquote capacity: \ldblquote  \'ab str.capacity() \line 40 \'ab \\nmaxsize: \'ab str.maxsize() \line 41 \'ab \ldblquote\\nsize: \'ab str.size() \line 42 \'ab \ldblquote\\nlength: \ldblquote  \'ab str.length() \line 43 \'ab \ldblquote\\nempty: \'ab ( str.empty() ? true: \ldblquote false\rdblquote  ); \line 44 \} \line Caracter\'edsticas antes da leitura: \line capacity: O \line max size: 4294967293 \line size: O \line length: O \line empty: true \line Digite uni strirxg: tomates secos \line O string digitado era: tomates \line Caracter\'edsticas depois da leitura: \line capacity: 31 \line maz size: 4294967293 \line size: 6 \line length: 6 \line empty: false \line Caracter\'edsticas ap\'f3s redimensionar com (length + 10) \line capacity: 31 \line Fig. 19.5 Imprimindo caracter\'edsticas de um string (parte 2 de 3). \par
CAP\'cdTULO 19 - A CLASSE Striflg E O PROCESSAMENTO EM STREAM DE STRINGS 899 \line max size: 4294967293 \line size: 16 \line length: 16 \line empty: false \line Fig. 19.5 Imprimindo caracter\'edsticas de um string (parte 2 de 2). \line O programa declara o string vazio s (linha 17) e passa o mesmo para a fun\'e7\'e3o print_Stats (linha 20). Um string vazio \'e9 um string que n\'e3o cont\'e9m nenhum caractere, O string \ldblquote tomates\rdblquote  \'e9 lido do teclado. Note que strings s\'e3o delimitados por brancos, o que evita que o string remanescente seja lido. \line A fun\'e7\'e3o printStats recebe como argumento uma refer\'eancia para um string const e exibe a sua capacidade (usando a fun\'e7\'e3o capacity), seu tamanho m\'e1ximo (usando a fun\'e7\'e3o max size), seu tamanho (usando a fun\'e7\'e3o size), seu comprimento (usando a fun\'e7\'e3o lenght) e indica se o string est\'e1 ou n\'e3o vazio (usando a fun\'e7\'e3o empty). A chamada inicial para printStats indica que os valores iniciais para a capacidade, o tamanho e o comprimento de s s\'e3o 0. Como a capacidade inicial \'e9 0, quando forem colocados caracteres em s ser\'e1 necess\'e1rio alocar mem\'f3ria para acomodar os novos caracteres. O tamanho e o comprimento O indicam que no momento n\'e3o h\'e1 caracteres armazenados em s. O tamanho e o comprimento s\'e3o sempre id\'eanticos. O tamanho m\'e1ximo para esta implementa\'e7\'e3o \'e9 4294967293. O string s \'e9 um string vazio, assim a fun\'e7\'e3o empty retorna true. \line A linha 23 l\'ea um string para s. Note que o operador de extra\'e7\'e3o de stream, \'bb, \'e9 usado. A linha 29 \line s.resize( s.length() + 10 \line usa a fun\'e7\'e3o resize para aumentar o comprimento de s em 10 caracteres. \line 19.7 Encontrando caracteres em um string \line A classe string fornece fun\'e7\'f5es para encontrar strings e caracteres em um string. O programa da Fig. 19.6 demonstra as fun\'e7\'f5es de procurafind. Todas as fun\'e7\'f5es de procura s\'e3o const. \line 1 II Fig. 19.6: figl9O6.cpp \line 2 // Demonstrando as fun\'e7\'f5es de procura em strings \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::endl; \line 7 \line 8 #include <string> \line 9 \line 10 using std::string; \line 11 \line 12 int main() \line 13 \line 14 // o compilador concatena todas as partes em uma s\'f3 constante string \line 15 string s( \ldblquote The values in any left subtree\rdblquote  \line 16 \ldblquote\\nare less than the value in the\rquote  \line 17 \ldblquote\\nparent node and the values in\rdblquote  \line 18 \lquote\\nany right subtree are greater \line 19 \ldblquote\\nthan the value in the parent node\rdblquote  ); \line 20 \line Fig. 19.6 Demonstrando as fun\'e7\'f5es de procura em um string f ind (parte 1 de 2). \par
900 C++ COMO PROGRAMAR \line 21 // encontra \ldblquote subtree\rdblquote  nas posi\'e7\'f5es 23 e 102 \line 22 cout \'ab \ldblquote String original:\\n\rdblquote  \'ab s \line 23 \'ab \ldblquote\\n\\n(find) \\\ldblquote subtree\\\rdblquote  foi encontrado na posi\'e7\'e3o: \line 24 \'ab s.find( \ldblquote subtree\rdblquote  \line 25 \'ab \ldblquote\\n(rfind) \\\ldblquote subtree\\\rdblquote  foi encontrado na posi\'e7\'e3o: \line 26 \'ab s.rfind( \ldblquote subtre&\rquote  ); \line 27 \line 28 II encontra \lquote p\rquote  de \ldblquote parent\rquote  nas posi\'e7\'f5es 62 e 144 \line 29 cout \'ab \ldblquote\\n(findfirstof) primeiro caractere de \\\lquote qpxz\\\rdblquote  na posi\'e7\'e3o: \line 30 \'ab s.find_first_of( \ldblquote qpxz\rdblquote  \line 31 \'ab \ldblquote\\n(findlastof) \'faltimo caractere de \\\ldblquote qpxz\\\rdblquote  na posi\'e7\'e3o: \line 32 \'ab s.findlastof( \ldblquote qpxz\rdblquote  ); \line 33 \line 34 II encontra \lquote b na posi\'e7\'e3o 25 \line 35 cout \'ab \ldblquote\\n(find_first_not_of) primeiro caractere n\'e3o\\n\rdblquote  \line 36 contido em \\\lquote heTv lusinodrpayft\\: \line 37 \'ab s.findfirstnotof( \lquote heTv lusinodrpayft\rdblquote  ); \line 38 \line 39 II encontra \\n na posi\'e7\'e3o 121 \line 40 cout \'ab \lquote\\n(findlastnotof) \'faltimo caractere n\'e3o\\n\rquote  \line 41 contido em \\\lquote heTv lusinodrpayft\\\rdblquote : \line 42 \'ab s.findlastnotof( \ldblquote heTv lusinodrpayft\rdblquote  ) \'ab endi; \line 43 \line 44 return 0; \line 45 \line String original: \line The values in any left subtree \line are less than the value in the \line parent node and the values in \line any right subtree are greater \line than the value in the parent node \line (find) \ldblquote subtree\rdblquote  foi encontrado na posi\'e7\'e3o: 23 \line (rfind) \ldblquote subtree\rdblquote  foi encontrado na posi\'e7\'e3o: 102 \line (findfirst_of) primeiro caractere de \ldblquote qpxz na posi\'e7\'e3o: 62 \line (findlastof) ultimo caractere de \lquote qpxz\rquote  na posi\'e7\'e3o: 144 \line (find_first_not_of) primeiro caractere n\'e3o \line contido em \ldblquote heTv lusinodrpayft\rquote : 25 \line (findlastnotof) \'faltimo caractere n\'e3o \line contido em \ldblquote heTv lusinodrpayft\rdblquote : 121 \line Fig. 19.6 Demonstrando as fun\'e7\'f5es de procura em um string find (parte 2 de 2). \line O string s \'e9 declarado e inicializado na linha 15. O compilador concatena todos os cinco literais strings em um \'fanico literal. Para evitar erros de sintaxe, o final de cada string deve ser fechado com aspas antes de passar para a linha seguinte e come\'e7ar outro string. \line Erro comum de programa \'e7\'f5o 19.5 \line N\'e3o terminar um string com aspas \'e9 um erro de sintaxe. \line A linha 24, que faz parte da opera\'e7\'e3o de inser\'e7\'e3o \line\'ab s . find ( \ldblquote subtree\rdblquote  \par
CAP\'cdTULO 19 - A CLASSE string E O PROCESSAMENTO EM STREAM DE STR!NGS 901 \line tenta encontrar o string \ldblquote subtree\rdblquote  no string s usando a fun\'e7\'e3o f ind. Se o string \'e9 encontrado, o subscrito da posi\'e7\'e3o inicial daquele string \'e9 retornado. Se o string n\'e3o \'e9 encontrado, \'e9 retornado o valor string: : npos (uma constante public static definida na classe string). Este valor \'e9 retornado pelas fun\'e7\'f5es de procura em string relacionadas, para indicar que um substring ou caractere n\'e3o foi encontrado no string. \line O \'faltimo item exibido com a inser\'e7\'e3o no siream na linha 26 \line s.rfind( \ldblquote subtree\rdblquote  ) II procura reversa \line usa a fun\'e7\'e3o rfind para pesquisar o string s de tr\'e1s para diante. Se o string procurado \'e9 encontrado, a posi\'e7\'e3o do subscrito \'e9 retornada. Se o string n\'e3o \'e9 encontrado, string: : npos \'e9 retornado. (Nota: as demais fun\'e7\'f5es apresentadas nesta se\'e7\'e3o retornam o mesmo tipo de valor, salvo observa\'e7\'e3o em contr\'e1rio). Note que a constante string: : npos tamb\'e9m \'e9 usada em um contexto diferente - para indicar todos os elementos de um string. \line A chamada \line\'ab s.find_first_of( \ldblquote xz\rdblquote  \line na linha 30 usa a fun\'e7\'e3o find_first_of para encontrar a primeira ocorr\'eancia no string s de qualquer caractere de \ldblquote qpxz \lquote . A busca \'e9 feita a partir do in\'edcio de s. O caractere \lquote p\rquote  \'e9 encontrado na posi\'e7\'e3o 62. \line A chamada \line\'ab s.find_last_of( \ldblquote apxz ); \line na linha 32 usa a fun\'e7\'e3o find last of para encontrar a \'faltima ocorr\'eancia no string s de qualquer caractere de \ldblquote xz \lquote . A busca \'e9 feita a partir do fim de s. O caracter \lquote p\rquote  \'e9 encontrado na posi\'e7\'e3o 144. \line A chamada \line\'ab s.find_first_not_of( \ldblquote heTv lusinodrpayft\rdblquote  ); \line na linha 37 usa a fun\'e7\'e3o find_first_not_of para encontrar o primeiro caractere no string s n\'e3o contido em \ldblquote heTv lusinodrpayft\rquote . A busca \'e9 feita a partir do in\'edcio de s. \line A chamada \line\'ab s.find_last_not_of( \lquote heTv lusinodrpayft\rdblquote  ) \'ab endi; \line na linha 42 usa a fun\'e7\'e3o find last not of para encontrar o primeiro caractere n\'e3o contido em \ldblquote heTv lusinodrpayft\rquote , mas com a busca sendo feita a partir do fim de s. \line 19.8 Substituindo caracteres em um string \line A Fig. 19.7 demonstra as fun\'e7\'f5es string para substitui\'e7\'e3o e elimina\'e7\'e3o de caracteres. \par
Fig. 19.7 Demonstrando as fun\'e7\'f5es erase e replace (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx205\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4671\pard\intbl 1 \cell II Fig. 19.7: figl9_07.cpp \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx205\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2246\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4671\pard\intbl 2 \cell // Demonstrando as \cell fun\'e7\'f5es erase e replace \cell\row
\intbl 3 \cell #include <iostream> \cell\cell\row
\intbl 4 \cell\cell\cell\row
\intbl 5 \cell using std::cout; \cell\cell\row
\intbl 6 \cell using std::endl; \cell\cell\row
\intbl 7 \cell\cell\cell\row
\intbl 8 \cell #include <string> \cell\cell\row
\pard\par
\pard\sb100\sa240 902 C++ COMO PROGRAMAR \line 9 \line 10 using std::string; \line 1] \line int main() \line /1 o compilador concatena todas as partes em um s\'f3 string \line string s( \ldblquote The values in any left subtree \line\ldblquote\\nare less than the value in the\rdblquote  \line\\nparent node and the values in\rdblquote  \line\ldblquote\\nany right subtree are greater\rdblquote  \line\ldblquote\\nthan the value in the parent node ); \line // remove todos os caracteres, \line // da posi\'e7\'e3o 62 at\'e9 o fim de s \line s.erase( 62 ); \line // exibe o novo string \line cout \'ab String original depois de executar erase:\\n\rdblquote  \'ab s \line\'ab \ldblquote\\n\\nDepois da primeira substitui\'e7\'e3o:\\n\rdblquote ; \line // substitui todos os espa\'e7os por um ponto \line int x = s.find( \ldblquote  \ldblquote  \line while ( x < string: :npos \line s.replace( x, 1, \ldblquote .\ldblquote  \line x = s . f ind (\ldblquote\ldblquote , x + 1 \line 36 cout \'ab s \'ab \ldblquote\\n\\nDepois da segunda substitui\'e7\'e3o:\\n\rdblquote ; \line 37 \line // substitui todos os pontos por dois ponto-e-v\'edrgulas \line // NOTA: isto vai escrever em cima de outros caracteres \line x = s. f ind ( \ldblquote .\ldblquote  ) \line while ( x < string::npos \line s.replace( x, 2, \ldblquote xxxxx;;yyy\rdblquote , 5, 2 ); \line x = s.find( \ldblquote .\ldblquote , x + 1 ); \line String original depois de executar erase: \line The values in any left subtree \line are less than the value in the \line Depois da primeira substitui\'e7\'e3o: \line The . values . in . any. left. subtree \line are. less . than. the . value . iri. the \line Depois da segunda substitui\'e7\'e3o: \line The; ;alues; ;n; ;ny; ;eft; ;ubtree \line are; ;ess; ;han; ;he; ;alue; ;n; ;he \line Fig. 19.7 Demonstrando as fun\'e7\'f5es erase e replace (parte 2 de 2). \par
4 \par
12 \line 13 \line 14 \line 15 \line 16 \line 17 \line 18 \line 19 \line 20 \line 21 \line 22 \line 23 \line 22 \line 25 \line 26 \line 27 \line 28 \line 29 \line 30 \line 31 \line 32 \line 33 \line 34 \line 35 \par
\} \par
38 \line 39 \line 40 \line 41 \line 42 \line 43 \line 44 \line 45 \line 46 \line 47 \line 48 \par
cout \'ab s \'ab endl; return 0; \par
O programa declara e inicializa o string s. A linha 23 \par
s.erase( 62 ); \par
CAP\'cdTULO 19 - A CLASSE String E O PROCESSAMENTO EM STREAM DE STRINGS 903 \line usa a fun\'e7\'e3o erase para eliminar todos os caracteres, do elemento 62 at\'e9 o fim de s. \line As linhas 30 a 34 \line int x s.f ind \line while ( x < string: :npos \line s.replace( x, 1, \line x = s f ind (\ldblquote\ldblquote , x + 1 \line usam a fun\'e7\'e3o f ind para encontrar cada ocorr\'eancia do caractere espa\'e7o. Cada espa\'e7o \'e9 ent\'e3o substitu\'eddo por um ponto atrav\'e9s de uma chamada para a fun\'e7\'e3o replace. A fun\'e7\'e3o replace recebe tr\'eas argumentos, o subscrito inicial, o n\'famero de caracteres a serem substitu\'eddos e o string para substitui\'e7\'e3o. A constante string: : npos representa o m\'e1ximo comprimento do string. A fun\'e7\'e3o f ind retorna s tring: : npos quando o fim de s \'e9 atingido. \line As linhas 40 a 44 \line x = s . find ( \ldblquote .\ldblquote  \line while ( x < string: :npos ) \{ \line s.replace( x, 2, \ldblquote xxxxx;;yyy\rdblquote , 5, 2 ); \line x = s.find( \ldblquote .\ldblquote , x + 1 ); \line usam a fun\'e7\'e3o f ind para encontrar cada ponto e a fun\'e7\'e3o replace para substituir cada ponto e seu caractere subseq\'fcente por dois ponto-e-v\'edrgulas. Os argumentos passados para replace s\'e3o o subscrito do elemento onde come\'e7a a opera\'e7\'e3o de substitui\'e7\'e3o, o n\'famero de caracteres a substituir, um string de caracteres de substitui\'e7\'e3o do qual um substring \'e9 usado para substituir caracteres, o elemento no string de caracteres onde come\'e7a o substring de substitui\'e7\'e3o e o n\'famero de caracteres, no string de caracteres usado para substitui\'e7\'e3o, que ser\'e3o usados. \line 19.9 Inserindo caracteres em um string \line A classe string fornece fun\'e7\'f5es para inserir caracteres em um string. O programa da Fig. 19.8 demonstra os recursos de insert de string. \line 1 II Fig. 19.8: figl9O8.cpp \line 2 /1 Demonstrando as fun\'e7\'f5es de inser\'e7\'e3o em strings. \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std: :endl; \line 7 \line 8 #include <string> \line 9 \line 10 using std::string; \line 11 \line 12 int main() \line 13 \{ \line 14 string si( \ldblquote in\'edcio fim\rdblquote  ), \line 15 s2 ( \ldblquote meio \ldblquote  ) , s3 ( \ldblquote 12345678\rdblquote  ) , s4 ( \ldblquote xx\rdblquote  \line 16 \line 17 cout \'ab \ldblquote Strings iniciais:\\nsi: \ldblquote  \'ab si \line 18 \'ab \ldblquote\\ns2: \ldblquote  \'ab s2 \'ab \ldblquote\\ns3: \ldblquote  \'ab s3 \line 19 \'ab \ldblquote\\ns4: \ldblquote  \'ab s4 \'ab \ldblquote\\n\\n\rdblquote ; \line 20 \line 21 II insere \ldblquote meio \ldblquote  na posi\'e7\'e3o 7 de si \line 22 si.insert( 7, s2 ); \line Fig. 19.8 Demonstrando as fun\'e7\'f5es insert de string (parte 1 de 2). \par
904 C++ COMO PROGRAMAR \line 23 \line 24 II insere \lquote xx\rdblquote  na posi\'e7\'e3o 3 de s3 \line 25 s3.insert( 3, s4, 0, string::npos ); \line 26 \line 27 cout \'ab \ldblquote Strings depois da inser\'e7\'e3o:\\nsi: \ldblquote  \'ab si \line 28 \'ab \ldblquote\\ns2: \ldblquote  \'ab s2 \'ab \ldblquote\\ns3: \ldblquote  \'ab s3 \line 29 \'ab \lquote\\ns4: \ldblquote  \'ab s4 \'ab endi; \line 30 \line 31 return 0; \line 32 \line Strings iniciais: \line si: inicio fim \line s2: meio \line s3: i2345678 \line s4: xx \line Strings depois da inser\'e7\'e3o: \line si: inicio meio fim \line s2: meio \line s3: 123xx45678 \line s4: xx \line Fig. 19.8 Demonstrando as fun\'e7\'f5es insert de string (parte 2 de 2). \line O programa declara e inicializa quatro strings si, s2, s3, e s4. Cada string \'e9 ent\'e3o exibido. A linha 22 sl.insert( 7, s2 ); \line usa a fun\'e7\'e3o insert para inserir o string s2 antes do elemento 7. \line A linha 25 \line s3.insert( 3, s4, 0, string::npos ); \line usa insert para inserir s4 antes do terceiro elemento de s3. Os dois \'faltimos argumentos especificam o elemento de in\'edcio de s4 e o n\'famero de caracteres de s4 que devem ser inseridos. \line\ul 1 \ulnone Dica de desempenho 19.1 \line f Opera\'e7\'f5es de inser\'e7\'e3o podem resultar em opera\'e7\'f5es adicionais de administra\'e7\'e3o de mem\'f3ria que podem diminuir o desempenho. \line 19.10 Convers\'f5es para strings char* no estilo da llnguagem C \line A classe string fornece fun\'e7\'f5es para a convers\'e3o de strings para o estilo de strings usado na linguagem C. Como mencionado anteriormente, diferentemente de strings no estilo da linguagem C, strings n\'e3o s\'e3o necessariamente terminados com nulos. Estas fun\'e7\'f5es s\'e3o \'fateis quando uma determinada fun\'e7\'e3o recebe um string no estilo de C como argumento. O programa da Fig. 19.9 demonstra a convers\'e3o de strings para o estilo de strings usado em C. \par
Fig. 19.9 Convertendo strings para strings e arrays de caracteres no estilo de C (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx205\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4671\pard\intbl i \cell // Fig. 19.9: figl9O9.cpp \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx205\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2246\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4671\pard\intbl 2 \cell II Convertendo para \cell strings ao estilo de C. \cell\row
\intbl 3 \cell #include <iostream> \cell\cell\row
\intbl 4 \cell\cell\cell\row
\intbl 5 \cell using std::cout; \cell\cell\row
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 19-A CLASSE String E O PROCESSAMENTO EM STREAM DE STRINGS 905 \line 6 using std: :endl; \line 7 \line 8 #include <string> \line 9 \line 10 using std::string; \line 11 \line 12 int main() \line 13 \line 14 string s( \ldblquote STRINGS\rdblquote  ); \line 15 const char *ptrl = 0; \line 16 int len = s.lengthO); \line 17 char *ptr2 = new char[ len + 1 1; // incluindo o nulo \line 18 \line 19 II copia caracteres do string para a mem\'f3ria alocada por new \line 20 s.copy( ptr2, len, O \line 21 ptr2[ len ] = 0; II acrescenta terminador nulo \line 22 \line 23 II output \line 24 cout \'ab \ldblquote O string s \'e9 \ldblquote  \'ab s \line 25 \'ab \ldblquote\\ns convertido para um string ao estilo de C \'e9 \line 26 \'ab s.c_str() \'ab \ldblquote\\nptrl \'e9 \ldblquote ; \line 27 \line 28 II Atribui o const char * retornado pela fun\'e7\'e3o data O) \line 29 II ao pointeiro ptrl. NOTA: esta \'e9 uma atribui\'e7\'e3o \line 30 II potencialmente perigosa. Se o string for modificado, \line 31 // o ponteiro ptrl pode se tornar inv\'e1lido. \line 32 ptrl = s.data \line 33 \line 34 for ( int k = 0; k < len; ++k \line 35 cout \'ab ( ptrl + k ); II usa aritm\'e9tica de ponteiros \line 36 \line 37 cout \'ab \ldblquote\\nptr2 \'e9 \ldblquote  \'ab ptr2 \'ab endl; \line 38 delete [1 ptr2; \line 39 return 0; \line 40 \} \line O string s \'e9 STRINGS \line s convertido para um string ao estilo de C e\rquote  STRINGS \line ptrl \'e9 STRINGS \line ptr2 \'e9 STRINGS \line Fig. 19.9 Convertendo strings para strings e arrays de caracteres no estilo de C (parte 2 de 2). \line O programa declara s tring como int, e dois ponteiros. O string s \'e9 inicializado com \ldblquote STRINGS\rdblquote , ptrl \'e9 inicializado com O, e len \'e9 inicializado com o comprimento de s. A mem\'f3ria \'e9 alocada dinamicamente e associada ao ponteiro ptr2. \line A linha 20 \line s.copy( ptr2, len, O ); \line usa a fun\'e7\'e3o copy para copiar s para o array apontado por ptr2. A convers\'e3o de string para um string de caracteres no estilo de C \'e9 impl\'edcita. A linha 21 coloca um caractere nulo de termina\'e7\'e3o no array ptr2. \line A primeira inser\'e7\'e3o em stream da linha 26 \line\'ab s.cstr() \line exibe o const char* terminado em nulo retornado de c_str quando o string s \'e9 convertido. \par
906 C++ COMO PROGRAMAR \line A linha 32 \line ptrl s.dataO; \line atribui um array de caracteres const char* no estilo de C retornado por data, n\'e3o terminado em nulo, ao ponteiro ptrl. Note que neste exemplo n\'e3o modificamos o string s. Se o string s fosse modificado. ptrl se tornaria inv\'e1lido - o que levaria a resultados imprevis\'edveis. \line Note que o array de caracteres retornado por data e o string no estilo de C retornado por cstr t\'eam tempo \line de vida limitado. Eles s\'e3o possu\'eddos pela class string e n\'e3o devem ser eliminados com delete. \line As linhas 34 e 35 usam aritm\'e9tica de ponteiros para exibir o array apontado por ptrl. Nas linhas 37 e 38, o \line string no estilo de C apontado por ptr2 \'e9 exibido e a mem\'f3ria alocada para ptr2 \'e9 deletada para evitar \ldblquote perda de mem\'f3ria\rdblquote . \line Erro comum de programa\'e7\'e3o 19.6 \line N\'e3o terminar com um caractere nulo o array de caracteres retornado por data ou copy pode levar a \line erros durante a execu\'e7\'e3o. \line Boa pr\'e1tica de programa\'e7\'e3o 19.1 \line Sempre que poss\'edvel, use strings, porque s\'e3o mais robustos que os strings no estilo de C. Err comum de programa\'e7\'e3o 19.7 \line Converter um s tring que cont\'e9m um ou mais caracteres nulos para um string no estilo de Cpode causar erros de l\'f3gica. Os caracteres nulos s\'e3o interpretados como terminadores para strings no estilo de C. \line 19.11 Iteradores \line A classe string fornece iteradores para percorrer strings para frente e para tr\'e1s. Os iteradores fornecem acesso caracteres individuais com uma sintaxe que \'e9 semelhante \'e0 das opera\'e7\'f5es com ponteiros. Iteradores n\'e3o s\'e3o testados quanto \'e0 validade do intervalo. Note que nesta se\'e7\'e3o damos \ldblquote exemplos mec\'e2nicos\rdblquote  para demonstrar o uso de iteradores. Discutiremos usos mais robustos de iteradores no pr\'f3ximo cap\'edtulo. O programa da Fig. 19.10 demonstra os iteradores. \line As linhas 14 e 15 \line string s( \ldblquote Testando iteradores\rdblquote  ); \line string::const_iterator ii = s.begin(); \line declara string s e string: constiterator ii. Um const_iterator \'e9 um iterador que n\'e3o pode modificar o cont\'eainer -atrav\'e9s do qual ele est\'e1 iterando. O iterador ii \'e9 inicializado para o in\'edcio de s com a fun\'e7\'e3o begin da classe string. Existem duas vers\'f5es de begin, uma vers\'e3o que retorna um iterator para iterar atrav\'e9s de um string n\'e3o-const e uma vers\'e3o const que retorna um const iterator para iterar atrav\'e9s de um string const. O string s \'e9 ent\'e3o exibido. \line 1 II Fig. 19.10: figl9_10.cpp \line 2 II Usando um iterador para exibir um string. \line 3 #include <iostrearn> \line 4 \line 5 using std::cout; \line 6 using std::endl; \line 7 \line 8 #include <string> \line Fig. 19.10 Usando um iterador para exibir um string (parte 1 de 2). \par
CAP\'cdTULO 19- A CLASSE String E O PROCESSAMENTO EM STREAM DE STRINGS 907 \line 9 \line 10 using std::string; \line 11 \line 12 int main() \line 13 \line 14 string s( \lquote Testando iteradores\rdblquote  ); \line 15 string::const_iterator ii = s.begin \line 16 \line 17 cout \'ab \ldblquote s = \ldblquote  \'ab s \line 18 \'ab \ldblquote\\n(Usando o iterador ii) s \'e9: \line 19 \line 20 while ( ii != s.end() ) \{ \line 21 cout \'ab i1; II derreferencia o iterador para obter caractere \line 22 ++il; II avan\'e7a o iterador para o pr\'f3ximo caractere \line 23 \line 24 \line 25 cout \'ab endi; \line 26 return 0; \line 27 \line s = Testando iteradores \line (Usando o iterador ii) s \'e9: Testando iteradores \line Fig. 19.10 Usando um iterador para exibir um string (parte 2 de 2). \line As linhas 20 a 23 \line while ( ii != s.end() ) \line cout \'ab i1; II derreferencia o iterador para obter caractere \line ++il; II avan\'e7a o iterador para o pr\'f3ximo caractere \line usam o iterador ii para \ldblquote percorrer\rdblquote  s. A fun\'e7\'e3o end retorna um iterador para a primeira posi\'e7\'e3o ap\'f3s o \'faltimo elemento de s. Os conte\'fados de cada posi\'e7\'e3o s\'e3o impressos primeiramente derreferenciando o iterador, de forma semelhante \'e0 que usamos para derreferenciar um ponteiro, e o iterador \'e9 ent\'e3o avan\'e7ado uma posi\'e7\'e3o, usando o operador ++. \line A classe string fornece as fun\'e7\'f5es membro rend e rbegin para acessar caracteres individuais do s tring em ordem inversa, do fim do string para o come\'e7o do string. As fun\'e7\'f5es membro rend e rbegin podem retornar reverse iterators e const reverse iterators (dependendo de se o string \'e9 ou n\'e3o const). Pedimos ao leitor para demonstrar isto nos exerc\'edcios. Usaremos mais iterators e reverse iterators no Cap\'edtulo 20. \line\'ae Dica de teste e depura \'e7\'f5o 19.1 \line Use a fun\'e7\'e3o membro at de string (ao inv\'e9s de iteradores) quando voc\'ea quiser que seja testada a \line validade do intervalo. \line 19.12 Processamento de strings em streams \line Al\'e9m da EIS em streams padr\'e3o e da EIS em streams de arquivos, a EIS em streams de C++ inclui recursos para ler de strings na mem\'f3ria e escrever em strings na mem\'f3ria. Estes recursos s\'e3o freq\'fcentemente chamados de EI S na mem\'f3ria ou processamento de strings em streams. \par
908 C++ COMO PROGRAMAR \line A leitura a partir de um string \'e9 suportada pela classe istringstream. A sa\'edda para um string \'e9 \line suportada pela classe ostringstream. Os nomes istringstream e ostringstreain s\'e3o na realidade aliases (nomes alternativos). Estes nomes s\'e3o definidos com os typedefs \line typedef basic_istringstream< char > istringstream; \line typedef basic_ostringstream< char > ostringstream; \line As classes basic istringstream e basic ostringstream fornecem a mesma funcionalidade das classes is tream e os tream mais Outras fun\'e7\'f5es membro espec\'edficas para a formata\'e7\'e3o na mem\'f3ria. Os programas que usam formata\'e7\'e3o na mem\'f3ria devem incluir os arquivos de cabe\'e7alho <sstream> e <iostreain>. \line Uma aplica\'e7\'e3o destas t\'e9cnicas \'e9 a valida\'e7\'e3o de dados. Um programa pode ler uma linha inteira de uma vez s\'f3 do stream de entrada para um string. Em seguida, um rotina de valida\'e7\'e3o pode examinar o conte\'fado do string e, se necess\'e1rio, corrigir os dados. Ent\'e3o, o programa pode continuar a fazer a entrada a partir do string, sabendo que os dados de entrada est\'e3o no formato adequado. \line Fazer sa\'edda para um string \'e9 uma maneira interessante de tirar partido dos poderosos recursos de formam\'e7\'e3o de streams de C++. Os dados podem ser preparados em um string para imitar o formato editado na tela. Aquele string pode, ent\'e3o, ser gravado em um arquivo em disco para preservar a imagem da tela. \line Um objeto ostringstream usa um objeto string para armazenar os dados que s\'e3o enviados para a \line sa\'edda. A fun\'e7\'e3o membro str de ostringstream retorna uma c\'f3pia string do string. \line A Figura 19.11 demonstra um objeto ostringstream. O programa cria o objeto outputString de \line ostringstream (linha 18) e usa o operador de inser\'e7\'e3o em stream para fazer a sa\'edda de uma s\'e9rie de strings e valores num\'e9ricos para o objeto. \line 1 II Fig. 19.11: figl9ll.cpp \line 2 /1 Usando um objeto ostringstream alocado dina.micamente. \line 3 #include <iostream> \line 4 \line 5 using std:;cout; \line 6 using std::endl; \line 7 \line 8 #jnclude <string> \line 9 \line 10 using std::string; \line 11 \line 12 #include <sstream> \line 13 \line 14 using std::ostringstream; \line 15 \line 16 int main() \line 17 \line 18 ostringstream outputString; \line 19 string si ( \ldblquote Sa\'edda de diversos tipos de dados \ldblquote  \line 20 s2( \ldblquote usando um objeto ostringstream:\rdblquote  ), \line 21 s3( \ldblquote\\n double: \ldblquote  \line 22 s4( \ldblquote\\n int: \ldblquote  \line 23 s5( \ldblquote\\nendere\'e7o de int: \ldblquote  \line 24 double d = 123.4567; \line 25 inti22; \line 26 \line 27 outputString \'ab si \'ab s2 \'ab s3 \'ab d \'ab s4 \'ab i \'ab s5 \'ab &i; \line 28 cout \'ab \ldblquote outputString cont\'e9m:\\n\rdblquote  \'ab outputString.strO; \line 29 \line 30 outputString \'ab \ldblquote\\nmais caracteres adicionados\rdblquote ; \line 31 cout \'ab \ldblquote\\n\\nap\'f3s as inser\'e7\'f5es adicionais no stream,\\n\rdblquote  \line Fig. 19.11 Usando um objeto ostringstream alocado dinamicamente (parte 1 de 2). \par
CAP\'cdTULO 19 - A CLASSE String E O PROCESSAMENTO EM STREAM DE STRINGS 909 \line 32 \'ab \ldblquote outputString cont\'e9m:\\n\rdblquote  \'ab outputString.str() \line [e 33 \'ab endi; \line 32 \line 35 return O; \line 36 \par
Fig. 19.11 Usando um objeto ostringstreain alocado dinamicamente (parte 2 de 2). \line A linha 27 \line outputString \'ab si \'ab s2 \'ab s3 \'ab d \'ab s4 \'ab i \'ab s5 \'ab &i; \line faz a sa\'edda de string si. string s2, string s3, doubie d, string s4. int i, string s5 e do endere\'e7o de int i, todos para outputString na mem\'f3ria. A linha 28 \line cout \'ab \ldblquote outputString cont\'e9m:\\n\rdblquote  \'ab outputString.str \line usa a chamada outputString. str ( ) para exibir uma c\'f3pia do string criado na linha 27. A linha 30 demonstra que mais dados podem ser anexados ao string na mem\'f3ria, simplesmente aplicando-se o operador de inser\'e7\'e3o em stream a outputString. A linha 32 exibe o string outputString ap\'f3s a anexa\'e7\'e3o de caracteres adicionais. \line Um objeto istringstream l\'ea dados de um string na mem\'f3ria para vari\'e1veis do programa. Os dados s\'e3o armazenados em um objeto istrings tream como caracteres. A entrada do objeto istrings tream funciona de maneira id\'eantica \'e0 entrada de dados de um arquivo qualquer, em geral, ou da entrada padr\'e3o em particular. O fim do string \'e9 interpretado pelo objeto istringstreain como um fim de arquivo. \line A Fig. 19.12 demonstra a entrada de um objeto istringstream. \line As linhas l8e 19 \line string input( Testando leitura 123 4.7 A\rdblquote  ); \line istringstream inputString( input ); \line criam o string input contendo os dados e o objeto inputString de istringstream constru\'eddo para conter os dados no string input. O string input cont\'e9m os dados \line Testando leitura 123 4.7 A \line os quais, quando lidos como entrada para o programa, consistem em dois strings (\ldblquote Testando\rdblquote e \ldblquote leitura\rdblquote ), um valor int (123), um valor double (4.7) e um valor char (\lquote A\rquote ). Estes caracteres s\'e3o extra\'eddos para as vari\'e1veis stringi. string2, i. de c, respectivamente na linha 25. \line inputString \'bb stringi \'bb string2 \'bb i \'bb d \'bb c; \line A sa\'edda dos dados \'e9 ent\'e3o feita nas linhas 27 a 33. O programa tenta ler novamente do inputString com o \line comando if/else da linha 38. Como n\'e3o h\'e1 mais dados, a condi\'e7\'e3o do if (linha 40) \'e9 avaliada como false e \line a parte eise da estrutura if/eise \'e9 executada. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3565\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4646\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5079\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5944\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7781\pard\intbl outputString cont\'e9m: \cell\cell\cell\cell\cell\row
\intbl Sa\'edda de diversos tipos de dados \cell usando \cell um \cell objeto \cell ostringstream: \cell\row
\intbl doubie: 123.457 \cell\cell\cell\cell\cell\row
\intbl int: 22 \cell\cell\cell\cell\cell\row
\intbl endere\'e7o de int: OO68FDOC \cell\cell\cell\cell\cell\row
\intbl ap\'f3s as inser\'e7\'f5es adicionais no \cell streain, \cell\cell\cell\cell\row
\intbl outputString cont\'e9m: \cell\cell\cell\cell\cell\row
\intbl Saida de diversos tipos de dados \cell usando \cell um \cell objeto \cell ostringstreani: \cell\row
\intbl doubie: 123.457 \cell\cell\cell\cell\cell\row
\intbl int: 22 \cell\cell\cell\cell\cell\row
\intbl endere\'e7o de int: OO68FDOC \cell\cell\cell\cell\cell\row
\intbl mais caracteres adicionados \cell\cell\cell\cell\cell\row
\pard\par
\pard\sb100\sa240 910 C++ COMO PROGRAMAR \line 1 II Fig. 19.12: figl9_12.cpp \line 2 II Demonstrando a entrada de dados a partir de um objeto istringstream. \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::endl; \line 7 \line 8 #include <string> \line 9 \line 10 using std::string; \line 11 \line 12 #include <sstream> \line 13 \line 14 using std::istringstream; \line 15 \line 16 int main() \line 17 \line 18 string input( \ldblquote Testando leitura 123 4.7 A\rquote  ); \line 19 istringstream inputString( input ); \line 20 string stringl, string2; \line 21 int i; \line 22 double d; \line 23 char c; \line 24 \line 25 inputString \'bb stringl \'bb string2 \'bb i \'bb d \'bb e; \line 26 \line 27 cout \'ab \ldblquote Os seguintes itens foram extra\'eddos\\n\rdblquote  \line 28 \'ab \ldblquote do objeto istringstream:\rdblquote  \line 29 \'ab \ldblquote\\nstring: \ldblquote  \'ab stringl \line 30 \'ab \ldblquote\\nstring: \'ab string2 \line 31 \'ab \lquote\\n int: \ldblquote  \'ab i \line 32 \'ab \ldblquote\\ndouble: \ldblquote  \'ab d \line 33 \'ab \ldblquote\\n char: \ldblquote  \'ab c; \line 34 \line 35 // tentativa de leitura de stream vazio \line 36 long x; \line 37 \line 38 inputString \'bb x; \line 39 \line 40 if ( inputString.good() \line 41 cout \'ab \ldblquote\\rz\\nvalor long \'e9: \ldblquote  \'ab x \'ab endl; \line 42 else \line 43 cout \'ab \ldblquote\\n\\ninputString est\'e1 vazio\rdblquote  \'ab endl; \line 44 \line 45 return 0; \line 46 \} \line Os seguintes itens foram extra\'eddos \line do objeto istringstream: \line string: Testando \line string: leitura \line int: 123 \line double: 4.7 \line char: A \line inputString est\'e1 vazio \line Fg. 19.12 Demonstrando a entrada de dados a partir de um objeto istringstream. \par
CAP\'cdTULO 19- A CLASSE String E O PROCESSAMENTO EM STREAM DE STRINGS 911 \line Resumo \line\bullet  O gabarito de classe basic string de C++ fornece opera\'e7\'f5es t\'edpicas de manipula\'e7\'e3o de strings, tais como c\'f3pia, busca, etc. \line\bullet  O comando typedef \line typedef basic_string< char > string; \line cria o tipo string para basic string< char >. Tamb\'e9m \'e9 fornecido um typedef para o tipo wchar_t. O tipo wchat_t normalmente armazena dois bytes (16 bits) para suportar outros conjuntos de caracteres. O tamanho de wchart n\'e3o \'e9 fixado pelo padr\'e3o. \line\bullet  Para usar strings, inclua o arquivo de cabe\'e7alho <string> da biblioteca padr\'e3o de C++. \line\bullet  A classe string n\'e3o fornece convers\'f5es de int ou char para string. \line\bullet  \'c9 permitido atribuir um \'fanico caractere a um objeto string em um comando de atribui\'e7\'e3o. \line\bullet  strings n\'e3o s\'e3o necessariamente terminados por nulos. \line\bullet  O comprimento de um string \'e9 armazenado no objeto string e pode ser recuperado atrav\'e9s da fun\'e7\'e3o membro lenght ou size. \line\bullet  A maioria das fun\'e7\'f5es membro de string aceita como argumentos uma posi\'e7\'e3o de subscrito inicial e o n\'famero de caracteres sobre os quais operar. \line\bullet  Tentar passar para uma fun\'e7\'e3o membro de string um valor maior que o comprimento do string. como o n\'famero de caracteres a serem processados, resulta no valor sendo redefinido como o comprimento do resto do string. \line\bullet  A classe string fornece o operator sobrecarregado e a fun\'e7\'e3o membro assign para atribui\'e7\'f5es de strings. \line\bullet  O operador subscrito, [ ], possibilita o acesso direto a qualquer elemento de um string. \line\bullet  A fun\'e7\'e3o at oferece um acesso verificado - ultrapassar qualquer dos limites do s tririg dispara uma exce\'e7\'e3o outof range. O operador subscrito, [ ], n\'e3o oferece um acesso verificado. \line\bullet  A classe string fornece os operadores sobrecarregados + e = e a fun\'e7\'e3o membro append para realizar concatena\'e7\'e3o de strings. \line\bullet  A classe string fornece os operadores sobrecarregados ==, =, <, >, <=, >=, para compara\'e7\'e3o de strings. \line\bullet  A fun\'e7\'e3o compare de string compara dois strings (ou substrings) e retoma O se os stririgs s\'e3o iguais, um n\'famero positivo se o primeiro string \'e9 lexicograficamente maior que o segundo ou um n\'famero negativo se o primeiro string \'e9 lexicograficamente menor que o segundo. \line\bullet  A fun\'e7\'e3o substr recupera um substring de um string. \line\bullet  A fun\'e7\'e3o swap permuta (troca) o conte\'fado de dois strings. \line\bullet  As fun\'e7\'f5es size e lenght retomam o tamanho ou comprimento de um string. (i.e, o n\'famero de caracteres correntemente armazenado no string). \line\bullet  A fun\'e7\'e3o capacity retoma o n\'famero total de elementos que podem ser armazenados no string sem aumentar os requisitos de mem\'f3ria do string. \line\bullet  A fun\'e7\'e3o max size retoma o tamanho do maior string poss\'edvel que pode ser armazenado. \line\bullet  A fun\'e7\'e3o resize muda o comprimento do string. \line\bullet  As fun\'e7\'f5es find da classe string, find, rfind, find first of, find last of, firid first not of e findlastnotof procuram strings ou caracteres em um stririg. \line\bullet  O valor string: : pos \'e9 freq\'fcentemente usado para indicar o processamento de todos os elementos de um string em fun\'e7\'f5es que requerem um n\'famero de caracteres a serem processados. \line\bullet  A fun\'e7\'e3o erase apaga elementos de um strirzg. \line\bullet  A fun\'e7\'e3o replace substitui caracteres em um string. \par
912 C++ COMO PROGRAMAR \line\bullet  A fun\'e7\'e3o irisert insere caracteres em um string. \line\bullet  A fun\'e7\'e3o cstr retoma um const char * apontando para um string de caracteres terminado com nulo, no estilo de C, que cont\'e9m todos os caracteres em um string. \line\bullet  A fun\'e7\'e3o data retorna um const char * apontando para um array de caracteres n\'e3o-terminado com nulo, no estilo de C, que cont\'e9m todos os caracteres em um string \line\bullet  A classe string fornece as fun\'e7\'f5es membro end e begiri para acessar caracteres individuais. \line\bullet  A classe string fornece as fun\'e7\'f5es membro rend e rbegin para acessar caracteres individuais em um string na ordem inversa, do fim de um string para o come\'e7o do mesmo. \line\bullet  A leitura de um string \'e9 suportada pelo tipo istringstream. A sa\'edda para um string \'e9 suportada pelo tipo os- trings tream. \line\bullet  Programas que usam formata\'e7\'e3o na mem\'f3ria devem incluir os arquivos de cabe\'e7alho <sstream> e <iostream>. \line\bullet  A fun\'e7\'e3o membro str de ostringstream retorna uma c\'f3pia string do string. \line Terminologia \line acesso verificado fun\'e7\'e3o findfirstof \line arquivo de cabe\'e7alho <sstream> fun\'e7\'e3o find_last_not_of \line arquivo de cabe\'e7alho <string> fun\'e7\'e3o findlastof \line capacidade fun\'e7\'e3o getline \line caracteres largos fun\'e7\'e3o insert \line classe istringstream fun\'e7\'e3o lenght \line classe ostringstream fun\'e7\'e3o max_size \line classe string fun\'e7\'e3o membro siream de string str \line comprimento de um s tring fun\'e7\'e3o rbegin \line constiterator ftin\'e7\'e3o rend \line constreverseiterator fun\'e7\'e3o replace \line EIS in-core fun\'e7\'e3o resize \line E/S na mem\'f3ria fun\'e7\'e3o size \line exce\'e7\'e3o lenghterror fun\'e7\'e3o substr \line exce\'e7\'e3o out_of_range fun\'e7\'e3o swap \line exce\'e7\'e3o range_error fun\'e7\'f5esflnd \line fun\'e7\'e3o access iterator \line fun\'e7\'e3o at namespace std \line fun\'e7\'e3o c_s tr operador subscrito, \line fun\'e7\'e3o capacity operadores de igualdade: =, = \line fun\'e7\'e3o compare operadores relacionais:>, <, >, < \line fun\'e7\'e3o copy operadores: +, +=. \'ab, \'bb, E 1 \line fun\'e7\'e3o data reverse_iterator \line fun\'e7\'e3o empty string vazio \line fun\'e7\'e3o erase tamanho m\'e1ximo de um string \line fun\'e7\'e3o f ind ipo wchar_t \line fun\'e7\'e3o find_first_not_of typedef basic_string<char> string \line Erros comuns de programa\'e7\'e3o \line 19.1 Tentar converter um \'ednt ou um char para um string atrav\'e9s de uma atribui\'e7\'e3o em uma declara\'e7\'e3o ou atrav\'e9s de um argumento para um construtor \'e9 um erro de sintaxe. \line 19.2 Construir um string que \'e9 longo demais para ser representado dispara uma exce\'e7\'e3o length_error. \line 19.3 Acessar um subscrito de stringfora dos limites do string usando a fun\'e7\'e3o at dispara uma exce\'e7\'e3o outof range. \line 19.4 Acessar um elemento al\'e9m do tamanho de um string usando o operador subscrito \'e9 um erro de l\'f3gica. \line 19.5 N\'e3o terminar um string com aspas \'e9 um erro de sintaxe. \par
CAP\'cdTULO 19 - A CLASSE String E O PROCESSAMENTO EM STREAM DE STRINGS 913 \line 19.6 N\'e3o terminar com um caractere nulo o array de caracteres retornado por data ou copy pode levar a erros durante a execu\'e7\'e3o. \line 19.7 Converter um string que cont\'e9m um ou mais caracteres nulos para um string no estilo de C pode causar erros de l\'f3gica. Os caracteres nulos s\'e3o interpretados como terminadores para strings no estilo de C. \line Boa pr\'e1tica de programa\'e7\'e3o \line 19.1 Sempre que poss\'edvel, use strings, porque s\'e3o mais robustos que os strings no estilo de C. \line Dica de desempenho \line 19.1 Opera\'e7\'f5es de inser\'e7\'e3o podem resultar em opera\'e7\'f5es adicionais de administra\'e7\'e3o de mem\'f3ria que podem diminuir o desempenho. \line Dica de teste e depura \'e7\'e3o \line 19.1 Use a fun\'e7\'e3o membro at de string (ao inv\'e9s de iteradores) quando voc\'ea quiser que seja testada a validade do intervalo. \line Exerc\'edcios de auto-revis\'e3o \line 19.1 Preencha os espa\'e7os em branco em cada um dos seguintes itens: \line a) O cabe\'e7alho deve ser inclu\'eddo para a classe string. \line b) A classe string pertence ao namespace \line e) A fun\'e7\'e3o apaga caracteres de um string. \line d) A fun\'e7\'e3o encontra a primeira ocorr\'eancia de qualquer caractere de uma s\'e9rie de caracteres. \line 19.2 Diga quais das seguintes afirma\'e7\'f5es s\'e3o verdadeiras e quais s\'e3o falsas. Se uma afirma\'e7\'e3o \'e9 falsa, explique porqu\'ea. \line a) A concatena\'e7\'e3o pode ser executada com o operador adi\'e7\'e3o +=. \line b) Os caracteres em uni string come\'e7am no elemento O. \line e) O operador de atribui\'e7\'e3o, =. copia um string. \line d) Um string no estilo de C \'e9 um string. \line 19.3 Encontre o(s) erro(s) em cada um dos seguintes itens e explique como corrigi-lo. \line a) string sv( 28 ); II construct sv \line string bc( \lquote z\rquote  ); // construct bc \line b) // assuma que o namespace std \'e9 conhecido \line const char *ptr = name.dataO; II name \'e9 \ldblquote joe bob\rquote  \line ptr[ 3 ) = \line cout \'ab ptr \'ab endi; \line Respostas aos exerc\'edcios de auto-revis\'e3o \line 19.1 a)string b)std c)erase d)findfirstof \line 19.2 a) Verdadeiro. \line b) Verdadeiro. \line e) Verdadeiro. \line d) Falso. Um string \'e9 um objeto que fornece muitos servi\'e7os diferentes. Um string no estilo de C n\'e3o fornece servi\'e7os. Strings no estilo de C s\'e3o terminados com nulo e strings n\'e3o. \line 19.3 a) N\'e3o existem construtores para os argumentos passados. Deveriam ser usados outros construtores v\'e1lidos convertendo os argumentos para strings se necess\'e1rio. \line b) A fun\'e7\'e3o data n\'e3o adiciona um terminador nulo. Em seu lugar use c_str. \par
914 C++ COMO PROGRAMAR \line Exerc\'edcios 19.14 1 \line para mc \line 19.4 Preencha os espa\'e7os em branco em cada um dos seguintes itens: \line a) As fun\'e7\'f5es , , e convertem strings para strings no estilo de C. 19.15 1 \line b) A fun\'e7\'e3o \'e9 usada para atribui\'e7\'e3o, uma sei \line c) \'e9 o tipo de retomo da fun\'e7\'e3o rbegin. 19.16 1 \line d) A fun\'e7\'e3o \'e9 usada para recuperar um substring. que cad \line 19.5 Diga quais das seguintes afirma\'e7\'f5es s\'e3o verdadeiras e quais s\'e3o falsas. Se uma afirma\'e7\'e3o \'e9 falsa, explique por qu\'ea. \line a) stririgs s\'e3o terminados com nulos. d \line b) A fun\'e7\'e3o max size retorna o tamanho m\'e1ximo para um string. po e se \line c) A fun\'e7\'e3o at\'e9 capaz de disparar uma exce\'e7\'e3o outof range. \line d) Por default, strings s\'e3o passados por refer\'eancia. \line Note qu \line 19.6 Encontre quaisquer erros em cada um dos seguintes itens e explique como corrigi-lo(s). etc \line a) std::cout \'ab s.data() \'ab std::endl; /1 s \'e9 \ldblquote heilo\rdblquote  gadasn \line b) erase ( s . rfind( \ldblquote x\rdblquote  ) , 1 ) ; // s \'e9 \ldblquote xenon\rdblquote  19 17 r \line c) string& foo( void ) teres.O \line se o usu \line string s ( \ldblquote HelJ.o\rdblquote  ); \line 1/ outros comandos da fun\'e7\'e3o 19.18 E \line return; \'e9 igual 1 \line\lquote arar \line 19.7 (Criptografia simples) Algumas informa\'e7\'f5es na Internet podem ser cifradas com um algoritmo simples conhecido como 19.19 F \line\ldblquote rotl3\rdblquote  - que \ldblquote gira\rdblquote  cada caractere 13 posi\'e7\'f5es no alfabeto. Assim, \lquote a corresponde a \lquote n e x corresponde a \lquote k\rquote .O rotl3 19.20 \line\'e9 um exemplo de criptografia sim\'e9trica por chave. Com a criptografia sim\'e9trica por chave, tanto o encriptador como o decripta do usam a mesma chave. 19.2 1 E \line a) Escreva um programa que encripta uma mensagem usando o rotl3. 1922 E \line b) Escreva um programa que decripta mensagem embaralhada usando 13 como a chave. \line c) Ap\'f3s escrever o programa da parte a) e da parte b), responda sucintamente \'e0 seguinte quest\'e3o: se voc\'ea n\'e3o sabe a strto \line chave para a parte b), qu\'e3o dif\'edcil voc\'ea pensa que seria decifrar o c\'f3digo usando quaisquer recursos dispon\'edveis? O 19.23 E \line que aconteceria se voc\'ea tivesse acesso a recursos computacionais muito poderosos (p. ex., supercomputadores Cray?) \line No Exerc\'edcio 19.27, pediremos que voc\'ea fa\'e7a isso. 19.24 \line 19.8 Escreva um programa usando iteradores que demonstre ouso das fun\'e7\'f5es rbegin e rend. 19.25 E \line 19.9 Escreva suas pr\'f3prias vers\'f5es das fun\'e7\'f5es data e c_str. 19.26 1 \line 19.10 Escreva um programa que l\'ea v\'e1rios strings e imprime somente aqueles terminando em \ldblquote r\rdblquote  ou \ldblquote ia. Somente devem ser levadas em conta letras min\'fasculas. \line 19.11 Escreva um programa que demonstra passar um s tring tanto por refer\'eancia como por valor. \line 19.12 Escreva um programa que l\'ea separadamente um nome e um sobrenome e ent\'e3o concatena ambos em um novo string. \line 19.13 Escreva um programa que joga ojogo da forca. O programa deve pegar uma palavra (que est\'e1 codificada no programa ou \'e9 lida de um arquivo-texto) e exibira seguinte: \line Adivinhe a palavra XXXXXX \line Cada X representa uma letra. Se o palpite do usu\'e1rio estiver correto, o programa deve exibir: \line Parab\'e9ns\rquote  Voc\'ea adivinhou minha palavra. Quer jogar de novo? sim/n\'e3o \line A resposta apropriada, sim ou n\'e3o, deve ser lida. Se o palpite do usu\'e1rio estiver incorreto, exiba a parte apropriada do corpo da \line pessoa na forca. 19.27 \line Ap\'f3s sete palpites errados, o usu\'e1rio deve estar enforcado. O display deve se parecer com decript \line mais fr \line / 1 \\ Escrevc \line encnpt \line / \\ 19.28 \line Ap\'f3s cada palpite, voc\'ea quer exibir todos os palpites do usu\'e1rio. \par
CAP\'cdTULO 19 - A CLASSE String E O PROCESSAMENTO EM STREAM DE STRINGS 915 \line 19.14 Escreva um programa que l\'ea um string e imprime o string de tr\'e1s para diante. Converta todas as letras mai\'fasculas para min\'fasculas e todas as min\'fasculas para mai\'fasculas. \line 19.15 Escreva um programa que usa os recursos de compara\'e7\'e3o introduzidos neste cap\'edtulo para colocar em ordem alfab\'e9tica uma s\'e9rie de nomes de animais. Somente letras mai\'fasculas devem ser usadas para as compara\'e7\'f5es. \line 19.16 Escreva um programa que cria um criptograma a partir de um string. Um criptograma \'e9 uma mensagem ou palavra em que cada letra \'e9 substitu\'edda por outra letra. Por exemplo, o string \line The birds naxne was squawk \line pode ser embaralhado para formar \line xms kbypo zhqs fho obrhfu \line Note que os espa\'e7os n\'e3o s\'e3o embaralhados. Neste caso particular, \lquote T\rquote  foi substitu\'eddo por x\rquote  , cada \lquote a\rquote  foi substitu\'eddo por ,etc. Letras mai\'fasculas e letras min\'fasculas deveriam ser tratadas da mesma forma. Use t\'e9cnicas semelhantes \'e0quelas empregadas no Exerc\'edcio 19.7. \line 19.17 Modifique o programa do exerc\'edcio anterior para permitir que um usu\'e1rio solucione o criptograma fornecendo dois caracteres. O primeiro caractere especifica a letra no criptograma e o segundo caractere especifica o palpite do usu\'e1rio. Por exemplo, se o usu\'e1rio digita r g. ent\'e3o o usu\'e1rio est\'e1 dando o palpite que a letra r \'e9 na verdade um g. \line 19.18 Escreva um programa que l\'ea uma senten\'e7a e conta o n\'famero de pal\'edndromos na senten\'e7a. Um pal\'edndromo \'e9 uma palavra que \line\'e9 igual tanto lida da esquerda para direita como da direita para a esquerda. Por exemplo, \lquote amor\rdblquote  n\'e3o \'e9 um pal\'edndromo, mas \line\ldblquote arara\rdblquote  \'e9 um pal\'edndromo. \line 19.19 Escreva um programa que conta o n\'famero de vogais em uma senten\'e7a. Exiba a freq\'fc\'eancia de ocorr\'eancia de cada vogal. \line 19.20 Escreva um programa que insere os caracteres exatamente no meio de um string. \line 19.21 Escreva um programa que apaga as seq\'fc\'eancias \ldblquote por\rdblquote  e \ldblquote POR\rdblquote  de um string \line 19.22 Escreva um programa que l\'ea uma linha de texto, substitui todos os sinais de pontua\'e7\'e3o por espa\'e7os e, ent\'e3o, usa a fun\'e7\'e3o strtok da biblioteca de strings da linguagem C para separar o string em palavras individuais. \line 19.23 Escreva um programa que l\'ea uma linha de texto e ent\'e3o imprime o texto ao contr\'e1rio. Use iteradores na sua solu\'e7\'e3o. \line 19.24 Escreva uma vers\'e3o recursiva do Exerc\'edcio 19.23. \line 19.25 Escreva um programa que demonstra o uso das fun\'e7\'f5es erase que recebem iterators como argumentos. \line 19.26 Escreva um programa que, a partir do stririg \ldblquote abcdefghijklmnopqrstuvwxyz \{ \ldblquote , gera o seguinte: \line a \line bcb \line cdedc \line defgfed \line efghihgfe \line fghijkj ihgf \line ghijklmlkjihg \line hijklmnonnilkjih \line ijklmriopqponmlkj i \line j klmnopqrsrqponmlkj \line klmnopqrs tutsrqponmlk \line lmnopqrs tuvwvutsrqponml \line mnopqrs tuvwxyxwvutsrqponxn \line nopqrstuvwxyz \{ zyxwvutsrqporz \line 19.27 No Exerc\'edcio 19.7, pedimos que voc\'ea escrevesse um algoritmo simples de criptografia. Escreva um programa que tenta \line decriptar uma mensagem \ldblquote rotl3\rdblquote  usando a substitui\'e7\'e3o de freq\'fc\'eancia simples (assuma que voc\'ea n\'e3o conhece a chave). As letras mais freq\'fcentes na frase encriptada devem ser substituidas pelas letras mais comumente usadas em ingl\'e9s (a,e,i,o,u,s,t,r,etc.). Escreva as possibilidades em um arquivo, O que tornou f\'e1cil decifrar o c\'f3digo? Como pode ser melhorado o mecanismo de encripta\'e7\'e3o? \par
19.28 Escreva uma vers\'e3o do bubble sort que classifica strings. Use a fun\'e7\'e3o swap na sua solu\'e7\'e3o. \par
\pard\lang1033\f1\fs20\par
}
 