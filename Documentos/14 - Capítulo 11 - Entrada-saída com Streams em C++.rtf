{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fcharset0 Times New Roman;}}
\viewkind4\uc1\pard\sb100\sa240\lang2070\f0\fs24\par
\par
Entrada/sa\'edda com streams em C++ \line\line  Objetivos \line   \bullet  Entender como usar a entradalsa\'edda orientada a objetos com \line  streams de C++. \line . \bullet  Ser capaz de formatar entradas e sa\'eddas. \line\bullet  Entender a hierarquia de classes de E/S com streams. \line\bullet  Entender como fazer entrada/sa\'edda com objetos de tipos \line definidos pelo usu\'e1rio. \line\bullet  Ser capaz de criar manipuladores de streams definidos pelo \line usu\'e1rio. \line\bullet  Ser capaz de determinar o sucesso ou o fracasso de opera \'e7\'f5e de entradalsa\'edda. \line\bullet  Ser capaz de vincular o stream de sa\'edda ao stream de entra da. Consci\'eancia... n\'e3o parece em si dividida em pedacinhos \line Um \ldblquote rio\rdblquote  ou uma \ldblquote corrente\rquote\rdblquote  s\'e3o met\'e1foras utilizadas \line para descrev\'ea-la mais naturalmente. \line William James \line Todas as not\'edcias que podem ser impressas2. \line Adolph S. Ochs \par
N. de R.: Stream, no originaL \line 2 N. de R.: Lema do jornal The New York Times \par
638 C++ COMO PROGRAMAR \line Vis\'e3o Geral \line 11.1 Introdu\'e7\'e3o \line 11.2 Streams \line 11.2.1 Arquivos de cabe\'e7alho da biblioteca iostream \line 11.2.2 Classes e objetos de entrada/sa\'edda com streams \line 11.3 Sa\'edda com streams \line 11.3.1 Operador de inser\'e7\'e3o em stream \line 11.3.2 Encadeando operadores de inser\'e7\'e3o/extra\'e7\'e3o do streani \line 11.3.3 Sa\'edda de vari\'e1veis char* \line 11.3.4 Sa\'edda de caracteres com a fun\'e7\'e3o membro put; encadeando putS \line 11.4 Entrada com streams \line 11.4.1 Operador de extra\'e7\'e3o do stream \line 11.4.2 Fun\'e7\'f5es membro get e getline \line 11.4.3 Fun\'e7\'f5es membro peek, putback e ignore de istreaxn \line 11.4.4 EIS segura quanto ao tipo \line 11.5 E/S n\'e3o-formatada com read, gcount e write \line 11.6 Manipuladores de streams \line 11.6.1 Base do stream de inteiros: dec, oct, hex e setbase \line 11.6.2 Precis\'e3o em ponto flutuante (precision, setprecision) \line 11.6.3 Largura de campo (setw, width) \line 11.6.4 Manipuladores definidos pelo usu\'e1rio \line 11.7 Estados de formato do stream \line 11.7.1 Indicadores de estado de formato \line 11.7.2 Zeros \'e0 direita e pontos decimais (ios: : showpoint) \line 11.7.3 Alinhamento (ios: : left, ios: : right, ios: internal) \line 11.7.4 Preenchimento (fui, setf iii) \line 11.7.5 Base do stream de inteiros (ios: :dec, ios: :oct, ios: :hex, ios: : showbase) \line 11.7.6 N\'fameros em ponto flutuante; nota\'e7\'e3o cient\'edfica (ios: : scientific, ios: : fixed) \line 11.7.7 Controle de mai\'fasculas/min\'fasculas (ios: : uppercase) \line 11.7.8 Inicializando e reinicializando os indicadores de formato (fiags, setiosfiags, \line resetiosfiags) \line 11.8 Estados de erro do stream \line 11.9 Vinculando um stream de sa\'edda a um stream de entrada \line Resu,no. Terminologia Erros comuns de programa\'e7\'e3o Boas pr\'e1ticas de programa\'e7\'e3o Dica de desempenho . Dica de portabilidade. Observa\'e7\'f5es de engenharia de software Exerc\'edcios de auto-revis\'e3o\bullet  Respostas aos exerc\'edcios de auto-revis\'e3o \bullet  Exerc\'edcios \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 639 \line 11.1 Introdu\'e7\'e3o \line As bibliotecas padr\'e3o de C++ fornecem um extenso conjunto de recursos de entrada/sa\'edda. Este cap\'edtulo discute uma gama suficiente de recursos para executar as opera\'e7\'f5es de EIS mais comuns e avaliar os demais recursos. Alguns dos recursos apresentados aqui foram discutidos anteriormente no texto, mas esse cap\'edtulo fornece uma discuss\'e3o mais completa dos recursos de entrada/sa\'edda de C++. \line Muitos dos recursos de E/S descritos aqui s\'e3o orientados a objetos. O leitor deve achar interessante ver como \line tais recursos s\'e3o implementados. Este estilo de E/S faz uso de outras caracter\'edsticas de C++, tais como refer\'eancias, sobrecarga de fun\'e7\'f5es e sobrecarga de operadores. \line Como veremos, C++ usa E/S segura quanto ao tipo. Cada opera\'e7\'e3o de EIS \'e9 automaticamente executada de uma maneira sens\'edvel ao tipo dos dados. Se uma fun\'e7\'e3o de EIS foi adequadamente definida para tratar um tipo de dado particular, ent\'e3o aquela fun\'e7\'e3o \'e9 chamada para tratar aquele tipo de dado. Se n\'e3o existe uma correspond\'eancia entre o tipo real dos dados e uma fun\'e7\'e3o para manipular aquele tipo de dado, \'e9 gerada uma indica\'e7\'e3o de erro de compila\'e7\'e3o. Desse modo, dados impr\'f3prios n\'e3o podem se mover \ldblquote furtivamente\rdblquote  atrav\'e9s do sistema (como pode acontecer em C - uma brecha em C que permite alguns erros bastante sutis e freq\'fcentemente estranhos). \line Os usu\'e1rios podem especificar E/S de tipos definidos pelo usu\'e1rio, como tamb\'e9m de tipos padr\'e3o. Esta \line extensibilidade \'e9 um dos recursos mais valiosos de C++. \line Boa pr\'e1tica de programa\'e7\'e3o 11.1 \line Use exclusivamente a forma de EIS de C+ + em programas em C+ +, apesar do fato de que a EIS ao estilo \line de C est\'e1 dispon\'edvel para os programadores de C++. \line Observa\'e7\'e3o de engenharia de software 11.1 \line ______ O estilo de EIS de C+ + \'e9 seguro quanto ao tipo. \line Observa\'e7\'e3o de engenharia de soflware 11.2 \line ______ C+ + possibilita um tratamento comum da EIS de tipos primitivos e de tipos definidos pelo usu\'e1rio. Este tipo de \ldblquote comunalidade \ldblquote facilita o desenvolvimento de software em geral e a reutiliza\'e7\'e3o de software em \line particular \line 11.2 Streams \line A E/S em C++ ocorre em streams de bytes. Um stream \'e9 simplesmente uma seq\'fc\'eancia de bytes. Em opera\'e7\'f5es de entrada, os bytes fluem de um dispositivo (por exemplo: um teclado, uma unidade de disco ou uma conex\'e3o de rede) para a mem\'f3ria principal. Em opera\'e7\'f5es de sa\'edda, os bytes fluem da mem\'f3ria principal para um dispositivo (por exemplo: uma tela de monitor, uma impressora, uma unidade de disco ou uma conex\'e3o de rede). \line O aplicativo associa significados aos bytes. Os bytes podem representar caracteres ASCII, formato interno de dados brutos, imagens gr\'e1ficas, voz digitalizada, v\'eddeo digital ou qualquer outro tipo de informa\'e7\'f5es que um aplicativo possa requerer. \line O trabalho dos mecanismos de E/S do sistema \'e9 mover bytes de dispositivos para a mem\'f3ria, e vice-versa, de uma maneira consistente e confi\'e1vel. Tais transfer\'eancias envolvem freq\'fcentemente movimento mec\'e2nico, tal como a rota\'e7\'e3o de um disco ou uma fita, ou o pr\'f3prio bater nas teclas em um teclado. O tempo que estas transfer\'eancias tomam normalmente \'e9 enorme, se comparado ao tempo que o processador leva para manipular dados internamente. Desse modo, opera\'e7\'f5es de E/S exigem planejamento e afina\'e7\'e3o cuidadosa, para garantir o m\'e1ximo desempenho. \line C++ fornece tanto recursos de E/S \ldblquote de baixo n\'edvel\rdblquote  como de \ldblquote alto n\'edvel\rdblquote . Recursos de E/S de baixo n\'edvel (i.e., E/S n\'e3o-formatada) especificam tipicamente que algum n\'famero de bytes deve simplesmente ser transferido de um dispositivo para a mem\'f3ria ou da mem\'f3ria para um dispositivo. Em tais transfer\'eancias, cada byte \'e9 o item de interesse. Tais recursos de baixo n\'edvel fornecem alta velocidade, transfer\'eancias de grande volume, mas estes recursos n\'e3o s\'e3o particularmente convenientes para as pessoas. \line As pessoas preferem uma vis\'e3o de n\'edvel mais alto da E/S (i.e, EIS formatada), na qual os bytes s\'e3o agrupados \line em unidades significativas, tais como inteiros, n\'fameros de ponto flutuante, caracteres, strings e tipos definidos pelo \par
640 c++ COMO PROGRAMAR \line usu\'e1rio. Estes recursos orientados a tipos s\'e3o satisfat\'f3rios para a maioria das opera\'e7\'f5es de EIS, exceto para processamento de grandes volumes de arquivos. \line Dica de desempenho 11.1 \line ______ Use E/S n\'e3o-formatada para obter melhor desempenho no processamento de arquivos de grande volume. \line 11.2.1 Arquivos de cabe\'e7alho da biblioteca iostream \line A biblioteca iostream de C\'f7+ fornece centenas de recursos de EIS. V\'e1rios arquivos de cabe\'e7alho cont\'eam partes da interface da biblioteca. \line A maioria dos programas em C++ incluem o arquivo de cabe\'e7alho <iostream>. que declara servi\'e7os b\'e1sicos necess\'e1rios para todas as opera\'e7\'f5es de E/S com streams. O arquivo de cabe\'e7alho <iostreain> define os objetos cm, cout, cerr e clog, que correspondem ao stream padr\'e3o de entrada, o stream padr\'e3o de sa\'edda, o stream padr\'e3o de erros sem buffer e o stream padr\'e3o de erros com buifer, respectivamente. S\'e3o fornecidos tanto os servi\'e7os de EIS n\'e3o-formatada como formatada. \line O cabe\'e7alho <iomanip> declara servi\'e7os \'fateis para executar opera\'e7\'f5es de processamento de arquivos, com os chamados manipuladores de streams parametriados. \line O cabe\'e7alho <fstreaxn> declara servi\'e7os importantes para opera\'e7\'f5es de processamento de arquivo controladas pelo usu\'e1rio. Usamos este cabe\'e7alho nos programas de processamento de arquivos do Cap\'edtulo 14. \line As implementa\'e7\'f5es de C\'f7+ geralmente cont\'eam outras bibliotecas de EIS relacionadas, que fornecem recursos \line espec\'edficos do sistema, tais como controlar dispositivos especiais para EIS de \'e1udio e v\'eddeo. \line 11.2.2 Classes e objetos de entrada/sa\'edda com streams \line A biblioteca ios tream cont\'e9m muitas classes para tratar uma grande variedade de opera\'e7\'f5es de E/S. As classes de iostream suportam as opera\'e7\'f5es de entrada em stream. As classes de ostream suportam opera\'e7\'f5es de sa\'edda com streams. As classes de istream de suportam tanto as opera\'e7\'f5es de entrada com streams como de sa\'edda com streams. \line A classe istream e a classe ostream s\'e3o derivadas por heran\'e7a simples da classe base ios. A classe \line iostream \'e9 derivada atrav\'e9s de heran\'e7a m\'faltipla, tanto da classe istream como da classe ostrearn. Estas rela\'e7\'f5es de heran\'e7a s\'e3o resumidas na Fig. 11.1. \line jos \line istream ostream \line ios tream \line Fig. 11.1 Parte da hierarquia de classes de EIS com streams. \line A sobrecarga de operadores fornece uma nota\'e7\'e3o conveniente para executar entrada/sa\'edda. O operador de deslocamento \'e0 esquerda (\'ab)\'e9 sobrecarregado para designar sa\'edda com stream e \'e9 chamado de operador de inser\'e7\'e3o no stream. O operador de deslocamento \'e0 direita (\'bb) \'e9 sobrecarregado para designar entrada com stream e \'e9 chamado de operador de extra\'e7\'e3o do stream. Estes operadores s\'e3o usados com os objetos stream padr\'e3o cm, cout, cerr e clog e comumente com objetos stream definidos pelo usu\'e1rio. \line O objeto pr\'e9-definido cm \'e9 uma inst\'e2ncia da classe istream e se diz que \'e9 \ldblquote vinculado\rdblquote  (ou conectado) ao dispositivo de entrada padr\'e3o, que normalmente \'e9 o teclado. O operador de extra\'e7\'e3o de stream (\'bb), como usado no comando seguinte, faz com que um valor para a vari\'e1vel inteira grade (assumindo-se que grade foi declarada como uma vari\'e1vel int) seja lido de cm para a mem\'f3ria: \par
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 641 \line cm \'bb grade; // os dados \ldblquote fluem\rdblquote  na dire\'e7\'e3o \line // das setas, para a direita \line Note que a opera\'e7\'e3o de extra\'e7\'e3o de stream \'e9 \ldblquote suficientemente esperta\rdblquote  para \ldblquote saber\rdblquote  qual \'e9 o tipo dos dados. Assumindo-se que grade foi corretamente declarada, nenhuma informa\'e7\'e3o de tipo adicional necessita ser especificada para uso com o operador de extra\'e7\'e3o de stream (como, a prop\'f3sito, \'e9 o caso no estilo de EIS de C). \line O objeto predefinido cout \'e9 uma inst\'e2ncia da classe ostream e se diz que \'e9 \ldblquote vinculado\rdblquote  ao dispositivo de sa\'edda padr\'e3o, normalmente ateia do monitor de v\'eddeo. O operador de inser\'e7\'e3o em stream (\'ab), conforme usado no comando seguinte, faz com que o valor da vari\'e1vel inteira grade seja enviado da mem\'f3ria para o dispositivo padr\'e3o de sa\'edda: \line cout \'ab grade; II os dados \ldblquote fluem\rdblquote  na dire\'e7\'e3o \line // das setas, para a esquerda \line Note que o operador de inser\'e7\'e3o em stream \'e9 \ldblquote suficientemente esperto\rdblquote  para \ldblquote saber\rdblquote  o tipo de grade (assumindo- se que ela foi corretamente declarada), de modo que nenhuma informa\'e7\'e3o de tipo adicional precisa ser especificada para uso com o operador de inser\'e7\'e3o em stream. \line O objeto pr\'e9-definido cerr \'e9 uma inst\'e2ncia da classe ostream e se diz que \'e9 \ldblquote vinculado\rdblquote  ao dispositivo de erro padr\'e3o. As sa\'eddas para o objeto cerr n\'e3o s\'e3o colocadas em um buifer. Isto significa que cada inser\'e7\'e3o no stream cerr faz com que sua sa\'edda apare\'e7a imediatamente; isto \'e9 apropriado para notificar prontamente um usu\'e1rio sobre erros. \line O objeto pr\'e9-definido clog \'e9 uma inst\'e2ncia da classe ostream e tamb\'e9m se diz ser \ldblquote vinculado\rdblquote  ao dispositivo de erro padr\'e3o. As sa\'eddas para clog s\'e3o colocadas em um buifer. Isto significa que cada inser\'e7\'e3o em clog pode fazer com que sua sa\'edda seja mantida em um buifer at\'e9 o buifer estar cheio ou at\'e9 ser esvaziado. \line O processamento de arquivos em C++ usa as classes ifstreain para executar opera\'e7\'f5es de entrada em arquivos, ofstream para opera\'e7\'f5es de sa\'edda em arquivos e fstream para opera\'e7\'f5es de entrada/sa\'edda em arquivos. A classe ifstream herda de istream, a classe ofstream herda de ostream e a classe fstream herda de iostream. As v\'e1rias rela\'e7\'f5es de heran\'e7a das classes relacionadas a EIS s\'e3o resumidas na Fig. 11.2. Existem muitas classes mais na hierarquia completa de classes de E/S com streams suportads na maioria das instala\'e7\'f5es, mas as classes mostradas aqui fornecem a grande maioria dos recursos de que a maioria dos programadores necessita. Veja o manual de refer\'eancia da biblioteca de classes para seu sistema de C++ para obter mais informa\'e7\'f5es sobre o processamento de arquivos. \par
Fig. 11.2 Parte da hierarquia de classes de EIS com streams com as classes essenciais para processamento de arquivos. \line 11.3 Sa\'edda com streams \line A classe ostream de C++ fornece a possibilidade de executar sa\'edda formatada e n\'e3o-formatada. Os recursos para sa\'edda incluem: sa\'edda dos tipos de dados padr\'e3o com o operador de inser\'e7\'e3o em stream; sa\'edda de caracteres com a fun\'e7\'e3o membro put; sa\'edda n\'e3o-formatada com a fun\'e7\'e3o membro wri te (Se\'e7\'e3o 11.5); sa\'edda de inteiros nos formatos decimal, octai e hexadecimal (Se\'e7\'e3o 11.6.1); sa\'edda de valores de ponto flutuante com v\'e1rias precis\'f5es (Se\'e7\'e3o 11.6.2), com pontos decimais for\'e7ados (Se\'e7\'e3o 11.7.2), em nota\'e7\'e3o cient\'edfica e em nota\'e7\'e3o fixa (Se\'e7\'e3o 11.7.6); sa\'edda de dados alinhados em campos com larguras designadas de campo (Se\'e7\'e3o 11.7.3); sa\'edda de dados em campos preenchidos com caracteres especificados (Se\'e7\'e3o 11.7.4); e sa\'edda de letras mai\'fasculas em nota\'e7\'e3o cient\'edfica e nota\'e7\'e3o hexadecimal (Se\'e7\'e3o 11.7.7). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx764\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2260\pard\intbl\cell ios \cell\row
\intbl\cell -  istream ostream \cell\row
\intbl .  ifstream \cell iost eam ofstream \cell\row
\intbl\cell fstream \cell\row
\pard\par
\par
\pard\sb100\sa240 642 c++ COMO PROGRAMAR \line 11.3.1 Operador de inser\'e7\'e3o em stream \line A sa\'edda com streams pode ser executada com o operador de inser\'e7\'e3o em siream, i.e., o operador \'ab sobrecarregado. O operador \'ab \'e9 sobrecarregado para sa\'edda de itens de dados de tipos primitivos, sa\'edda de strings e para a sa\'edda de valores do tipo ponteiro. A Se\'e7\'e3o 11.9 mostra como sobrecarregar \'ab para fazer a sa\'edda de itens de dados de tipos definidos pelo usu\'e1rio. A Fig 11.3 demonstra a sa\'edda de um string usando um \'fanico comando de inser\'e7\'e3o em stream. M\'faltiplos comandos de inser\'e7\'e3o podem ser usados como na Fig. 11.4. Quando \'e9 executado este programa, produz a mesma sa\'edda que o programa anterior. \line 1 II Fig. 11.3: figll_03.cpp \line 2 II Enviando um string para a sa\'edda usando inser\'e7\'e3o no stream. \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 \line 7 int main() \line 8 \line 9 cout \'ab \ldblquote Bem-vindo a C++\rquote\\n\rquote ; \line 10 \line 11 return O; \line 12 \} \line Bem-vindo a C++! \line Fig. 11.3 Enviando um string para a sa\'edda usando inser\'e7\'e3o no stream. \line 1 II Fig. 11.4: figllO4.cpp \line 2 II Enviando um string para a sa\'edda usando duas inser\'e7\'f5es no stream. \line 3 #include <iostream> \line 4 \line 5 using std: :cout; \line 6 \line 7 int main() \line 8\{ \line 9 cout \'ab \ldblquote Bem-vindo a \line 10 cout \'ab \ldblquote C++!\\n\rdblquote ; \line 11 \line 12 return O; \line 13 \} \line Bem-vindo a \line Fig. 11.4 Enviando um string para a sa\'edda usando duas inser\'e7\'f5es no stream. \line O efeito da seq\'fc\'eancia de escape \\n (nova linha) tamb\'e9m pode ser obtido com o manipulador de stream, endi (fim de linha), como na Fig. 11.5. O manipulador de stream endi gera um caractere nova linha e, al\'e9m disso, esvazia o buffer de sa\'edda (i.e., faz com que a sa\'edda do buffer seja executada imediatamente, mesmo que o buifer n\'e3o esteja cheio). O buffer de sa\'edda tamb\'e9m pode ser esvaziado simplesmente com \line cout \'ab flush; \line Os manipuladores de stream s\'e3o discutidos em detalhes na Se\'e7\'e3o 11.6. \line Express\'f5es podem ser enviadas para a sa\'edda conforme mostrado na Fig. 11.6. \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 643 \line Boa pr\'e1tica de programa\'e7\'e3o 11.2 \line Quando enviar express\'f5es para a sa\'edda, coloque-as entre par\'eanteses, para prevenir problemas de preced\'eancia de operadores entre os operadores na express\'e3o e o operador \'ab. \line 1 II Fig. 11.5: figllO5.cpp \line 2 II Usando o manipulador de stream endl. \line 3 #include <iostream> \line 4 \line 5 using std: :cout; \line 6 using std::endl; \line 7 \line 8 int main() \line 9 \line 10 cout \'ab \ldblquote Bem-vindo a \ldblquote ; \line 11 cout \'ab \ldblquote C++!\rdblquote ; \line 12 cout \'ab endi; II manipulador de stream endi (fim de linha) \line 13 \line 14 return O; \line 15 \par
1. // Fig. 11.6: figllO6.cpp \line 1/ Enviando valores de express\'f5es para a sa\'edda. \line #include <iostreani> \line using std::cout; \line using std::endl; \line i.nt main() \line cout \'ab \ldblquote 47 mais 53 \'e9 \line II par\'eanteses n\'e3o necess\'e1rios; usados para maior clareza \line cout \'ab ( 47 + 53 ); II express\'e3o \line cout \'ab endl; \line turn O; \line 53\'e9100 \line (51i5\rquote  \line eam ando valores de express\'f5es para a sa\'edda. \line est \line\'c7\'c7et \line\lquote ando operadores de inser\'e7\'e3o/extra\'e7\'e3o do stream \line Darregados \'ab e \'bb podem, cada um deles, ser usados de uma forma encadeada, conforme \line 7. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4141\pard\intbl Bem-vindo a C++I 1 \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx825\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4141\pard\intbl Fig. 11.5 \cell Usando o manipulador de stream endl. \cell\row
\pard\par
\pard\sb100\sa240 644 C++ COMO PROGRAMAR 4 \line 1 II Fig. 11.7: figll_07.cpp \line 2 II Encadeando o operador \'ab sobrecarregado. \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::endl; \line 7 \line 8 int main() \line 9 \{ \line 10 cout \'ab \ldblquote 47 mais 53 \'e9 \ldblquote  \'ab ( 47 + 53 ) \'ab endi; \line 11 \line 12 return 0; \line 13 \line 47 mais 53 \'e9 100 \line Fig. 11.7 Encadeando o operador \'ab sobrecarregado. \line As inser\'e7\'f5es m\'faltiplas em stream na Fig. 11.7 s\'e3o executadas como se elas tivessem sido escritas: \line cout \'ab \ldblquote 47 mais 53 \'e9 \ldblquote  ) \'ab ( 47 + 53 ) ) \'ab endi ); \line (i.e., \'ab se associa da esquerda para a direita). Este tipo de encadeamento de operadores de inser\'e7\'e3o em stream \'e9 permitido porque o operador \'ab sobrecarregado retorna uma refer\'eancia para seu objeto operando da esquerda, i.e., cout. Deste modo, a express\'e3o entre par\'eanteses mais \'e0 esquerda \line cout \'ab \ldblquote 47 mais 53 \'e9 \line envia o string de caracteres especificado para a sa\'edda e retorna uma refer\'eancia para cout. Isto permite que a express\'e3o entre par\'eanteses do meio seja avaliada como \line cout \'ab ( 47 + 53 \line que envia para a sa\'edda o valor inteiro 100 e retorna uma refer\'eancia para cout. A express\'e3o entre par\'eanteses mais \'e0 direita \'e9 ent\'e3o avaliada como \line cout \'ab endl \line que envia um caractere nova linha para a sa\'edda, esvazia cout e retorna uma refer\'eancia para cout. Este \'faltimo retorno n\'e3o \'e9 usado. \line 11.3.3 Sa\'edda de vari\'e1veis char* \line Na EIS no estilo de C, o programador precisa fornecer informa\'e7\'f5es sobre os tipos dos dados. C++ determina tipos de dados automaticamente - uma agrad\'e1vel melhoria em rela\'e7\'e3o a C. Mas, \'e0s vezes, isso atrapalha. Por exemplo, sabemos que um string de caracteres \'e9 do tipo char *. Suponha que queiramos imprimir o valor daquele ponteiro, i.e., o endere\'e7o do primeiro caractere daquele string na mem\'f3ria. Mas o operador \'ab foi sobrecarregado para imprimir dados do tipo char* como um string terminado com caractere nulo. A solu\'e7\'e3o \'e9 fazer a coer\'e7\'e3o do ponteiro para void * (isto deveria ser feito para qualquer vari\'e1vel ponteiro que o programador deseje enviar para a sa\'edda como um endere\'e7o). A Fig. 11.8 demonstra a impress\'e3o de uma vari\'e1vel char * em ambos os formatos, de string e endere\'e7o. Note que o endere\'e7o \'e9 impresso como um valor hexadecimal (base 16). Falaremos mais sobre como controlar as bases de n\'fameros nas Se\'e7\'f5es 11.6.1, 11.7.4, 11.7.5 e 11.7.7. Nota: a sa\'edda do programa na Fig. 11.8 pode ser diferente de um compilador para outro. \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 645 \line 1 II Fig. 11.8: figllO8.cpp \line 2 II Imprimindo o endere\'e7o armazenado em uma vari\'e1vel char * \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std: :endl; \line 7 \line 8 int main() \line 9 \{ \line 10 char *string = \ldblquote teste\rdblquote ; \line 11 \line 12 cout \'ab \ldblquote Valor do string \'e9: \ldblquote  \'ab string \line 13 \'ab \ldblquote\\nValor de static_cast< void * >( string ) \'e9: \line 14 \'ab static_cast< void * >( string ) \'ab endl; \line 15 return 0; \line 16 \} \line Valor do string \'e9: teste \line\ul LValor de static cast< void *>( string ) \'e9: \ulnone 0046C070 \line Fig. 11.8 Imprimindo o endere\'e7o armazenado em uma vari\'e1vel char*. \line 11.3.4 Sa\'edda de caracteres com a fun\'e7\'e3o membro put; encadeando puts \line A fun\'e7\'e3o membro put faz a sa\'edda de um \'fanico caractere, como em \line cout.put( \lquote A\rquote  ); \line que exibe A na tela. As chamadas para put podem ser encadeadas como em \line cout.put( \lquote A\rquote  ).put( \lquote\\n\rquote  ); \line que envia para a sa\'edda a letra A seguida por um caractere nova linha. Como com \'ab, o comando precedente \'e9 executado dessa maneira porque o operador ponto \'e9 associado da esquerda para a direita e a fun\'e7\'e3o membro put retorna uma refer\'eancia para o objeto ostream que recebeu a mensagem put (chamada de fun\'e7\'e3o). A fun\'e7\'e3o put pode ser tamb\'e9m chamada com uma express\'e3o equivalente a um valor de c\'f3digo ASCII, como em cout. put ( 65 ), que tamb\'e9m envia A para a sa\'edda. \line 11.4 Entrada com streams \line Agora, iremos considerar o stream de entrada. Isso pode ser feito com o operador de extra\'e7\'e3o de stream, i.e., o operador \'bb sobrecarregado. Tal operador normalmente ignora caracteres em branco (tais como espa\'e7os em branco, marcas de tabula\'e7\'e3o e novas linhas) no stream de entrada. Mais tarde, veremos como mudar esse comportamento. O operador de extra\'e7\'e3o de stream retorna zero (falso) quando \'e9 encontrado o fim de arquivo em um stream; caso contr\'e1rio, o operador de extra\'e7\'e3o de stream retorna uma refer\'eancia para o objeto que recebeu a mensagem de extra\'e7\'e3o (por exemplo, cm na express\'e3o cm \'bb grade). Cada stream cont\'e9m um conjunto de bits de estado, usados para controlar o estado do stream (i.e., formata\'e7\'e3o, defini\'e7\'e3o de estados de erro, etc.). A extra\'e7\'e3o de stream faz com que o failbit do stream seja ligado (colocado em 1), se dados do tipo errado foram fornecidos como entrada, e faz com que o badbit do stream seja ligado se a opera\'e7\'e3o falhar. Logo veremos como testar estes bits depois de uma opera\'e7\'e3o de EIS. As Se\'e7\'f5es 11.7 e 11.8 discutem os bits de estado do stream em detalhes. \par
11.4.1 Operador de extra\'e7\'e3o do stream \line Para ler dois inteiros, use o objeto cm e o operador de extra\'e7\'e3o de stream sobrecarregado, como na Fig. 11.9. Note que opera\'e7\'f5es de extra\'e7\'e3o de stream tamb\'e9m podem ser encadeadas. \line A preced\'eancia relativamente alta dos operadores \'bb e \'ab pode causar problemas. Por exemplo, o programa \line da Fig. 11.10 n\'e3o compilar\'e1 corretamente sem os par\'eanteses em torno da express\'e3o condicional. O leitor deve cuidar disso. \par
1 II Fig. 11.9: figllO9.cpp \line 2 II Calculando a soma de dois inteiros udos do teclado \line 3 II com cm e o operador de extra\'e7\'e3o de streani. \line 4 #include <iostream> \par
5 \par
6 using std::cout; \line 7 using std: :cin; \line 8 using std: :endl; \par
Fig. 11.10 Evitando um problema de preced\'eancia entre o operador de inser\'e7\'e3o em stream e o operador condicional (parte 1 de 2). \par
646 C++ CoMo PROGRAMAR \par
9 \line 10 int main() \line 11 \{ \line 12 int x, y; \line 13 \line 14 cout \'ab \ldblquote Digite dois inteiros: \ldblquote ; \line 15 cin\'bbx\'bby; \line 16 cout \'ab \ldblquote Soma de \ldblquote  \'ab x \'ab \ldblquote  e \ldblquote  \'ab y \'ab \ldblquote  \'e9: \line 17 \'ab(x+y)\'abendl; \line 18 \line 19 return 0; \line 20 \} \par
1 \line\lquote 4 \line\'e7 \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6789\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7922\pard\intbl Digite dois inteiros: 30 92 Soma de 30 e 92 \'e9: 122 \cell\cell\row
\intbl Fig. 11.9 Calculando a soma de dois inteiros udos do teclado com cm e o operador de \cell extra\'e7\'e3o de \cell\row
\intbl stream. \cell\cell\row
\intbl 1 II Fig. 11.10: figlllo.cpp \cell\cell\row
\intbl 2 II Evitando um problema de preced\'eancia entre o operador de \cell\cell\row
\intbl 3 II inser\'e7\'e3o em stream e o operador condicional. \cell\cell\row
\intbl 4 II Requer par\'eanteses em torno da express\'e3o condicional. \cell\cell\row
\intbl 5 #include <iostrealrL> \cell\cell\row
\intbl 6 \cell\cell\row
\intbl 7 using std: :cout; \cell\cell\row
\intbl 8 using std::cin; \cell\cell\row
\intbl 9 using std::endl; \cell\cell\row
\intbl 10 \cell\cell\row
\intbl 11 int main() \cell\cell\row
\intbl 12 \cell\cell\row
\intbl 13 int x, y; \cell\cell\row
\intbl 14 \cell\cell\row
\intbl 15 cout \'ab Digite dois inteiros: \cell\cell\row
\intbl 16 cin\'bbx\'bby; \cell\cell\row
\intbl 17 cout \'ab x \'ab ( x = y ? \ldblquote  \'e9\rdblquote  : \ldblquote  n\'e3o \'e9\rdblquote  \cell\cell\row
\intbl 18 \'ab \ldblquote  igual a \ldblquote  \'ab y \'ab endl; \cell\cell\row
\pard\par
\pard\sb100\sa240 19 \par
20 return 0; \par
21 \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 647 \par
Fig. 11.10 Evitando um problema de preced\'eancia entre o operador de inser\'e7\'e3o em stream e o operador condicional (parte 2 de 2). \line Erro comum de programa\'e7\'e3o 11.1 \line Tentar ler de um ostream (ou qualquer outro stream somente de sa\'edda). \line Erro comum de programa\'e7\'e3o 11.2 \line Tentar escrever em um istream (ou qualquer outro stream somente de entrada). \line Erro comum de programa\'e7\'e3o 11.3 \line N\'e3o usar par\'eanteses, para for\'e7ar a preced\'eancia apropriada, quando usar os operadores de precedencia relativamente mais alta para inser\'e7\'e3o em stream (\'ab) ou extra\'e7\'e3o de stream (\'bb). \line Um meio popular para ler uma s\'e9rie de valores da entrada \'e9 usar a opera\'e7\'e3o de extra\'e7\'e3o de stream na condi\'e7\'e3o de continua\'e7\'e3o do la\'e7o em um la\'e7o while. A extra\'e7\'e3o retorna falso (O) quando o fim de arquivo \'e9 encontrado. Considere o programa da Fig. 11.1 1, que acha a nota mais alta em uma prova. Assuma que o n\'famero de notas n\'e3o \'e9 conhecido com anteced\'eancia e que o usu\'e1rio digitar\'e1 fim de arquivo para indicar que todas as notas j\'e1 foram digitadas. A condi\'e7\'e3o do while, (cm \'bb grade), se torna O (interpretado como false) quando o usu\'e1rio digitar fim de arquivo. \line\ul Dica de portabilidade 11.1 \ulnone\line Quando informar ao usu\'e1rio sobre como terminar a entrada de dados pelo teclado, pe\'e7a ao usu\'e1rio que \line\ldblquote digite fim de arquivo para terminar a entrada\rdblquote  em vez de solicitar <ctrl>-d (UNJX e Macintosh) ou <ctrl>-z (PC e VAX). \line Na Fig. 11.11. cm \'bb grade pode ser usada como uma condi\'e7\'e3o, porque a classe base ios (da qual istream \'e9 herdado) fornece um operador de coer\'e7\'e3o sobrecarregado que converte um stream em um ponteiro do tipo void \lquote . O valor do ponteiro retornado \'e9 O (false) se um erro aconteceu enquanto se tentava ler um valor ou o indicador de fim de arquivo foi encontrado. O compilador pode usar o operador de cast void * implicitamente. \line 11.4.2 Fun\'e7\'f5es membro get e getline \line A fun\'e7\'e3o membro get sem par\'e2metros fornece como entrada um caractere do stream designado (mesmo que este seja um espa\'e7o em branco) e retorna este caractere como o valor da chamada da fun\'e7\'e3o. Esta vers\'e3o de get retorna EOF quando o fim de arquivo \'e9 encontrado no stream. \line 1 II Fig. 11.11: figllll.cpp \line 2 1/ Operador de extra\'e7\'e3o de stream retornando false no fim de arquivo. \line 3 #include <iostream> \line 4 \line Fig. 11.11 Operador de extra\'e7\'e3o de stream retornando false quando encontra fim de arquivo (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5059\pard\intbl Digite dois inteiros: 7 5 7 n\'e3o \'e9 igual a 5 \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1918\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3438\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5059\pard\intbl Digite \cell dois \cell inteiros: 8 8 \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3438\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx4376\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5059\pard\intbl 8 \'e9 igual a \cell 8 \cell\cell\row
\pard\par
\pard\sb100\sa240 648 C++ COMO PROGRAMAR \line 5 using std::cout; \line 6 using std::cin; \line 7 using std::endl; \line 8 \line 9 int main() \line 10 \line 11 int grade, highestGrade = -1; \line 12 \line 13 cout \'ab \ldblquote Digite nota (digite fim de arquivo para terminar): \ldblquote ; \line 14 while ( cm \'bb grade \line 15 if ( grade > highestGrade \line 16 highestGrade = grade; \line 17 \line 18 cout \'ab \ldblquote Digite nota (digite fim de arquivo para terminar): \line 19 \line 20 \line 21 cout \'ab \ldblquote\\n\\nNota mais alta \'e9: \ldblquote  \'ab highestGrade \'ab endi; \line 22 return 0; \line 23 \line Digite nota (digite fim de arquivo para terminar): 67 \line Digite nota (digite fim de arquivo para terminar): 87 \line Digite nota (digite fim de arquivo para terminar): 73 \line Digite nota (digite fim de arquivo para terminar): 95 \line Digite nota (digite fim de arquivo para terminar): 34 \line Digite nota (digite fim de arquivo para terminar): 99 \line Digite nota (digite fim de arquivo para terminar): \line Nota mais alta \'e9: 99 \line Fig. 11.11 Operador de extra\'e7\'e3o de stream retornando false quando encontra fim de arquivo (parte 2 de 2). \line A Fig. 11. 12 demonstra o uso das fun\'e7\'f5es membro eof e get com o stream de entrada cm e da fun\'e7\'e3o membro put com o stream de sa\'edda cout. O programa primeiro imprime o valor de cm . eof () , i.e., false (0, na sa\'edda), para mostrar que ainda n\'e3o encontrou o fim de arquivo em cm. O usu\'e1rio digita uma linha de texto e aperta a tecla Enter, seguida por fim de arquivo (<ctrl>-z em sistemas compat\'edveis com o IBM PC, <ctrl>-d em sistemas UNIX e Macintosh). O programa l\'ea cada caractere e o envia para a sa\'edda em cout, usando a fun\'e7\'e3o membro put. Quando o fim de arquivo \'e9 encontrado, o while termina e cm . eof () - agora true - \'e9 novamente impresso (1 na sa\'edda), para mostrar que o fim de arquivo foi \ldblquote ligado\rdblquote  em cm. Note que este programa usa a vers\'e3o da fun\'e7\'e3o membro get de istream que n\'e3o aceita nenhum argumento e retorna o caractere que est\'e1 sendo lido. \line A fun\'e7\'e3o membro get com um argumento de refer\'eancia para caractere recebe como entrada o pr\'f3ximo caractere do stream de entrada (mesmo que este seja um espa\'e7o em branco) e armazena-o no par\'e2metro do tipo caractere. Esta vers\'e3o de get retorna O quando o fim de arquivo \'e9 encontrado; caso contr\'e1rio, esta vers\'e3o de get retorna uma refer\'eancia para o objeto istream para o qual a fun\'e7\'e3o membro get est\'e1 sendo invocada. \line 1 // Fig. 11.12: figlll2.cpp \line 2 // Usando as fun\'e7\'f5es membro get, put e eof. \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::cin; \line 7 using std::endl; \line 8 \line 9 int main() \line 10 \line Fig. 11.12 Usando fun\'e7\'f5es membro get, put e eof (parte 1 de 2). \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 649 \line 11 char e; \line 12 \line 13 cout \'ab \ldblquote Antes da leitura, cin.eof () \'e9 \ldblquote  \'ab cin.eof O \line 14 \'ab \\nDigite urna frase seguida por um fim de arquivo:\\n; \line 15 \line 16 while ( ( c = cin.getO ) != EOF \line 17 cout.put( e ); \line 18 \line 19 cout \'ab \ldblquote\\nEOF neste sistema \'e9: \ldblquote  \'ab c; \line 20 cout \'ab \ldblquote\\nAp\'f3s a leitura, cin.eof() \'e9 \ldblquote  \'ab cin.eof() \'ab endl; \line 21 return 0; \line 22 \line Antes da leitura, cin.eof() \'e9 O \line Digite uma frase seguida por um fim de arquivo: \line Testando as fun\'e7\'f5es membro get e putAZ \line Testando as fun\'e7\'f5es membro get e put \line EOF neste sistema \'e9: -1 \line Ap\'f3s a leitura, cin.eof() \'e9 1 \line Fig. 11.12 Usando fun\'e7\'f5es membro get, put e eof (parte 2 de 2). \line Uma terceira vers\'e3o da fun\'e7\'e3o membro get aceita tr\'eas par\'e2metros - um array de caracteres, um limite de tamanho e um delimitador (com valor default \\n\rquote ). Esta vers\'e3o l\'ea caracteres do stream de entrada. Ela l\'ea um caractere a menos que o n\'famero m\'e1ximo de caracteres especificado e termina, ou termina assim que o delimitador \'e9 lido. Um caractere nulo \'e9 inserido para terminar o string de entrada no array de caracteres usado como um buifer pelo programa. O delimitador n\'e3o \'e9 colocado no array de caracteres, mas permanece no stream de entrada (o delimitador ser\'e1 o pr\'f3ximo caractere a ser lido). Deste modo, o resultado de um segundo get sucessivo \'e9 uma linha vazia, a menos que o caractere delimitador seja removido do stream de entrada. A Fig. 11.13 compara a entrada usando cm com a extra\'e7\'e3o de stream (que l\'ea caracteres at\'e9 que um espa\'e7o em branco seja encontrado) e a entrada com ci get. Note que a chamada a cm . get n\'e3o especifica um caractere delimitador, de modo que o default \lquote\\n\rquote  \'e9 usado. \line 1 II Fig. 11.13: figlll3.cpp \line 2 II Comparando leitura de strings com cm e cin.get. \line 3 #include <iostrearn> \line 4 \line 5 using std: :cout; \line 6 using std::cin; \line 7 using std: :endl; \line 8 \line 9 int main() \line 10 ( \line 11 const int SIZE = 80; \line 12 char bufferl[ SIZE ], buffer2[ SIZE ]; \line 13 \line 14 cout \'ab \ldblquote Digite urna frase:\\n\rdblquote ; \line 15 cm \'bb bufferl; \line 16 cout \'ab \ldblquote\\nO string lido com cm era:\\n\rdblquote  \line 17 \'ab bufferl \'ab \ldblquote\\n\\n\rdblquote ; \line 18 \line 19 cin.get( buffer2, SIZE ); \line 20 cout \'ab \ldblquote O string lido com cin.get era:\\n\rdblquote  \line 21 \'ab buffer2 \'ab endl; \line Fig. 11.13 Comparando a leitura de um string usando cm com extra\'e7\'e3o do stream e a leitura com cm. get (parte 1 de 2). \par
650 C++ COMO PROGRAMAR \line 1 \line 22 \line 23 return O; \line 24 \line Digite uma frase: \line Comparando leitura de strings com cm e cin.get \line O string lido com cm era: \line Comparando \line O string lido com cin.get era: \line leitura de strings com cm e cin.get \line Fig. 11.13 Comparando a leitura de um stririg usando cm com extra\'e7\'e3o do stream e a leitura com cm . get (parte 2 de 2). \line A fun\'e7\'e3o membro getlmne opera como a terceira vers\'e3o da fun\'e7\'e3o membro get e insere um caractere nulo depois da linha no array de caracteres. A fun\'e7\'e3o getline remove o delimitador do stream (i.e., l\'ea o caractere e o descarta), mas n\'e3o armazena o mesmo no array de caracteres. O programa da Fig. 11.14 demonstra o uso da fun\'e7\'e3o membro getline para ler uma linha de texto. \line 1 /1 Fig. 11.14: figlll4.cpp \line 2 II Leitura de caracteres com a fun\'e7\'e3o membro getlmne. \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::cin; \line 7 using std: :endl; \line 8 \line 9 int main() \line 10 \line 11 const SIZE = 80; \line 12 char buffer[ SIZE ); \line 13 \line 14 cout \'ab Digite uma frase:\\n; \line 15 cin.getline( buffer, SIZE ); \line 16 \line 17 cout \'ab \ldblquote\\nA frase digitada \'e9:\\n\rdblquote  \'ab buffer \'ab endl; \line 18 return 0; \line 19 \par
Fig. 11.14 Entrada de caracteres com a fun\'e7\'e3o membro getline \line 11.4.3 Fun\'e7\'f5es membro peek. putback e ignore de istream \line A fun\'e7\'e3o membro ignore ignora um n\'famero especificado de caracteres (o default \'e9 um caractere) ou termina quando encontra um delimitador especificado (o delimitador default \'e9 EOF, que faz com que ignore salte para o fim do arquivo quando estiver lendo um arquivo). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx850\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2221\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3110\pard\intbl Digite \cell uma frase: \cell\cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2221\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3110\pard\intbl Usando a fun\'e7\'e3o membro \cell getline \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx850\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2221\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3110\pard\intbl A frase \cell digitada \'e9: \cell\cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2221\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3110\pard\intbl Usando a fun\'e7\'e3o membro \cell getline \cell\row
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 651 \line A fun\'e7\'e3o membro putback coloca o \'faltimo caractere lido de um stream de entrada por um get de volta naquele stream. Esta fun\'e7\'e3o \'e9 \'fatil para aplicativos que varrem streams de entrada procurando um campo com um caractere inicial espec\'edfico. Quando esse caractere \'e9 lido da entrada, o aplicativo coloca esse caractere de volta no stream, para que o caractere possa ser novamente lido do stream, junto com os demais dados. \line A fun\'e7\'e3o membro peek retoma o pr\'f3ximo caractere de um stream de entrada, mas n\'e3o remove o caractere do stream. \line 114.4 EIS segura quanto ao tipo \line C++ oferece EIS segura quanto ao tipo. Os operadores \'ab e \'bb s\'e3o sobrecarregados para aceitar itens de dados de tipos espec\'edficos. Se s\'e3o processados dados inesperados, v\'e1rios indicadores de erro s\'e3o \ldblquote ligados\rdblquote para que o usu\'e1rio possa testar se uma opera\'e7\'e3o de E/S teve sucesso ou falhou. Desta maneira, o programa \ldblquote permanece\rdblquote  no controle. Discutimos estes indicadores de erro na Se\'e7\'e3o 11.8. \line 11.5 EIS n\'e3o-formatada com read, gcount e write \line A entrada/sa\'edda n\'e3o-frrmatada \'e9 executada com as fun\'e7\'f5es membro read e write. Cada uma dessas fun\'e7\'f5es recebe como entrada, ou envia para a sa\'edda, um certo n\'famero de bytes para ou de um array de caracteres na mem\'f3ria. Estes bytes n\'e3o s\'e3o formatados de nenhuma forma. Eles simplesmente s\'e3o udos da entrada ou enviados para a sa\'edda como bytes brutos. Por exemplo, a chamada \line char buffer[J = \ldblquote FELIZ ANIVERS\'c1RIO\rdblquote ; \line cout.write(buffer, 10); \line envia para a sa\'edda os primeiros 10 bytes de buffer (inclusive caracteres nulos, que fariam a sa\'edda com cout e \'ab terminar). Como um string de caracteres \'e9 avaliado como o endere\'e7o de seu primeiro caractere, a chamada \line cout.write( \lquote ABCDEFGHIJKLMNOPQRSTUVWXYZ\rdblquote , 10 ); \line exibe os primeiros 10 caracteres do alfabeto. \line A fun\'e7\'e3o membro read l\'ea um n\'famero especificado de caracteres para um array de caracteres. Se o n\'famero de caracteres udos \'e9 menor que o especificado, failbit \'e9 \ldblquote ligado\rdblquote . Logo veremos como determinar se failbit foi \ldblquote ligado\rdblquote  (ver Se\'e7\'e3o 11.8). A fun\'e7\'e3o membro gcount informa o n\'famero de caracteres udos pela \'faltima opera\'e7\'e3o de entrada. \line A Fig. 11.15 demonstra as fun\'e7\'f5es membro de istream read e gcount,e a fun\'e7\'e3o membro write de ostream. O programa recebe como entrada 20 caracteres (de uma seq\'fc\'eancia de entrada mais longa) para o array de caracteres buffer com o uso de read, determina o n\'famero de caracteres fornecidos como entrada com gcount e envia para a sa\'edda os caracteres em buffer usando write. \par
Fig. 11.15 E/S n\'e3o-formatada com as fun\'e7\'f5es membro read, gcount e write (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5080\pard\intbl 1 \cell // Fig. 11.15: figlll5.cpp \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2342\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2847\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5080\pard\intbl 2 \cell // E/S n\'e3o-formatada \cell com \cell read, gcount e write. \cell\row
\intbl 3 \cell #include <iostream> \cell\cell\cell\row
\intbl 4 \cell\cell\cell\cell\row
\intbl 5 \cell using std::cout; \cell\cell\cell\row
\intbl 6 \cell using std::cin; \cell\cell\cell\row
\intbl 7 \cell using std::endl; \cell\cell\cell\row
\intbl 8 \cell\cell\cell\cell\row
\intbl 9 \cell int main() \cell\cell\cell\row
\intbl 10 \cell ( \cell\cell\cell\row
\intbl 11 \cell const int SIZE = \cell 80; \cell\cell\row
\intbl 12 \cell char buffer[ SIZE \cell ]; \cell\cell\row
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 651 \par
A fun\'e7\'e3o membro putback coloca o \'faltimo caractere lido de um stream de entrada por um get de volta naquele stream. Esta fun\'e7\'e3o \'e9 \'fatil para aplicativos que varrem streams de entrada procurando um campo com um caractere inicial espec\'edfico. Quando esse caractere \'e9 lido da entrada, o aplicativo coloca esse caractere de volta no stream, para que o caractere possa ser novamente lido do stream, junto com os demais dados. \line A fun\'e7\'e3o membro peek retoma o pr\'f3ximo caractere de um stream de entrada, mas n\'e3o remove o caractere do stream. \par
11.4.4 EIS segura quanto ao tipo \par
C++ oferece EIS segura quanto ao tipo. Os operadores \'ab e \'bb s\'e3o sobrecarregados para aceitar itens de dados de tipos espec\'edficos. Se s\'e3o processados dados inesperados, v\'e1rios indicadores de erro s\'e3o \ldblquote ligados\rdblquote para que o usu\'e1rio possa testar se uma opera\'e7\'e3o de E/S teve sucesso ou falhou. Desta maneira, o programa \ldblquote permanece\rdblquote  no controle. Discutimos estes indicadores de erro na Se\'e7\'e3o 11.8. \par
11.5 EIS n\'e3o-formatada com read, gcount e write \par
A entrada/sa\'edda n\'e3o-formatada \'e9 executada com as fun\'e7\'f5es membro read e write. Cada uma dessas fun\'e7\'f5es recebe como entrada, ou envia para a sa\'edda, um certo n\'famero de bytes para ou de um array de caracteres na mem\'f3ria. Estes bytes n\'e3o s\'e3o formatados de nenhuma forma. Eles simplesmente s\'e3o lidos da entrada ou enviados para a sa\'edda como bytes brutos. Por exemplo, a chamada \par
char buffer [] = \ldblquote FELIZ ANIVERS\'c1RIO\rquote ; \line cout.write(buffer, 10); \par
envia para a sa\'edda os primeiros 10 bytes de buffer (inclusive caracteres nulos, que fariam a sa\'edda com cout e \'ab terminar). Como um string de caracteres \'e9 avaliado como o endere\'e7o de seu primeiro caractere, a chamada \par
cout.write ( \ldblquote ABCDEFGHIJKLMNOPQRSTUVWXYZ\rdblquote , 10 ); \par
exibe os primeiros 10 caracteres do alfabeto. \line A fun\'e7\'e3o membro read l\'ea um n\'famero especificado de caracteres para um array de caracteres. Se o n\'famero de caracteres lidos \'e9 menor que o especificado, failbit \'e9 \ldblquote ligado\rdblquote . Logo veremos como determinar se failbit foi \ldblquote ligado\rdblquote  (ver Se\'e7\'e3o 11.8). A fun\'e7\'e3o membro gcount informa o n\'famero de caracteres lidos pela \'faltima opera\'e7\'e3o de entrada. \line A Fig. 11.15 demonstra as fun\'e7\'f5es membro de istream read e gcount,e a fun\'e7\'e3o membro write de ostrea!n. O programa recebe como entrada 20 caracteres (de uma seq\'fc\'eancia de entrada mais longa) para o array de caracteres buffer com o uso de read. determina o n\'famero de caracteres fornecidos como entrada com gcount e envia para a sa\'edda os caracteres em buffer usando write. \par
Fig. 11.15 EIS n\'e3o-formatada com as fun\'e7\'f5es membro read, gcount e write (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5204\pard\intbl 1 \cell II Fig. 11.15: figlll5.cpp \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx301\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2971\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5204\pard\intbl 2 \cell /1 E/S n\'e3o-formatada com \cell read, gcount e write. \cell\row
\intbl 3 \cell #include <iostream> \cell\cell\row
\intbl 4 \cell\cell\cell\row
\intbl 5 \cell using std: :cout; \cell\cell\row
\intbl 6 \cell using std: :cin; \cell\cell\row
\intbl 7 \cell using std: :endl; \cell\cell\row
\intbl 8 \cell\cell\cell\row
\intbl 9 \cell int main() \cell\cell\row
\intbl 10 \cell\{ \cell\cell\row
\intbl 11 \cell const int SIZE = 80; \cell\cell\row
\intbl 12 \cell char buffer[ SIZE ]; \cell\cell\row
\pard\par
\pard\sb100\sa240 652 C++ COMO PROGRAMAR \line 13 \line 14 cout \'ab \ldblquote Digite urna frase:\\n\rdblquote ; \line 15 cin.read( buffer, 20 ); \line 16 cout \'ab \ldblquote\\nA frase digitada \'e9:\\n\rquote ; \line 17 cout.write( buffer, cin.gcount() ); \line 18 cout \'ab endi; \line 19 return 0; \line 20 \line Digite urna frase: \line Usando as fun\'e7\'f5es membro read, write e gcount \line A frase digitada \'e9: \line Usando as fun\'e7\'f5es me \line Fig. 11.15 EIS n\'e3o-formatada com as fun\'e7\'f5es membro read, gcount e write (parte 2 de 2). \line 11.6 Manipuladores de streams \line C++ fornece v\'e1rios manipuladores de streams que executam tarefas de formata\'e7\'e3o. Os manipuladores de streams 4 fornecem recursos tais como defini\'e7\'e3o de larguras de campo, defini\'e7\'e3o de precis\'f5es, defini\'e7\'e3o e redefini\'e7\'e3o de \line indicadores de formato, defini\'e7\'e3o do caractere de preenchimento de campo, esvaziamento de streams, inser\'e7\'e3o de um caractere nova linha no stream de sa\'edda, inser\'e7\'e3o de um caractere nulo no stream de sa\'edda e desconsidera\'e7\'e3o de espa\'e7os em branco no stream de entrada. Estes recursos s\'e3o descritos nas se\'e7\'f5es seguintes. \line 11.6.1 Base do stream de inteiros: dec, oct, hex e setbase \line Inteiros s\'e3o normalmente interpretados como valores decimais (base 10). Para mudar a base em que os inteiros s\'e3o interpretados em um stream, insira o manipulador hex para definir a base como hexadecimal (base 16) ou insira o manipulador oct para definir a base como octal (base 8). Insira o manipulador de stream dec para redefinir a base do stream como decimal. \line A base de um stream pode tamb\'e9m ser mudada pelo manipulador de stream setbase, que aceita um par\'e2metro inteiro de valor 10, 8 ou 16 para definir a base. Como setbase aceita um par\'e2metro, ele \'e9 chamado de manipulador de stream parametrizado. Usar setbase ou qualquer outro manipulador parametrizado exige a inclus\'e3o do arquivo de cabe\'e7alho <iomanip>. A base do stream permanece a mesma at\'e9 que ela seja explicitamente mudada. A Fig. 11.16 mostra o uso dos manipuladores de stream hex. oct, dec e setbase. \line 1 II Fig. 11.16: figll_16.cpp \line 2 // Usando os manipuladores de stream hex, oct, dec e setbase. \line 3 #include <iostrearn> \line 4 \line 5 using std::cout; \line 6 using std::cin; \line 7 using std::endl; \line 8 \line 9 #include <iomanip> \line 10 \line 11 using std::hex; \line 12 using std: :dec; \line 13 using std::oct; \line 14 using std::setbase; \line 15 \line Fig. 11.16 Usando os manipuladores de streamhex, oct, dec e setbase (parte 1 de 2). \par
Digite um n(imero decimal: 20 \line 20 em hexadecimal \'e9: 14 \line 20 em octal \'e9: 24 \line 20 em decimal \'e9: 20 \par
Fig. 11.16 Usando os manipuladores de stream hex, oct, dec e setbase (parte 2 de 2). \par
11.6.2 Precis\'e3o em ponto flutuante (precision, setprecision) \par
Podemos controlar a precis\'e3o de n\'fameros em ponto flutuante, i.e., o n\'famero de d\'edgitos \'e0 direita do ponto decimal, usando ou o manipulador de stream setprecision ou a fun\'e7\'e3o membro precision. Uma chamada a qualquer um destes define a precis\'e3o para todas as opera\'e7\'f5es de sa\'edda subseq\'fcentes, at\'e9 a pr\'f3xima chamada para defini\'e7\'e3o de precis\'e3o. A fun\'e7\'e3o membro precisiori sem par\'e2metro retorna a defini\'e7\'e3o da precis\'e3o atual. O programa da Fig. 11.17 usa tanto a fun\'e7\'e3o membro precision como o manipulador setprecision para imprimir uma tabela mostrando a raiz quadrada de 2 com precis\'f5es variando de O a 9. \par
4 \par
5 \line 6 \line 7 \line 8 \par
10 \par
14 \par
16 \line 17 \line 18 \line 19 \line 20 \line 21 \par
using std::cout; using std: :cin; using std::endl; \par
std: :ios; \line std: : setiosflags; std: : setprecision; \par
double root2 = sqrt( 2.0 ); int places \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 653 \par
16 int main() \line 17 \{ \line 18 int n; \line 19 \line 20 cout \'ab \ldblquote Digite um n\'famero decimal: \line 21 cm \'bb n; \line 22 \line 23 cout \'ab n \'ab \ldblquote  em hexadecimal \'e9: \line 24 \'ab hex \'ab n \'ab \lquote\\n \line 25 \'ab dec \'ab n \'ab em octal \'e9: \line 26 \'ab oct \'ab n \'ab \lquote\\n\rquote  \line 27 \'ab setbase( 10 ) \'ab n \'ab \ldblquote  em decimal \'e9: \line 28 \'ab n \'ab endl; \line 29 \line 30 return 0; \line 31 \} \par
1 II Fig. 11.17: figlll7.cpp \line 2 II Controlando a precis\'e3o de valores em \line 3 #include <iostream> \par
ponto \par
flutuante \par
9 #include <iomanip> \par
11 using \line 12 using \line 13 using \par
15 #include <cmath> \par
int main() \par
Fig. 11.17 Controlando a precis\'e3o de valores em ponto flutuante (parte 1 de 2). \par
654 C++ COMO PROGRAMAR \line 22 cout \'ab setiosflags( ios::fixed \line 23 \'ab \ldblquote Raiz quadrada de 2 com precis\'f5es de 0 a \line 24 \'ab \ldblquote Precis\'e3o inicializada pela \line 25 \'ab \ldblquote fun\'e7\'e3o membro precision:\rdblquote  \'ab endl; \line 26 \line 27 for ( places = 0; places <= 9; places++ \line 28 cout.precision( places ); \line 29 cout \'ab root2 \'ab \lquote\\n\rquote ; \line 30 \line 31 \line 32 cout \'ab \ldblquote\\nPrecis\'e3o inicializada pelo \line 33 \'ab \ldblquote manipulador setprecision:\\n\rdblquote ; \line 34 \line 35 for ( places = 0; places <= 9; places++ \line 36 cout \'ab setprecision( places ) \'ab root2 \'ab \lquote\\n\rquote ; \line 37 \line 38 return 0; \line 39 \line Raiz quadrada de 2 com precis\'f5es de O a 9. \line Precis\'e3o inicializada pela fun\'e7\'e3o membro precision: \line 1 \'ea \line 1.4 \line 1.41 \line 1.414 \line 1.4142 \line 1.41421 \line 1.414214 \line 1.4142136 \line 1.41421356 \line 1.414213562 \line Precis\'e3o inicializada pelo manipulador setprecision: \line 1 \line 1.4 \line 1.41 \line 1.414 \line 1.4142 \line 1.41421 \line 1.414214 \line 1.4142136 \line 1.41421356 \line 1.414213562 \line Fig. 11.17 Controlando a precis\'e3o de valores em ponto flutuante (parte 2 de 2). \line 11.6.3 Largura de campo (setw, width) \line A fun\'e7\'e3o membro setw de ios define a largura de campo (ie., o n\'famero de posi\'e7\'f5es de caracteres com que um valor deveria ser mostrado na sa\'edda ou o n\'famero de caracteres com que deveria ser lido) e retorna a largura anterior. Se os valores processados s\'e3o menores que a largura de campo, caracteres de enchimento s\'e3o inseridos como preenchimento. Um valor maior que a largura especificada n\'e3o ser\'e1 truncado - o n\'famero completo ser\'e1 impresso. \line Erro comum dc programa\'e7\'e3o 11.4 \line A defini\'e7\'e3o de setw se aplica somente \'e0 pr\'f3xima inser\'e7\'e3o ou extra\'e7\'e3o; posteriormente, setw \'e9 implicitainente inicializada com 0, i.e., os valores de sa\'edda simplesmente ser\'e3o t\'e3o grandes quanto eles necessi \par
CAPITULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 655 \par
tam ser A fun\'e7\'e3o setw sem par\'e2metro retorna a defini\'e7\'e3o atual. \'c9 um erro de l\'f3gica assumir que a defini\'e7\'e3o de setw se aplica a todas as sa\'eddas subseq\'fcentes. \line Erro comum de programa\'e7\'e3o 11.5 \line Quando n\'e3o se fornecer um campo suficientemente grande para tratar a sa\'edda, a impress\'e3o da sa\'edda ser\'e1 t\'e3o grande quanto necess\'e1ria, provavelmente tornando a sa\'edda dif\'edcil de ser lida. \line A Fig. li . 18 demonstra o uso da fun\'e7\'e3o membro setw tanto com entradas como com sa\'eddas. Note que, na leitura para um array char, o n\'famero m\'e1ximo de caracteres udos ser\'e1 um a menos do que a largura, porque \'e9 reservada uma posi\'e7\'e3o para o caractere nulo que ser\'e1 colocado no string de entrada. Lembre-se de que a extra\'e7\'e3o do stream termina quando espa\'e7os em branco n\'e3o-iniciais s\'e3o encontrados. O manipulador de stream setw tamb\'e9m pode ser usado para definir a largura dos campos. Nota: quando o usu\'e1rio \'e9 solicitado a fornecer uma entrada, o usu\'e1rio deve digitar uma linha de texto e apertar Enter seguido por fim de arquivo (<ctrl>-z em sistemas compat\'edveis com o IBM PC, <ctrl>-d em sistemas UNIX e Macintosh). Nota: ao se ler qualquer coisa que n\'e3o seja um array char, width e setw s\'e3o ignoradas. \line 1 II figlll8.cpp \line 2 II Demonstrando a fun\'e7\'e3o membro width \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::cin; \line 7 using std: :endl; \line 8 \line 9 int main() \line 10 \line cout \'ab \ldblquote Digite uma frase:\\n\rdblquote ; \line cin.width( 5 ); \line while ( cm \'bb string \line cout.width( w++ ); \line cout \'ab string \'ab endi; \line cin.width( 5 ); \line 23 return 0; \line 24 \line Digite uma frase: \line Este programa testa a fun\'e7\'e3o membro width \line Es te \line prog \line rama \line tes t \par
\lquote 4, \par
int w = 4; \line char string[ 10 ); \par
11 \line 12 \line 13 \line 14 \line 15 \line 16 \line 17 \line 18 \line 19 \line 20 \line 21 \line 22 \par
a \line a \line fun\'e7 \line ao \line memb \line ro \line widt \line h \par
Fig. 11.18 Demonstrando a fun\'e7\'e3o membro width. \par
656 C++ COMO PROGRAMAR \line 11.6.4 Manipuladores definidos pelo usu\'e1rio \line Os usu\'e1rios podem criar seus pr\'f3prios manipuladores de stream. A Fig. 11.19 mostra a cria\'e7\'e3o e uso dos novos manipuladores de stream beli, ret (retorno de carro). tab e endLine. Os usu\'e1rios tamb\'e9m podem criar seus pr\'f3prios manipuladores de stream parametrizados consulte os manuais de sua instala\'e7\'e3o para instru\'e7\'f5es sobre como faz\'ea-lo. \line 1 II Fig. 11.19: figll_19.cpp \line 2 // Criando e testando manipuladores de strealTL \line 3 II n\'e3o-parametrizados, definidos pelo usu\'e1rio. \line 4 #include <iostream> \line 5 \line 6 using std: :ostream; \line 7 using std::cout; \line 8 using std::flush; \line 9 \line 10 // manipulador bell (usando a sequ\'eancia de escape \\a) \line 11 ostream& bell( ostream& output ) \{ return output \'ab \\a\rquote ; \line 12 \line 13 // manipulador ret (usando a seq\'fc\'eancia de escape \\r) \line 14 ostream& ret( ostream& output ) \{ return output \'ab \lquote\\r\rquote ; \line 15 \line 16 II manipulador tab (usando a seq\'fc\'eancia de escape \\t) \line 17 ostream& tab( ostream& output ) \{ return output \'ab \lquote\\t\rquote ; \line 18 \line 19 II manipulador endLine (usando a seq\'fc\'eancia de escape \\n \line 20 // e a fun\'e7\'e3o membro flush) \line 21 ostream& endLine( ostream& output \line 22 \line 23 return output \'ab \lquote\\n\rquote  \'ab flush; \line 24 \line 25 \line 26 int main() \line 27 \line 28 cout \'ab \ldblquote Testando o manipulador tab:\rdblquote  \'ab endLine \line 29 \'ab \lquote a\rquote  \'ab tab \'ab \lquote b\rquote  \'ab tab \'ab \lquote c\rquote  \'ab endLine \line 30 \'ab \ldblquote Testando os manipuladores ret e beli:\rdblquote  \line 31 \'ab endLine \'ab \line 32 cout \'ab bell; \line 33 cout \'ab ret \'ab \ldblquote -\lquote  \'ab endLine; \line 34 return 0; \line 35 \line Testando o manipulador tab: \line a b c \line Testando os manipuladores ret e bell: \line Fig. 11.19 Criando e testando manipuladores de stream n\'e3o-parametrizados definidos pelo usu\'e1rio. \line 11.7 Estados de formato do stream \line V\'e1rios indicadores de formato especificam os tipos de formata\'e7\'e3o a serem executados durante as opera\'e7\'f5es de EI S com streams. As fun\'e7\'f5es membro setf, unsetf e flags controlam as defini\'e7\'f5es destes indicadores. \par
CAP\'cdTULO li - ENTRADA/SA\'cdDA COM STREAMS EM C++ 657 \line 11.7.1 Indicadores de estado de formato \line Cada um dos indicadores de estado de formato mostrados na Fig. 11.20 (e alguns que n\'e3o s\'e3o mostrados) \'e9 definido como uma enumera\'e7\'e3o na classe ios e explicado nas pr\'f3ximas se\'e7\'f5es. \par
[ Indicador de estado de formato Descri\'e7\'e3o \par
ios: skipws Ignora espa\'e7os em branco em um stream de entrada. \line ios: left Justifica \'e0 esquerda a sa\'edda em um campo. Caracteres de preenchimento \line aparecem \'e0 direita, se necess\'e1rio. \line ios: right Justifica \'e0 direita a sa\'edda em um campo. Caracteres de preenchimento \line aparecem \'e0 esquerda, se necess\'e1rio. \line ios: internal Indica que o sinal de um n\'famero deve ser alinhado \'e0 esquerda em um \line campo e a magnitude do n\'famero deve ser alinhada \'e0 direita nesse mes m campo (i.e., caracteres de preenchimento aparecem entre o sinal e o \line n\'famero). \line ios: : dec Especifica que inteiros devem ser tratados como valores decimais (base \line 10). \line ios: : oct Especifica que inteiros devem ser tratados como valores octais (base 8). \line ios: hex Especifica que inteiros devem ser tratados como valores hexadecimais \line (base 16). \line ios: showbase Especifica que a base de um n\'famero deve ser mostrada \'e0 frente do n\'fa mer na sa\'edda (um o \'e0 esquerda para octais; um Ox ou OX para \line hexadecimais). \line ios: : showpoint Especifica que n\'fameros em ponto flutuante devem ser mostrados na sa \'edd com um ponto decimal. Isto \'e9 normalmente usado com ios: fixed \line para garantir um certo n\'famero de d\'edgitos \'e0 direita do ponto decimal. \line ios: : uppercase Especifica que letras mai\'fasculas (i.e., X e A at\'e9 F) devem ser usadas nos \line inteiros hexadecimais e que E mai\'fasculo deve ser usado ao se represen ta um valor em ponto flutuante na nota\'e7\'e3o cient\'edfica. \line ios: : showpos Especifica que n\'fameros positivos e negativos devem ser precedidos por \line um sinal + ou -, respectivamente. \line ios: : scientific Especifica que a sa\'edda de um valor em ponto flutuante deve ser mostrada \line na nota\'e7\'e3o cient\'edfica. \line ios: : fixed Especifica que a sa\'edda de um valor em ponto flutuante deve ser mostrada \line na nota\'e7\'e3o de ponto fixo, com o n\'famero especificado de d\'edgitos \'e0 direita \line do ponto decimal. \line Fig.11.20 Indicadores de estado de formato. \line Estes indicadores podem ser controlados pelas fun\'e7\'f5es membro flags, setf e unsetf, mas muitos programadores de C++ preferem usar manipuladores de streams (ver Se\'e7\'e3o 11.7.8). O programador poder usar a opera\'e7\'e3o \ldblquote ou\rdblquote  sobre bits, 1, para combinar v\'e1rias op\'e7\'f5es em um \'fanico valor long (ver Fig. 11.23). Chamar a fun\'e7\'e3o membro flags para um stream e especificar as op\'e7\'f5es combinadas atrav\'e9s de um \ldblquote ou\rdblquote  define as novas op\'e7\'f5es para aquele streum e retorna um valor long contendo as op\'e7\'f5es anteriores. Este valor freq\'fcentemente \'e9 salvo, para que flags possa ser chamada com o valor salvo para restabelecer as op\'e7\'f5es anteriores para o stream. \line A fun\'e7\'e3o flags deve especificar um \'fanico valor que represente as defini\'e7\'f5es de todos os indicadores. A \line fun\'e7\'e3o setf de um argumento, por outro lado, especifica um ou mais indicadores combinados atrav\'e9s de \ldblquote ou\rdblquote  e faz o \ldblquote ou\rdblquote  deles com as defini\'e7\'f5es de indicadores j\'e1 existentes, para formar um novo estado de formato. \par
658 C++ COMO PROGRAMAR \line O manipulador de stream parametrizado setiosflags executa as mesmas fun\'e7\'f5es que a fun\'e7\'e3o membro setf. O manipulador de stream resetiosflags executa as mesmas fun\'e7\'f5es que a fun\'e7\'e3o membro unsetf. Para usar qualquer um destes manipuladores de stream, n\'e3o esque\'e7a de incluir <iomanip> em seu programa. \line O indicador skipws indica que \'bb deve ignorar espa\'e7os em branco em um stream de entrada. O comportamento default de \'bb \'e9 ignorar espa\'e7os em branco. Para mudar isto, use a chamada unsetf (ios: : skipws) . O manipulador de stream ws tamb\'e9m pode ser usado para especificar que espa\'e7os em branco devem ser ignorados. \line 11.7.2 Zeros \'e0 direita e pontos decimais (ios: : showpoint) \line O indicador showpoint \'e9 inicializado para for\'e7ar um niimero em ponto flutuante a ser mostrado na sa\'edda com seu ponto decimal e zeros \'e0 direita. Um valor em ponto flutuante de 79 \'bb O ser\'e1 impresso como 79 se showpoint n\'e3o estiver inicializado e como 79.000000 (ou tantos zeros \'e0 direita quanto os especificados pela precis\'e3o atual) com showpoint inicializado. O programa na Fig. 11.21 mostra o uso da fun\'e7\'e3o membro setf para inicializar o indicador showpoint para controlar os zeros \'e0 direita e a impress\'e3o do ponto decimal para valores de ponto flutuante. \line 1 II Fig. 11.21: figll2l.cpp \line 2 II Controlando a impress\'e3o de zeros \'e0 direita e de \line 3 II pontos decimais para valores em ponto flutuante. \line 4 #include <iostream> \line 5 \line 6 using std: :cout; \line 7 using std::endl; \line 8 \line 9 #include <iomanip> \line 10 \line 11 using std: :ios; \line 12 \line 13 int main() \line 14 \line 15 cout \'ab \ldblquote Antes de ajustar o indicador ios::showpoint\\n\rdblquote  \line 16 \'ab \ldblquote 9.9900 \'e9 impresso como: \ldblquote  \'ab 9.9900 \line 17 \'ab \ldblquote\\n9.9000 \'e9 impresso como: \ldblquote  \'ab 9.9000 \line 18 \'ab \lquote\\n9.0000 \'e9 impresso como: \ldblquote  \'ab 9.0000 \line 19 \'ab \ldblquote\\n\\nDepois de ajustar o indicador ios::showpoint\\n\rdblquote ; \line 20 cout.setf( ios::showpoint ); \line 21 cout \'ab \ldblquote 9.9900 \'e9 impresso como: \ldblquote  \'ab 9.9900 \line 22 \'ab \ldblquote\\n9.9000 \'e9 impresso como: \ldblquote  \'ab 9.9000 \line 23 \'ab \ldblquote\\n9.0000 \'e9 impresso como: \ldblquote  \'ab 9.0000 \'ab endi; \line 24 return 0; \line 25 \} \par
Fig. 11.21 Controlando a impress\'e3o de zeros \'e0 direita e de pontos decimais com valores float. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx685\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1094\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5009\pard\intbl Antes \cell de \cell ajustar o indicador ios::showpoint \cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx685\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx1094\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx2079\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3832\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5009\pard\intbl 9.9900 \cell\'e9 \cell impresso \cell como: 9.99 \cell\cell\row
\intbl 9.9000 \cell\'e9 \cell impresso \cell como: 9.9 \cell\cell\row
\intbl 9.0000 \cell\'e9 \cell impresso \cell como: 9 \cell\cell\row
\intbl Depois \cell de \cell ajustar \cell o indicador ios: \cell :showpoint \cell\row
\intbl 9.9900 \cell\'e9 \cell impresso \cell como: 9.99000 \cell\cell\row
\intbl 9.9000 \cell\'e9 \cell impresso \cell como: 9.90000 \cell\cell\row
\intbl 9.0000 \cell\'e9 \cell impresso \cell como: 9.00000 \cell\cell\row
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 659 \line 11.7.3 Alinhamento (ios: :left, ios: :right, ios: :internal) \line Os indicadores left e right possibilitam que campos sejam alinhados (oujustificados) \'e0 esquerda com caracteres de preenchimento \'e0 direita, ou alinhados \'e0 direita com caracteres de preenchimento \'e0 esquerda, respectivamente. O caractere a ser usado para preenchimento \'e9 o especificado pela fun\'e7\'e3o membro Liii ou pelo manipulador de stream parametrizado setfiiJ. (veja a Se\'e7\'e3o 11.7.4). A Fig. 11.22 mostra o uso dos manipuladores setw, setiosflags e resetiosfJ.ags e das fun\'e7\'f5es membro setf e unsetf para controlar o alinhamento de dados inteiros \'e0 esquerda e \'e0 direita em um campo. \line 1 // Fig. 11.22: figll22.cpp \line 2 // Alinhamento \'e0 esquerda e alinhamento \'e0 direita. \line 3 #include <iostream> \line 4 \line 5 using std: :cout; \line 6 using std: :endl; \line 7 \line 8 #include <iomanip> \line 9 \line 10 using std::ios; \line 11 using std::setw; \line 12 using std: :setiosflags; \line 13 using std::resetiosflags; \line 14 \line 15 int main() \line 16 \line 17 int x = 12345; \line 18 \line 19 cout \'ab \ldblquote O default \'e9 justificado \'e0 direita:\\n\rdblquote  \line 20 \'ab setw(10) \'ab x \'ab \ldblquote\\n\\nUSANDO FUN\'c7\'d5ES MEMBRO\rquote  \line 21 \'ab \ldblquote\\nUsa setf para ajustar ios::left:\\n\rdblquote  \'ab setw(10); \line 22 \line 23 cout.setf( ios::left, ios::adjustfield ); \line 24 cout \'ab x \'ab \ldblquote\\nUsa unsetf para restaurar default:\\n\rdblquote ; \line 25 cout.unsetf( ios::left ); \line 26 cout \'ab setw( 10 ) \'ab x \line 27 \'ab \ldblquote\\n\\nUSANDO MANIPULADORES DE STREAM PARAMETRIZADOS\rdblquote  \line 28 \'ab \ldblquote\\nUsa setiosfiags para ajustar ios::ieft:\\n\rdblquote  \line 29 \'ab setw( 10 ) \'ab setiosflags( ios::left ) \'ab x \line 30 \'ab \\nUsa resetiosflags para restaurar default:\\n\rdblquote  \line 31 \'ab setw( 10 ) \'ab resetiosflags( ios::left \line 32 \'ab x \'ab endl; \line 33 return 0; \line 34 ) \line O default \'e9 justificado \'e0 direita: \line 12345 \line USANDO FUN\'c7\'d5ES MEMBRO \line Usa setf para ajustar ios::left: \line 12345 \line Usa unsetf para restaurar defauit: \line 12345 \line USANDO MANIPULADORES DE STREAM PARAMETRIZADOS \line Usa setiosflags para ajustar ios::left: \line 12345 \line Usa resetiosflags para restaurar default: \line 12345 \line Fig. 11.22 Alinhamento \'e0 esquerda e alinhamento \'e0 direita. \par
660 C++ COMO PROGRAMAR \line O indicador internal indica que o sinal de um n\'famero (ou a base, quando o indicador ios: : showbase est\'e1 inicializado; veja a Se\'e7\'e3o 11.7.5) deve ser alinhado \'e0 esquerda dentro de um campo, a magnitude do n\'famero deve ser alinhada \'e0 direita e os espa\'e7os intervenientes devem ser preenchidos com o caractere de enchimento. Os indicadores left, right e internal est\'e3o contidos no membro de dados est\'e1tico ios: : adjustfield. O argumento ios: : adjustfield deve ser fornecido como o segundo argumento para setf ao se inicializar os indicadores de alinhamento left. right ou internal. Isto possibilita a setf garantir que somente um dos tr\'eas indicadores de alinhamento \'e9 inicializado (eles s\'e3o mutuamente exclusivos). A Fig. 11.23 mostra o uso dos manipuladores de stream setiosflags e setw para especificar espa\'e7amento interno. Note o uso do indicador ios: : showpos para for\'e7ar a impress\'e3o do sinal de mais. \line 1 II Fig. 11.23: figll_23.cpp \line 2 // Imprimindo um inteiro com espa\'e7amento \line 3 // interno e for\'e7ando o sinal de mais. \line 4 #include <iostream> \line 5 \line 6 using std: :cout; \line 7 using std: :endl; \line 8 \line 9 #include <iomanip> \line 10 \line 11 using std::ios; \line 12 using std: :setiosflags; \line 13 using std::setw; \line 14 \line 15 int main() \line 16 \line 17 cout \'ab setiosflags( ios::internal 1 ios::showpos \line 18 \'ab setw( 10 ) \'ab 123 \'ab endl; \line 19 return 0; \line 20 \} \par
+ 123 \par
Fig. 11.23 Imprimindo um inteiro com espa\'e7amento interno e for\'e7ando o sinal de mais. \line 11.7.4 Preenchimento (fill, setfill) \line Afun\'e7\'e3o membro fill especifica o caractere de enchimento a ser usado com campos justificados; se nenhum valor for especificado, s\'e3o usados espa\'e7os para o preenchimento. A fun\'e7\'e3o fili retorna o caractere de preenchimento anterior. O manipulador setfill tamb\'e9m inicializa o caractere de preenchimento. A Fig. 11.24 demonstra o uso da fun\'e7\'e3o membro fill e do manipulador setfill para controlar a defini\'e7\'e3o e redefini\'e7\'e3o do caractere de enchimento. \par
Fig. 11.24 Usando a fun\'e7\'e3o membro fill e o manipulador setfill para mudar o caractere de preenchimento para campos maiores do que os valores que est\'e3o sendo impressos (parte 1 de 2). \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx205\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3463\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5233\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5930\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7107\pard\intbl 1 \cell II Fig. 11.24: figll_24.cpp \cell\cell\cell\cell\row
\intbl 2 \cell // Usando a fun\'e7\'e3o membro fill e \cell o manipulador \cell\cell\cell\row
\intbl 3 \cell // setfill para mudar o caractere \cell de preenchimento \cell\cell\cell\row
\intbl 4 \cell // para campos maiores do que os \cell valores que est\'e3o \cell sendo \cell impressos. \cell\row
\intbl 5 \cell #include <iostream> \cell\cell\cell\cell\row
\intbl 6 \cell\cell\cell\cell\cell\row
\intbl 7 \cell using std::cout; \cell\cell\cell\cell\row
\intbl 8 \cell using std::endl; \cell\cell\cell\cell\row
\pard\par
\pard\sb100\sa240 660 C++ CoMo PROGRAMAR \par
O indicador internal indica que o sinal de um n\'famero (ou a base, quando o indicador ios: : showbase est\'e1 inicializado; veja a Se\'e7\'e3o 11.7.5) deve ser alinhado \'e0 esquerda dentro de um campo, a magnitude do n\'famero deve ser alinhada \'e0 direita e os espa\'e7os intervenientes devem ser preenchidos com o caractere de enchimento. Os indicadores left, right e internal est\'e3o contidos no membro de dados est\'e1tico ios: adustfie1d. O argumento jos: : adustfield deve ser fornecido como o segundo argumento para setf ao se inicializar os indicadores de alinhamento left, right ou internal. Isto possibilita a setf garantir que somente um dos tr\'eas indicadores de alinhamento \'e9 inicializado (eles s\'e3o mutuamente exclusivos). A Fig. 11.23 mostra o uso dos manipuladores de stream set\'edosflags e setw para especificar espa\'e7amento interno. Note o uso do indicador ios: : showpos para for\'e7ar a impress\'e3o do sinal de mais. \par
1 1/ Fig. 11.23: figll_23.cpp \line 2 // Imprimindo um inteiro com espa\'e7amento \line 3 /1 interno e for\'e7ando o sinal de mais. \line 4 #include <iostreani> \par
5 \par
6 using std::cout; \line 7 using std::endl; \par
8 \par
9 #include <iomanip> \line 10 \par
11 us\'edng std: :ios; \line 12 using std::setiosflags; \line 13 using std::setw; \par
14 \par
int main() \par
\{ \par
1 \par
cout \'ab setiosflags( ios::internal 1 ios::showpos \'ab setw( 10 ) \'ab 123 \'ab endl; \line return 0; \par
Fig. 11.24 Usando a fun\'e7\'e3o membro fill e o manipulador setf\'edll para mudar o caractere de preenchimento para campos maiores do que os valores que est\'e3o sendo impressos (parte 1 de 2). \par
15 \line 16 \line 17 \line 18 \line 19 \line 20 \par
+ 123 \par
Fig. 11.23 imprimindo um inteiro com espa\'e7amento interno e for\'e7ando o sinal de mais. \line 11.7.4 Preenchimento (f iii, setf iii) \line Afun\'e7\'e3o membro fi 11 especifica o caractere de enchimento a ser usado com campos justificados; se nenhum valor for especificado, s\'e3o usados espa\'e7os para o preenchimento. A fun\'e7\'e3o f iii retorna o caractere de preenchimento anterior. O manipulador setfill tamb\'e9m inicializa o caractere de preenchimento. A Fig. 11.24 demonstra o uso da fun\'e7\'e3o membro f ii]. e do manipulador setfill para controlar a defini\'e7\'e3o e redefini\'e7\'e3o do caractere de enchimento. \par
\pard\sb100\sa100 cO\'b0 \line se \line que sao \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx217\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx3880\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5825\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx6582\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx7879\pard\intbl 1 \cell 1/ Fig. 11.24: figll_24.cpp \cell\cell\cell\cell\row
\intbl 2 \cell // Usando a fun\'e7\'e3o membro fili e \cell o manipulador \cell\cell\cell\row
\intbl 3 \cell 1/ setf\'edll para mudar o caractere \cell de preenchimento \cell\cell\cell\row
\intbl 4 \cell /1 para campos maiores do que os \cell valores que est\'e3o \cell sendo \cell impressos. \cell\row
\intbl 5 \cell #include <iostream> \cell\cell\cell\cell\row
\intbl 6 \cell\cell\cell\cell\cell\row
\intbl 7 \cell using std::cout; \cell\cell\cell\cell\row
\intbl 8 \cell using std::endl; \cell\cell\cell\cell\row
\pard\par
\par
\pard\sb100\sa240 CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 661 \line 9 \line 10 #include <iomanip> \line 11 \line 12 using std::ios; \line 13 using std: :setw; \line 14 using std: :hex; \line 15 using std::dec; \line 16 using std::setfilJ.; \line 17 \line 18 int main() \line 19 ( \'ab \line 20 int x 10000; \line 21 \line 22 cout \'ab x \'ab \ldblquote  impresso como int justificado \'e0 direita e \'e0 esquerda\\n\rdblquote  \line 23 \'ab \ldblquote e como hex com justifica\'e7\'e3o interna.\\n\rdblquote  \line 24 \'ab Usando o caractere de preenchimento default (espa\'e7o) : \\n\rquote ; \line 25 cout.setf( ios::showbase ); \line 26 cout \'ab setw( 10 ) \'ab x \'ab \lquote\\ri; \line 27 cout.setf( ios::left, ios::adjustfield ); \line 28 cout \'ab setw( 10 ) \'ab x \'ab \\n\rquote ; \line 29 cout.setf( ios: :internal, ios: :adjustfield ); \line 30 cout \'ab setw( 10 ) \'ab hex \'ab x; \line 31 \line 32 cout \'ab \ldblquote\\n\\nUsando v\'e1rios caracteres de preenchimento:\\n; \line 33 cout.setf( ios::right, ios::adjustfield ); \line 34 cout.fill( \lquote *\lquote  \line 35 cout \'ab setw( 10 ) \'ab dec \'ab x \'ab \lquote\\n\rquote ; \line 36 cout.setf( ios::left, ios::adjustfield ); \line 37 cout \'ab setw( 10 ) \'ab setfill( \lquote % ) \'ab x \'ab \\n\rquote ; \line 38 cout.setf( ios::internal, ios::adjustfield ); \line 39 cout \'ab setw( 10 ) \'ab setfill( \lquote  ) \'ab hex \'ab x \'ab endi; \line 40 return 0; \line 41 \line 10000 impresso como int justificado \'e0 direita e \'e0 esquerda \line e como hez com justifica\'e7\'e3o interna. \line Usando o caractere de preenchimento default (espa\'e7o) \line 10000 \line 10000 \line Ox 2710 \line Usando v\'e1rios caracteres de preenchimento: \line *****10000 \line 10000%%%%% \line 0xAA271O \line Fig. 11.24 Usando a fun\'e7\'e3o membro fiJJ. e o manipulador setfill para mudar o caractere de preenchimento para campos maiores do que os valores que est\'e3o sendo impressos (parte 2 de 2). \line 11.7.5 Base do streamde inteiros (ios: :dec, ios: :oct, ios: :hex, ios: :showbase) \line O membro est\'e1tico ios: : basefield (usado de forma semelhante a ios: : adjustfield com setf) inclui os bits indicadores ios: : oct, ios: : hex e ios: dec para especificar que inteiros devem tratados como valores octais, hexadecimais e decimais, respectivamente. As inser\'e7\'f5es no stream s\'e3o, por default, decimais, se nenhum destes bits estiver \ldblquote Jigado\rdblquote . O default para extra\'e7\'f5es do s\'edream \'e9 processar os dados na forma em que s\'e3o fornecidos - inteiros come\'e7ando com O s\'e3o tratados como valores octais, inteiros que come\'e7am com Ox ou OX s\'e3o \par
\pard\par
\pard\sb100\sa100 662 C++ COMO PROGRAMAR \line tratados como valores hexadecimais, e todos os outros valores inteiros s\'e3o tratados como decimais. Uma vez que uma base particular tenha sido especificada para um stream, todos os inteiros naquele stream ser\'e3o processados com aquela base, at\'e9 uma nova base ser especificada, ou at\'e9 o fim do programa. \line Inicialize o indicador showbase para for\'e7ar a base de um valor inteiro a ser mostrada na sa\'edda. Os n\'fameros decimais s\'e3o mostrados na sa\'edda normalmente, n\'fameros octais s\'e3o mostrados na sa\'edda com um O \'e0 esquerda, e n\'fameros hexadecimais s\'e3o mostrados na sa\'edda com um Ox \'e0 esquerda ou um ox \'e0 esquerda (o indicador uppercase determina qual a op\'e7\'e3o escolhida; veja a Se\'e7\'e3o 11.7.7). A Fig. 11.25 demonstra o uso do indicador showbase para for\'e7ar que um inteiro seja impresso nos formatos decimal, octal e hexadecimal. \line 1 // Fig. 11.25: figll25.cpp \line 2 // Usando o indicador ios: :showbase \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::endl; \line 1 \line 8 #include <iomanip> \line 9 \line 10 using std::ios; \line 11 using std: :setiosflags; \line 12 using std::oct; \line 13 using std::hex; \line 14 \line 15 int main() \line 16 \{ \line 17 int x = 100; \line 18 \line 19 cout \'ab setiosflags( \line 20 \'ab \ldblquote Imprimindo inteiros precedidos por sua nase:\\n\rquote  \line 21 \'ab x \'ab \lquote\\n\rquote  \line 22 \'ab oct \'ab x \'ab \\n\rquote  \line 23 \'ab hex \'ab x \'ab endi; \line 24 return 0; \line 25 ) \line Imprimindo inteiros precedidos por sua base: \line 100 \line 0144 \line 0x64 \line Fig. 11.25 Usando o indicador ios: : showbase. \line 11.7.6 N\'fameros em ponto flutuante; nota\'e7\'e3o cient\'edfica (ios: : scientific, ios: : fixed) \line O indicador ios: : scientific e o indicador ios: : fixed est\'e3o contidos no membro de dados est\'e1tico \line ios: : floatfield (estes indicadores s\'e3o usados de maneira semelhante a ios: : adustfie1d e \line ios: : basefield em setf). Estes indicadores controlam o formato de sa\'edda dos n\'fameros em ponto flutuante. \line O indicador scientific for\'e7a a sa\'edda de um n\'famero em ponto flutuante no formato cient\'edfico. O indicador \line fixed for\'e7a um n\'famero em ponto flutuante a ser mostrado na sa\'edda com um n\'famero espec\'edfico de d\'edgitos (conforme especificado pela fun\'e7\'e3o membro precision) \'e0 direita do ponto decimal. Sem estes indicadores \ldblquote ligados\rdblquote . \line o valor do n\'famero em ponto flutuante determina o formato de sa\'edda. \line A chamada cout. setf (0, ios: : floatfield) restabelece o formato default para a sa\'edda de n\'fameros em ponto flutuante. A Fig. 11.26 demonstra a exibi\'e7\'e3o de n\'fameros em ponto flutuante, nos formatos fixo e cient\'edfi L \par
\pard\sb100\sa240 CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 663 \par
co, usando a setf de dois argumentos com ios: : floatfield. O formato do expoente em nota\'e7\'e3o cient\'edtica pode ser diferente de um compilador para outro. \line 1 II Fig. 11.26: figll26.cpp \line 2 II Exibindo valores em ponto flutuante nos \line 3 // formatos default do sistema, cient\'edfico e fixo. \line 4 #include <iostream> \line 5 \line 6 using std: :cout; \line 7 using std::endl; \line 8 using std::ios; \line 9 \line 10 int main() \line 11 \line 12 double x = .001234567, y = 1.946e9; \line 13 \line 14 cout \'ab \ldblquote Exibido no formato default:\\n\rdblquote  \line 15 \'ab x \'ab \lquote\\t\rquote  \'ab y \'ab \lquote\\n\rquote ; \line 16 cout.setf( ios::scientific, ios::floatfield ); \line 17 cout \'ab \ldblquote Exibido no formato cient\'edfico:\\n\rdblquote  \line 18 \'ab x \'ab \lquote\\t\rquote  \'ab y \'ab \lquote\\n\rquote ; \line 19 cout.unsetf( ios::scientific ); \line 20 cout \'ab \ldblquote Exibido no formato default ap\'f3s unsetf:\\n\rdblquote  \line 21 \'ab x \'ab \lquote\\t\rquote  \'ab y \'ab \lquote\\n\rquote ; \line 22 cout.setf( ios::fixed, ios::floatfield ); \line 23 cout \'ab \ldblquote Exibido no formato fixo:\\n\rdblquote  \line 24 \'ab x \'ab \lquote\\t\rquote  \'ab y \'ab endl; \line 25 return 0; \line 26 \line Exibido no formato default: \line 0.00123457 l.946e+009 \line Exibido no formato cient\'edfico: \line 1. 234567e-003 1. 946000e+009 \line Exibido no formato default ap\'f3s unsetf: \line 0.00123457 1.946e+009 \line Exibido no formato fixo: \line 0.001235 1946000000.000000 \line Fig. 11.26 Exibindo valores em ponto flutuante nos formatos default, cient\'edfico e fixo do sistema. \line 11.7.7 Controle de mai\'fasculas/min\'fasculas (ios: : uppercase) \line O indicador ios: : uppercase for\'e7a a sa\'edda de uma letra mai\'fascula X ou E com inteiros hexadecimais ou com valores em ponto flutuante na nota\'e7\'e3o cient\'edfica, respectivamente (Fig. 11.27). Quando inicializado, o indicador ios: : uppercase faz com que todas as letras em um valor hexadecimal sejam mai\'fasculas. \line 1 // Fig. 11.27: figll27.cpp \line 2 // Usando o indicador ios: :uppercase \line 3 #include <iostream> \line 4 \line 5 using std: :cout; \line 6 using std: :endl; \par
Fig. 11.27 Usando o indicador ios: : uppercase (parte 1 de 2). \par
664 C++ COMO PROGRAMAR \line 7 \line 8 #include <iomanip> \line 9 \line 10 using std::setiosflags; \line 11 using std::ios; \line 12 using std::hex; \line 13 \line 14 int main() \line 15 \{ \line 16 cout \'ab setiosflags( ios::uppercase \line 17 \'ab \ldblquote Imprimindo letras mai\'fasculas em expoentes na\\n\rdblquote  \line 18 \'ab \ldblquote nota\'e7\'e3o cient\'edfica e em valores hexadecimais:\\n\rdblquote  \line 19 \'ab 4.345e10 \'ab \lquote\\n\rquote  \'ab hex \'ab 123456789 \'ab endi; \line 20 return 0; \line 21 \} \line Imprimindo letras mai\'fasculas em expoentes na \line nota\'e7\'e3o cient\'edfica e em valores hexadecimais: \line 4. 345E+010 \line 75BCD15 \line Fig. 11.27 Usando o indicador ios: :uppercase (parte 2 de 2). \line 11.7.8 Inicializando e reinicializando os indicadores de formato (flags. setiosflags. \line resetiosflags) \line A fun\'e7\'e3o membro flags sem um argumento simplesmente retorna (como um valor long) as defini\'e7\'f5es atuais dos indicadores de formato. A fun\'e7\'e3o membro flags com um argumento long inicializa os indicadores de formato conforme especificado pelo argumento e retorna as defini\'e7\'f5es anteriores dos indicadores. Quaisquer indicadores de formato n\'e3o-especificados no par\'e2metro s\'e3o \ldblquote desligados\rdblquote . Note que as defini\'e7\'f5es iniciais dos indicadores podem diferir para cada sistema, O programa da Fig. 11.28 demonstra o uso da fun\'e7\'e3o membro flags para inicializar um novo estado de formato e salvar o estado de formato anterior e, depois, restaurar as defini\'e7\'f5es de formatos originais. \line 1 II Fig. 11.28: figll_28.cpp \line 2 // Demonstrando a fun\'e7\'e3o membro flags. \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std::endl; \line 7 using std::ios; \line 8 \line 9 \line 10 int main() \line 11 \{ \line 12 int i = 1000; \line 13 double d = 0.0947628; \line 14 \line 15 cout \'ab \ldblquote O valor da vari\'e1vel flags \'e9: \line 16 \'ab cout.flags() \line 17 \'ab \lquote\\nlmprime int e double no formato original:\\n\rdblquote  \line 18 \'ab i \'ab \lquote\\t\rquote  \'ab d \'ab \ldblquote\\n\\n\rdblquote ; \line 19 long originalFormat = \line 20 cout.flags( ios::oct ios::scientific ); \line 21 cout \'ab \ldblquote O valor da vari\'e1vel flags \'e9: \line Fig. 11.28 Demonstrando a fun\'e7\'e3o membro flags (parte 1 de 2). \par
CAP\'cdTULO li - ENTRADA/SAIDA COM STREAMS EM C\'f7\'f7 665 \par
1 \par
22 \'ab cout.flags() \line 23 \'ab \\nlmprime int e double em um novo formato\\n\rdblquote  \line 24 \'ab especificado usando a fun\'e7\'e3o membro flags:\\n\rdblquote  \line 25 \'ab i \'ab \lquote\\t\rquote  \'ab d \'ab \ldblquote\\n\\n\rdblquote ; \line 26 cout.flags( originalFormat ); \line 27 cout \'ab O valor da vari\'e1vel flags \'e9: \line 28 \'ab cout.flags() \line 29 \'ab \ldblquote\\nlmprime int e double novamente no \line 30 \'ab i \'ab \lquote\\t\rquote  \'ab d \'ab endi; \line 31 return 0; \line 32 \par
Fig. 11.28 Demonstrando a fun\'e7\'e3o membro flags (parte 2 de 2). \line A fun\'e7\'e3o membro setf inicializa os indicadores de formato fornecidos em seu argumento e retorna as defini\'e7\'f5es anteriores dos indicadores como um valor long, como em \line long previousFlagSettings = \line cout.setf( ios: :showpoint 1 ios: :showpos ); \line A fun\'e7\'e3o membro setf com dois par\'e2metros long, como em \line cout.setf( ios: :left, ios: :adjustfield ); \line primeiro \ldblquote limpa\rdblquote  os bits de ios: : adjustfield e depois inicializa o indicador ios: : left. Esta vers\'e3o de setf \'e9 usada com os campos de bits associados com ios: : basef ield (representados por ios: : dec, ios: : oct e ios: :hex), ios: :floatfield (representados por ios: :scientific e ios: :fixed) e ios: : adjustfield (representados por ios:: left, ios: : right e ios: : internal). \line A fun\'e7\'e3o membro unsetf reinicializa os indicadores especificados e retorna o valor dos indicadores antes \line de serem reinicializados. \line 11.8 Estados de erro do stream \line O estado de um stream pode ser testado atrav\'e9s de bits da classe ios - a classe base para as classes istreain. ostream e iostream que estamos usando para EIS. \line O eofbit \'e9 \ldblquote ligado\rdblquote  para um stream de entrada quando \'e9 encontrado o fim de arquivo. Um programa pode \line usar a fun\'e7\'e3o membro eof para determinar se o fim de arquivo foi encontrado em um stream depois de uma \line tentativa de extrair dados al\'e9m do fim do stream. A chamada \line cin.eof O \par
formato original: \\n\rdblquote  \par
er \par
:15 \line ro \par
as \par
retorna verdadeiro se o fim de arquivo foi encontrado em cm e falso caso contr\'e1rio. \par
\pard\par
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5005\clbrdrt\brdrw15\brdrs\clbrdrl\brdrw15\brdrs\clbrdrb\brdrw15\brdrs\clbrdrr\brdrw15\brdrs \cellx5241\pard\intbl O valor da vari\'e1vel flags \'e9: O \cell\cell\row
\intbl Imprime int e double no formato original: \cell\cell\row
\intbl 1000 0.0947628 \cell\cell\row
\intbl O valor da vari\'e1vel flags \'e9: 4040 \cell\cell\row
\intbl Imprime int e double em um novo formato \cell\cell\row
\intbl especificado usando a fun\'e7\'e3o membro flags: \cell\cell\row
\intbl 1750 9.476280e-002 \cell\cell\row
\intbl O valor da vari\'e1vel flags \'e9: O \cell\cell\row
\intbl Imprime int e double novamente no formato original: \cell\cell\row
\intbl 1000 0.0947628 \cell\cell\row
\pard\par
\pard\sb100\sa240 666 C++ COMO PROGRAMAR \line O failbit \'e9 \ldblquote ligado\rdblquote  para um siream quando um erro de formato acontece no stream. Por exemplo, ocorre um erro de formato quando o programa est\'e1 lendo inteiros e um caractere diferente de d\'edgito \'e9 encontrado no stream de entrada. Quando ocorre um erro como este, os caracteres n\'e3o s\'e3o perdidos. A fun\'e7\'e3o membro fail informa se uma opera\'e7\'e3o de stream falhou; normalmente \'e9 poss\'edvel se recuperar tais erros. \line O badbit \'e9 \ldblquote ligado\rdblquote  para um stream quando acontece um erro que resulta na perda de dados. A fun\'e7\'e3o membro bad informa se uma opera\'e7\'e3o de stream falhou. Tais erros s\'e9rios normalmente n\'e3o s\'e3o recuper\'e1veis. \line O goodbit \'e9 \ldblquote ligado\rdblquote  para um stream se nenhum dos bits eofbit. failbit ou badbit est\'e3o \ldblquote ligados\rdblquote  para o stream. \line A fun\'e7\'e3o membro good retorna true se as fun\'e7\'f5es bad, fail e eof retornaram false. As opera\'e7\'f5es de EIS somente devem ser executadas em streams com o estado \ldblquote bom\rdblquote , ou seja, com o goodbit \ldblquote ligado\rdblquote . \line A fun\'e7\'e3o membro rdstate retorna o estado de erro do stream. Uma chamada cout. rdstate. por exempio, retornaria o estado do stream, que poderia ent\'e3o ser testado por um comando switch que examinaria ios: :eofbit, ios: :badbit, ios: : failbit e ios: :goodbit. O meio preferido detestar o estado de \line um stream \'e9 usar as fun\'e7\'f5es membro eof, bad, fail e good - usar estascfun\'e7\'f5es n\'e3o exige que o programador esteja familiarizada com bits de estado particulares. \line A fun\'e7\'e3o membro clear \'e9 normalmente usada para restabelecer o estado de um stream para \ldblquote bom\rdblquote , de forma que a E/S possa continuar naquele stream. O argumento defauit para clear \'e9 ios: : goodbit, de modo que o comando \line cin.clearO; \line limpa cm e \ldblquote liga\rdblquote  goodbit para o stream. O comando \line cin.clear( ios::failbit \line inicializa o failbit. O usu\'e1rio pode querer fazer isto quando estiver executando uma entrada com cm com um tipo definido pelo usu\'e1rio e encontrar um problema. O nome clear parece impr\'f3prio neste contexto, mas \'e9 correto. \line O programa da Fig. 11.29 ilustra ouso das fun\'e7\'f5es membro rdstate, eof, fail. bad. good e clear. Nota: os valores realmente exibidos podem variar de um compilador para outro. \line 1 II Fig. 11.29: figll_29.cpp \line 2 // Testando estados de erro. \line 3 #include <iostream> \line 4 \line 5 using std::cout; \line 6 using std: :endl; \line 7 using std::cin; \line 8 \line 9 int main() \line 10 \line 11 int x; \line 12 cout \'ab \ldblquote Antes de uma opera\'e7\'e3o de entrada com problema: \line 13 \'ab \ldblquote\\ncin.rdstate(): \ldblquote  \'ab cin.rdstate() \line 14 \'ab \ldblquote\\n cin.eof O: \ldblquote  \'ab cin.eof O \line 15 \'ab \ldblquote\\n cin.fail() : \ldblquote  \'ab cin.fail() \line 16 \'ab \ldblquote\\n cin.badO: \ldblquote  \'ab cin.bad() \line 17 \'ab \ldblquote\\n cin.goodO: \ldblquote  \'ab cin.good() \line 18 \'ab \ldblquote\\n\\nEspera receber um inteiro, mas digite um caractere: \line 19 cm \'bb x; \line 20 \line 21 cout \'ab \ldblquote\\nAp\'f3s uma opera\'e7\'e3o de entrada com problema:\rdblquote  \line 22 \'ab \ldblquote\\ncin.rdstateO: \ldblquote  \'ab cin.rdstate() \line Fig. 11.29 Testando estados de erro (parte 1 de 2). \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C+\'f7 667 \line 23 \'ab \lquote\\n cin.eof: \ldblquote  \'ab cin.eof O \line 24 \'ab \ldblquote\\n cin.fail() : \ldblquote  \'ab cin.fail() \line 25 \'ab \lquote\\n cin.badO: \ldblquote  \'ab cin.bad() \line 26 \'ab \\n cin.good() : \lquote  \'ab cin.good() \'ab \ldblquote\\n\\n\rdblquote ; \line 27 \line 28 cin.clearO; \line 29 \line 30 cout \'ab \ldblquote Ap\'f3s cin.clearO\rdblquote  \line 31 \'ab \ldblquote\\ncin.failO: \ldblquote  \'ab cin.fail() \line 32 \'ab \ldblquote\\ncin.goodO: \ldblquote  \'ab cin.good() \'ab endl; \line 33 return 0; \line 34 \line ia \line le Antes de uma opera\'e7\'e3o de entrada com problema: \line cin.rdstateO: O \line cin.eofO: O \line le cin.failO: O \line lo cin.bad() : O \line cin.goodO: 1 \line Espera receber um inteiro, mas digite um caractere: A \line Ap\'f3s uma opera\'e7\'e3o de entrada com problema: \line cin.rdstateO: 2 \line cin.eof: O \line cin.failO: 1 \line cin.badO: O \line cin.goodO: O \line Ap\'f3s cin.clear() \line cin.failO: O \line cin.good(): 1 \line Fig. 11.29 Testando estados de erro (parte 2 de 2). \line A fun\'e7\'e3o membro operator! retorna true se ou o badbit est\'e1 \ldblquote ligado\rdblquote , ou o failbit est\'e1 \ldblquote ligado\rdblquote  ou ambos est\'e3o \ldblquote ligados\rdblquote . A fun\'e7\'e3o membro operador void* retorna false (O) se ou o badbit est\'e1 \ldblquote ligado\rdblquote , ou o failbit est\'e1 \ldblquote ligado\rdblquote  ou ambos est\'e3o \ldblquote ligados\rdblquote . Essas fun\'e7\'f5es s\'e3o \'fateis no processamento de arquivos, quando uma condi\'e7\'e3o verdadeiro/falso est\'e1 sendo testada sob o controle de uma estrutura de sele\'e7\'e3o ou de uma estrutura de repeti\'e7\'e3o. \line 11.9 Vinculando um stream de sa\'edda a um stream de entrada \line Aplicativos interativos envolvem geralmente um istream para entrada e um ostream para sa\'edda. Quando a mensagem de prompt aparece na tela, o usu\'e1rio responde digitando os dados apropriados. Obviamente, o prompt precisa aparecer antes de a opera\'e7\'e3o de entrada ocorrer. Com a buiferiza\'e7\'e3o da sa\'edda, os dados de sa\'edda aparecem somente quando o buffer encher, quando a sa\'edda for esvaziada explicitamente pelo programa ou, automaticamente, no fim do programa. C++ fornece a fun\'e7\'e3o membro tie para sincronizar (i.e., \ldblquote amarrar uma \'e0 outra\rdblquote ) a opera\'e7\'e3o de um istream e um ostream. para garantir que a sa\'edda apare\'e7a antes de sua subseq\'fcente entrada. A chamada \line cin.tie( &cout ); \line amarra cout (um ostream) a cm (um istream). Na realidade, esta chamada em particular \'e9 redundante. porque C++ executa esta opera\'e7\'e3o automaticamente para criar um ambiente padr\'e3o de entrada/sa\'edda do usu\'e1rio. O \par
668 C++ COMO PROGRAMAR \line usu\'e1rio, contudo, amarra explicitamente entre si outros pares de istream/ostream. Para desamarrar um stream \line de entrada, inputStream. de um stream de sa\'edda, use a chamada \line inputStream.tie( O ); \line Resumo \line As opera\'e7\'f5es de EIS s\'e3o executadas de uma maneira sens\'edvel ao tipo dos dados. \line\bullet  A E/S em C++ acontece em streams de bytes. Um stream \'e9 simplesmente uma seq\'fc\'eancia de bytes. \line Os mecanismos de E/S do sistema movem bytes dos dispositivos para a mem\'f3ria e vice-versa, de uma maneira eficiente e confi\'e1vel. \line C++ fornece recursos de EIS \ldblquote de baixo n\'edvel\rdblquote  e \ldblquote alto n\'edvel\rdblquote . Os recursos de EIS de baixo n\'edvel especificam que um certo n\'famero de bytes deve ser transferido de um dispositivo para a mem\'f3ria ou da mem\'f3ria para um dispositivo. A E/S de alto \line n\'edvel \'e9 executada com bytes agrnpados em unidades com significado, tais como inteiros, n\'fameros em ponto flutuante, caracteres, strings e tipos definidos pelo usu\'e1rio. \line\bullet  C++ fornece tanto opera\'e7\'f5es de E/S n\'e3o-formatadas como formatadas. As transfer\'eancias de E/S n\'e3o-formatadas s\'e3o r\'e1pidas, mas processam dados brutos dif\'edceis para as pessoas usarem. A E/S formatada de dados processa os mesmos em unidades com significado, mas exige tempo de processamento extra que pode impactar negativamente transfer\'eancias de grandes volumes de dados. \line\bullet  A maioria dos programas em C++ incluem o arquivo de cabe\'e7alho <iostream>, que declara todas as opera\'e7\'f5es de EIS com streams. \line\bullet  O cabe\'e7alho <iomanip> declara a entrada/sa\'edda formatada com manipuladores de streams parametrizados. \line\bullet  O cabe\'e7alho <fstream> declara as opera\'e7\'f5es de processamento de arquivos. \line\bullet  A classe istream suporta as opera\'e7\'f5es de entrada com streams. \line\bullet  A classe ostream suporta as opera\'e7\'f5es de sa\'edda com streams. \line\bullet  A classe iostream suporta tanto opera\'e7\'f5es de entrada com streams como a sa\'edda com streams. \line\bullet  A classe istream e a classe ostream s\'e3o derivadas por heran\'e7a simples da classe base ios. \line\bullet  A classe iostream \'e9 derivada por heran\'e7a m\'faltipla tanto da classe istream e como da classe ostream. \line\bullet  O operador de deslocamento \'e0 esquerda (\'ab) \'e9 sobrecarregado para especificar sa\'edda com streams e \'e9 chamado de operador de inser\'e7\'e3o em stream. \line\bullet  O operador de deslocamento \'e0 direita (\'bb) \'e9 sobrecarregado para especificar entrada com stream e \'e9 chamado de operador de extra\'e7\'e3o de stream. \line\bullet  O objeto cm de istream \'e9 associado ao dispositivo padr\'e3o de entrada, normalmente o teclado. \line\bullet  O objeto cout da classe ostream \'e9 associado ao dispositivo de sa\'edda, normalmente a tela. \line\bullet  O objeto cerr da classe ostream \'e9 associado ao dispositivo de erro padr\'e3o. Os dados enviados para sa\'edda em cerr n\'e3o s\'e3o colocados em um buffer; cada inser\'e7\'e3o em cerr aparece imediatamente na sa\'edda. \line\bullet  O manipulador de stream endi envia um caractere nova linha e esvazia o buifer de sa\'edda. \line\bullet  O compilador de C++ determina tipos de dados automaticamente para entrada e sa\'edda. \line\bullet  Endere\'e7os s\'e3o exibidos em formato hexadecimal por default. \line\bullet  Para imprimir o endere\'e7o armazenado em uma vari\'e1vel ponteiro, fa\'e7a a coer\'e7\'e3o do ponteiro para void*. \line\bullet  A fun\'e7\'e3o membro put envia um caractere para a sa\'edda. As chamadas para put podem ser encadeadas. \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 669 \par
\bullet  A leitura de um stream \'e9 executada com o operador de extra\'e7\'e3o de stream \'bb. Este operador ignora, automaticamente, caracteres em branco no stream de entrada. \line\bullet  O operador \'bb retorna false quando o fim de arquivo \'e9 encontrado em um stream. \line\bullet  Extra\'e7\'e3o de um stream faz failbit ser \ldblquote ligado\rdblquote  para dados de entrada impr\'f3prios e badbit ser \ldblquote ligado\rdblquote  se a opera\'e7\'e3o \par
falha. \par
\bullet  Uma s\'e9rie de valores pode ser fornecida como entrada usando-se o operador de extra\'e7\'e3o de stream no cabe\'e7alho de um la\'e7o while. A extra\'e7\'e3o retorna O quando o fim de arquivo \'e9 encontrado. \line\bullet  A fun\'e7\'e3o membro get sem argumentos recebe um caractere do stream de entrada e retorna este caractere; EOF \'e9 retornado se o fim de arquivo \'e9 encontrado no stream. \line\bullet  A fun\'e7\'e3o membro get com um argumento do tipo refer\'eancia para char recebe um caractere do stream de entrada . EOF \'e9 retornado quando o fim de arquivo \'e9 encontrado; caso contr\'e1rio, o objeto istream para o qual a fun\'e7\'e3o membro get est\'e1 sendo invocada \'e9 retomado. \line\bullet  A fun\'e7\'e3o membro get com tr\'eas argumentos - um array de caracteres, um limite de tamanho e um delimitador (com valor default nova linha) - l\'ea caracteres do stream de entrada at\'e9 um m\'e1ximo de \ldblquote limite de tamanho - 1\rdblquote  caracteres e termina, ou termina quando o delimitador \'e9 lido. O string de entrada \'e9 terminado com um caractere nulo. O delimitador n\'e3o \'e9 colocado no array de caracteres, mas permanece no stream de entrada. \line\bullet  A fun\'e7\'e3o membro getline opera como a fun\'e7\'e3o membro get de tr\'eas argumentos. A fun\'e7\'e3o getline remove o delimitador \line do stream de entrada, mas n\'e3o o armazena no string. \line\bullet  A fun\'e7\'e3o membro ignore ignora o n\'famero especificado de caracteres (o default \'e9 1) no s\'edream de entrada; ela termina se o delimitador especificado \'e9 encontrado (o delimitador default \'e9 EOF). \line\bullet  A fun\'e7\'e3o membro putback coloca o \'faltimo caractere obtido por um get de um stream de entrada de volta naquele stream. \line\bullet  A fun\'e7\'e3o membro peek retorna o pr\'f3ximo caractere do stream de entrada, mas n\'e3o remove o caractere do stream. \line ) \line\bullet  C++ oferece EIS segura quanto ao tipo. Se dados inesperados s\'e3o processados pelos operadores \'ab e\'bb, v\'e1rios indicadores s\'e3o ligados para que o usu\'e1rio possa fazer testes e determinar se uma opera\'e7\'e3o de E/S teve sucesso ou falhou. \line\bullet  A E/S n\'e3o-formatada \'e9 executada com as fun\'e7\'f5es membro read e write. Elas recebem da entrada e colocam na mem\'f3ria ou enviam da mem\'f3ria para a sa\'edda um certo n\'famero de bytes, iniciando a partir de um endere\'e7o de mem\'f3ria especificado. Eles s\'e3o recebidos como entrada ou enviados para a sa\'edda como bytes brutos, sem formata\'e7\'e3o. \line\bullet  A fun\'e7\'e3o membro gcount retorna o n\'famero de caracteres fornecidos como entrada pela opera\'e7\'e3o read anterior naquele stream. \par
\bullet  A fun\'e7\'e3o membro read recebe como entrada um n\'famero especificado de caracteres para um array de caracteress. failbit \'e9 \ldblquote ligado\rdblquote  se s\'e3o lidos menos caracteres que o n\'famero especificado de caracteres. \line\bullet  Para mudar a base em que inteiros s\'e3o mostrados na sa\'edda, use o manipulador hex para definir a base como hexadecimal (base 16) ou oct para definir a base como octal (base 8). Use o manipulador dec para redefinir a base como decimal. A base permanece a mesma at\'e9 ser explicitamente mudada. \line\bullet  O manipulador de tream parametrizado setbase tamb\'e9m define a base para sa\'edda de inteiros. setbase aceita um par\'e2metro inteiro de valor 10, 8 ou 16 para definir a base. \line\bullet  A precis\'e3o de valores em ponto flutuante pode ser controlada usando-se ou o manipulador de stream setprecision ou a fun\'e7\'e3o membro precision. Ambos inicializam a precis\'e3o para todas as opera\'e7\'f5es subseq\'fcentes de sa\'edda at\'e9 a pr\'f3xima chamada de inicializa\'e7\'e3o de precis\'e3o. A fun\'e7\'e3o membro precision sem argumento retorna o valor da precis\'e3o atual. \line\bullet  Os manipuladores parametrizados exigem a inclus\'e3o do arquivo de cabe\'e7alho <ioxnanip>. \line\bullet  A fun\'e7\'e3o membro width inicializa a largura do campo e retorna a largura anterior. Os valores menores que o campo s\'e3o preenchidos com caracteres de enchimento. A defini\'e7\'e3o da largura do campo somente se aplica para a pr\'f3xima inser\'e7\'e3o ou extra\'e7\'e3o; posteriormente, o comprimento do campo \'e9 implicitamente definido com O (valores subseq\'fcentes ser\'e3o mostrados \par
670 C++ COMO PROGRAMAR \line na sa\'edda t\'e3o grandes quanto necess\'e1rio). Valores maiores que um campo s\'e3o impressos em sua totalidade. A fun\'e7\'e3o width sem argumento retorna a defini\'e7\'e3o atual da largura. O manipulador setw tamb\'e9m inicializa a largura. \line\bullet  Para a entrada, o manipulador de stream setw estabelece um tamanho m\'e1ximo de string; se um string maior \'e9 digitado, a linha maior \'e9 quebrada em peda\'e7os n\'e3o maiores que o tamanho designado. \line\bullet  Os usu\'e1rios podem criar seus pr\'f3prios manipuladores de streams. \line\bullet  As fun\'e7\'f5es membro setf. unsetf e flags controlam as defini\'e7\'f5es de indicadores. \line\bullet  O indicador skipws indica que \'bb deve ignorar espa\'e7os em branco no stream de entrada. O manipulador de stream ws tamb\'e9m salta por cima de espa\'e7os iniciais em branco em um stream de entrada. \line\bullet  Os indicadores de formato s\'e3o definidos como uma enumera\'e7\'e3o na classe ios. \line\bullet  As fun\'e7\'f5es membro flags e setf controlam indicadores de formato, mas muitos programadores de C++ preferem usar manipuladores de stream. A opera\'e7\'e3o \ldblquote ou\rdblquote  sobre bits, 1 pode ser usada para combinar v\'e1rias op\'e7\'f5es em \'fanico valor long. Chamar a fun\'e7\'e3o membro flags para um stream e especificar estas op\'e7\'f5es combinadas por um ou define as op\'e7\'f5es para aquele stream e retorna um valor long contendo as op\'e7\'f5es anteriores. Este valor \'e9 freq\'fcentemente salvo para que flags possa ser chamada com este valor salvo para restabelecer as op\'e7\'f5es do anteriores para o stream. \line\bullet  A fun\'e7\'e3o flags deve especificar um \'fanico valor representando as defini\'e7\'f5es de todos os indicadores. A fun\'e7\'e3o setf com um par\'e2metro, por outro lado, automaticamente tome \ldblquote ou\rdblquote  todos os indicadores especificados com as defini\'e7\'f5es de indicadores existentes, para formar um novo estado de formato. \line\bullet  O indicador showpoint \'e9 definido para for\'e7ar um n\'famero de ponto flutuante a ser mostrado na sa\'edda com um ponto decimal e um n\'famero de d\'edgitos significativos especificado pela precis\'e3o. \line\bullet  Os indicadores left e right fazem com que os campos sejam alinhados \'e0 esquerda com caracteres de preenchimento \'e0 direita, ou alinhados \'e0 direita com caracteres de preenchimento \'e0 esquerda. \line\bullet  O indicador internal indica que o sinal de um n\'famero (ou base quando o indicador ios : showbase est\'e1 \ldblquote ligado\rdblquote ) deve ser alinhado \'e0 esquerda dentro de um campo, a magnitude deve ser alinhada \'e0 direita e os espa\'e7os intervenientes devem ser preenchidos com o caractere de enchimento. \line\bullet  ios: adjustfield cont\'e9m os indicadores left. right e internal. \line\bullet  A fun\'e7\'e3o membro f iii especifica o caractere de enchimento a ser usado com campos alinhados left. right e internal (o default \'e9 espa\'e7o): o caractere de preenchimento anterior \'e9 retomado. O manipulador de stream setfill tamb\'e9m inicializa o caractere de enchimento. \line\bullet  O membro est\'e1tico ios: basefield inclui os bits oct, hex e dec para especificar que inteiros devem tratados como valores octais, hexadecimais e decimais, respectivamente. O default para a sa\'edda de inteiros \'e9 decimal se nenhum destes bits estiver \ldblquote ligado\rdblquote ; as extra\'e7\'f5es de stream processam os dados na forma em que os dados s\'e3o fornecidos. \line\bullet  Inicialize o indicador showbase para for\'e7ar a sa\'edda da base de um valor inteiro. \line\bullet  O membro de dados est\'e1tico ios: : floatfield cont\'e9m os indicadores scientific e fixed. Inicialize o indicador scientific para mostrar um n\'famero de ponto flutuante na sa\'edda no formato cient\'edfico. Inicialize o indicador fixed para mostrar um n\'famero de ponto flutuante na sa\'edda com a precis\'e3o especificada pela fun\'e7\'e3o membro precision. \line\bullet  A chamada cout. setf ( O, ios: : floatfield ) restabelece o formato default para exibir n\'fameros de ponto flutuante. \line\bullet  Inicialize o indicador uppercase para for\'e7ar um X ou E mai\'fasculo a ser mostrado na sa\'edda com inteiros hexadecimais ou com valores de ponto flutuante em nota\'e7\'e3o cient\'edfica, respectivamente. Quando inicializado, o indicador ios : uppercase faz com que todas as letras em um valor hexadecimal estejam em mai\'fasculas. \line\bullet  A fun\'e7\'e3o membro flags sem par\'e2metro retorna o valor long das defini\'e7\'f5es atuais dos indicadores de formato. A fun\'e7\'e3o membro flags com um par\'e2metro long inicializa os indicadores de formato especificados pelo par\'e2metro e retoma as defini\'e7\'f5es de indicadores anteriores. \line\bullet  A fun\'e7\'e3o membro setf define os indicadores de formato em seu par\'e2metro e retorna as defini\'e7\'f5es anteriores de indicadores como um valor long. \par
\pard\par
\pard\sb100\sa240 CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C\'f7+ 671 \line\bullet  A fun\'e7\'e3o membro setf ( long setbits, long resetBits) \ldblquote desliga\rdblquote  os bits de resetBits e ent\'e3o inicializa os bits em setBits. \line\bullet  A fun\'e7\'e3o membro unsetf reinicializa os indicadores designados e retorna o valor dos indicadores antes de serem reinicializados. \line\bullet  O manipulador de stream parametrizado setiosflags executa as mesmas fun\'e7\'f5es que a fun\'e7\'e3o membro flags. \line\bullet  O manipulador de strea,n parametrizado resetiosflags executa as mesmas fun\'e7\'f5es que a fun\'e7\'e3o membro unsetf. \line\bullet  O estado de um stream pode ser testado atrav\'e9s de bits na classe \'edos. \line\bullet  O eofbit \'e9 \ldblquote ligado\rdblquote  para um streatn de entrada quando o fim de arquivo \'e9 encontrado durante uma opera\'e7\'e3o de entrada. A fun\'e7\'e3o membro eof \'e9 usada para determinar se o eofbit foi ligado. \line\bullet  O failbit \'e9 \ldblquote ligado\rdblquote  para um stream quando ocorre um erro de formato no siream. Nenhum caractere \'e9 perdido. A fun\'e7\'e3o membro fail informa se uma opera\'e7\'e3o com stream falhou; normalmente, \'e9 poss\'edvel se recuperar tais erros. \line\bullet  O badbit \'e9 \ldblquote ligado\rdblquote  para um siream quando ocorre um erro que resulta em perda de dados. A fun\'e7\'e3o membro bad informa se uma opera\'e7\'e3o com stream falhou. Tais falhas s\'e9rias normalmente n\'e3o s\'e3o recuper\'e1veis. \line\bullet  A fun\'e7\'e3o membro good retorna verdadeiro se as fun\'e7\'f5es bad. fai]. e eof retomaram falso. Opera\'e7\'f5es de EIS devem ser executadas somente sobre streams \ldblquote bons\rdblquote . \line\bullet  A fun\'e7\'e3o membro rdstate retorna o estado de erro do siream. \line\bullet  A fun\'e7\'e3o membro clear \'e9 usada normalmente para restabelecer o estado de um ,oreain para \ldblquote bom\rdblquote , para que a E/S possa continuar naquele strearn. \line\bullet  C++ fornece a fun\'e7\'e3o membro tie para sincronizar opera\'e7\'f5es em istream e ostreaiu. a fim de garantir que sa\'eddas apare\'e7am antes das entradas subseq\'fcentes. \line Terminologia \line arquivo de cabe\'e7alho padr\'e3o <iomanip> formata\'e7\'e3o na mem\'f3ria \line badbit fun\'e7\'e3o membro bad \line caractere de preenchimento fun\'e7\'e3o membro clear \line caractere default de enchimento (espa\'e7o) fun\'e7\'e3o membro eof \line caracteres em branco fun\'e7\'e3o membro fail \line cerr fun\'e7\'e3o membro f iii \line cm fun\'e7\'e3o membro flags \line classe fstream fun\'e7\'e3o membro flush \line classe ifstream fun\'e7\'e3o membro gcount \line classe ios fun\'e7\'e3o membro get \line classe iostream fun\'e7\'e3o membro getline \line classe istream fun\'e7\'e3o membro good \line classe ofstreain fun\'e7\'e3o membro ignore \line classe ostream fun\'e7\'e3o membro operador\rquote  \line clog fun\'e7\'e3o membro operator void* \line cout fun\'e7\'e3o membro peek \line EIS formatada fun\'e7\'e3o membro precision \line EIS n\'e3o-formatada fun\'e7\'e3o membro put \line E/S segura quanto a tipo fun\'e7\'e3o membro putback \line endi fun\'e7\'e3o membro rdstate \line entrada em stream fun\'e7\'e3o membro read \line eofbit fun\'e7\'e3o membro setf \line estados de formato fun\'e7\'e3o membro tie \line failbit fun\'e7\'e3o membro unsetf \line fim de arquivo fun\'e7\'e3o membro write \par
672 C++ CoMo PROGRAMAR \par
fun\'e7\'e3o membro ws indicadores de formato ios: :adjustfield \par
ios: :basefield ios: : fixed ios: floatfield ios: : internal ios: :scientific \par
ios: : showbase ios: : showpoint ios: showpos justificado \'e0 direita justificado \'e0 esquerda \par
largura \line largura de campo \line mai\'fasculas \line manipulador s tream manipulador de stream dec manipulador de stream flush \par
Erros comuns de programa\'e7\'e3o \par
manipulador de stream hex manipulador de stream oct manipulador de stream parametrizado \par
manipulador de stream resetiosflags manipulador de stream setbase manipulador de stream setfill manipulador de stream setios flags manipulador de stream setprecision \par
manipulador de stream setw operador de extra\'e7\'e3o de stream (\'bb) operador de inser\'e7\'e3o em stream (\'ab) precis\'e3o default preenchimento \par
sa\'edda em siream \line skipws \line streams definidos pelo usu\'e1rio streams predefinidos O mais \'e0 esquerda (octal) Ox ou OX mais \'e0 esquerda (hexadecimal) \par
11.1 Tentar ler de um ostream (ou qualquer outro stream somente de sa\'edda). \line 11.2 Tentar escrever em um istream (ou qualquer outro stream somente de entrada). \line 11.3 N\'e3o usar par\'eanteses para for\'e7ar a preced\'eancia apropriada, quando usar os operadores de preced\'eancia relativamente mais alta para inser\'e7\'e3o em stream (\'ab) ou extra\'e7\'e3o de stream (\'bb). \line 11.4 A defini\'e7\'e3o de setw se aplica somente \'e0 pr\'f3xima inser\'e7\'e3o ou extra\'e7\'e3o; posteriormente. setw\'e9 implicitamente inicializada com O, i.e., os valores de sa\'edda simplesmente ser\'e3o t\'e3o grandes quanto eles necessitam ser. A fun\'e7\'e3o setw sem par\'e2metro \line retorna a defini\'e7\'e3o atual. E um erro de l\'f3gica assumir que a defini\'e7\'e3o de setw se aplica a todas as sa\'eddas subseq\'fcentes. \line 11.5 Quando n\'e3o se fornecer um campo suficientemente grande para tratar a sa\'edda, a impress\'e3o da sa\'edda ser\'e1 t\'e3o grande quanto necess\'e1ria, provavelmente tornando a sa\'edda dif\'edcil de ser lida. \par
Boas pr\'e1ticas de programa\'e7\'e3o \par
11.1 Use exclusivamente a forma de EIS de C++ em programas em C++, apesar do fato de que a EIS ao estilo de C est\'e1 dispon\'edvel para os programadores de C++. \line 11.2 Quando enviar express\'f5es para a sa\'edda, coloque-as entre par\'eanteses, para prevenir problemas de preced\'eancia de operadores entre os operadores na express\'e3o e o operador \'ab. \par
Dica de desempenho \par
11.1 Use EIS n\'e3o-formatada para obter melhor desempenho no processamento de arquivos de grande volume. \par
Dica de portabilidade \par
11.1 Quando informar ao usu\'e1rio sobre como terminar a entrada de dados pelo teclado, pe\'e7a ao usu\'e1rio que \ldblquote digite fim de arquivo para terminar a entrada\rdblquote  em vez de solicitar <ctrl>-d (UNIX e Macintosh) ou <ctrl>-z (PC e VAX). \par
Observa\'e7\'f5es de engenharia de software \par
11.1 O estilo de EIS de C++ \'e9 seguro quanto ao tipo. \line 11.2 C++ possibilita um tratamento comum da EIS de tipos primitivos e de tipos definidos pelo usu\'e1rio. Este tipo de \ldblquote comunalidade\rdblquote  facilita o desenvolvimento de software em geral e a reutiliza\'e7\'e3o de software em particular. \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 673 [ \line Exerc\'edcios de auto-revis\'e3o \line 11.1 Responda a cada um dos seguintes itens: \line a) Operadores de streum sobrecarregados s\'e3o freq\'fcentemente definidos como fun\'e7\'f5es de uma classe. \line b) Os bits de alinhamento do formato que podem ser inicializados incluem __________, __________ e __________ \line c) A entrada/sa\'edda em ocorre como __________ de bytes. \line d) Os manipuladores de stream parametrizados e podem ser usados para ligar e desligar indicadores de estado de formato. \line e) A maioria dos programas em C++ deve incluir o arquivo de cabe\'e7alho que cont\'e9m informa\'e7\'f5es b\'e1sicas necess\'e1rias para todas as opera\'e7\'f5es EIS com stream,v. \line f) As fun\'e7\'f5es membro _________ e ligam e desligam indicadores de estado de formato. \line g) O arquivo de cabe\'e7alho cont\'e9m as declara\'e7\'f5es requeridas para executar formata\'e7\'e3o \ldblquote na mem\'f3ria\rquote . \line h) Quando usar manipuladores parametrizados, deve ser inclu\'eddo o arquivo de cabe\'e7alho \line i) O arquivo de cabe\'e7alho cont\'e9m as declara\'e7\'f5es requeridas para o processamento de arquivos controlado \line pelo usu\'e1rio. \line j) O manipulador de stream __________ insere um caractere nova linha na sa\'edda do stream e esvazia o stream de sa\'edda. \line k) O arquivo de cabe\'e7alho \'e9 usado em programas que misturam os estilos de E/S de C++ e de C. \line 1) A fun\'e7\'e3o membro ostream __________ \'e9 usada para executar sa\'edda n\'e3o-formatada. \line m) Opera\'e7\'f5es de entrada s\'e3o sustentadas pela classe ___________ \line n) A sa\'edda do stream de erro padr\'e3o \'e9 dirigida ou para o _________ ou para o objeto do stream. \line o) As opera\'e7\'f5es de sa\'edda s\'e3o suportadas pela classe __________ \line p) O s\'edmbolo para o operador de inser\'e7\'e3o em streams \'e9 __________ \line q) Os quatro objetos que correspondem aos dispositivos padr\'e3o do sistema s\'e3o __________, __________ e \line r) O s\'edmbolo para o operador de extra\'e7\'e3o do stream \'e9____________ \line s) Os manipuladores de siream __________, __________ e especificam que inteiros devem ser exibidos em formato octal, hexadecimal e decimal, respectivamente. \line t) A precis\'e3o default para exibir valores de ponto flutuante \'e9 __________ \line u) Quando inicializado, o indicador __________ faz com que n\'fameros positivos sejam mostrados com um sinal de mais. \line 11.2 Afirme se os seguintes itens s\'e3o verdadeiros ou falsos. Se a resposta for falso, explique por qu\'ea. \line a) A fun\'e7\'e3o membro de stream flags () com um argumento long inicializa a vari\'e1vel de estado de flags com seu argumento e retoma seu valor anterior. \line b) O operador de inser\'e7\'e3o em streams \'ab e o operador de extra\'e7\'e3o de streams \'bb s\'e3o sobrecarregados para tratar todos os tipos de dados padr\'e3o - inclusive endere\'e7os de strings e de mem\'f3ria (somente inser\'e7\'e3o em streams) - e todos os tipos de dados definidos pelo usu\'e1rio. \line e) A fun\'e7\'e3o membro de stream flags () sem argumentos desliga todos os bits de indicadores na vari\'e1vel de estado de flags. \line d) O operador de extra\'e7\'e3o de stream \'bb pode ser sobrecarregado com uma fun\'e7\'e3o operador que aceita uma refer\'eancia para istream e uma refer\'eancia para um tipo definido pelo usu\'e1rio como par\'e2metros e retoma um refer\'eancia para istream. \line e) O manipulador de stream ws ignora (salta) os espa\'e7os em branco iniciais em um stream de entrada. \line f) O operador de inser\'e7\'e3o em stream \'ab pode ser sobrecarregado com uma fun\'e7\'e3o operador que aceita uma refer\'eancia a is tream e uma refer\'eancia a um tipo definido pelo usu\'e1rio como par\'e2metros e retorna uma refer\'eancia para is tream. \line g) A entrada com o operador de extra\'e7\'e3o de streams \'bb sempre ignora caracteres em branco iniciais no stream fornecido como entrada. \line h) Os recursos de entrada e sa\'edda s\'e3o fornecidos como parte de C++. \line i) A fun\'e7\'e3o membro de stream rdstate () retorna o estado atual do stream. \line j) O streanl cout normalmente \'e9 conectado \'e0 tela do monitor. \line k) A fun\'e7\'e3o membro de stream good() retorna verdadeiro se as fun\'e7\'f5es membrobadO, fail () e eof retornam falso. \line 1) O stream cm normalmente \'e9 conectado \'e0 tela do monitor. \line m) Se um erro n\'e3o-recuper\'e1vel ocorre durante uma opera\'e7\'e3o com stream, a fun\'e7\'e3o membro bad retornar\'e1 verdadeiro. \line n) A sa\'edda de cerr n\'e3o \'e9 posta em um buffer e a sa\'edda de clog \'e9 posta em um buifer. \line o) Quando o indicador ios: showpoint \'e9 inicializado, valores em ponto flutuante s\'e3o for\'e7ados a serem impressos com o default de seis d\'edgitos de precis\'e3o - desde que o valor da precis\'e3o n\'e3o tenha sido mudado, caso em que os valores em ponto flutuante s\'e3o impressos com a precis\'e3o especificada. \line p) A fun\'e7\'e3o membro put de ostream envia para a sa\'edda o n\'famero especificado de caracteres. \line q) Os manipuladores de stream dec, oct e hex somente afetam a pr\'f3xima opera\'e7\'e3o de sa\'edda de inteiros. \line r) Quando mostrados na sa\'edda, os endere\'e7os de mem\'f3ria s\'e3o exibidos como inteiros lorig por default. \par
674 C++ COMO PROGRAMAR \par
11.3 Para cada um dos seguintes itens, escreva um \'fanico comando que execute a tarefa indicada. \line a) Envie para a sa\'edda o string \ldblquote Digite seu nome: \line b) Inicialize um indicador que faz com que o expoente em nota\'e7\'e3o cient\'edfica e as letras em valores hexadecimais sejam impressas em letras mai\'fasculas. \line e) Envie para a sa\'edda o endere\'e7o da vari\'e1vel string do tipo char*. \line d) Inicialize um indicador de forma que a impress\'e3o de valores em ponto flutuante seja feita na nota\'e7\'e3o cientitica. \line e) Envie para a sa\'edda o endere\'e7o da vari\'e1vel integerPtr do tipo int*. \line f) Inicialize um indicador de forma que, quando valores inteiros forem enviados para a sa\'edda, a base do inteiro seja mostrada para valores nas bases octal e hexadecimal. \line g) Envie para a sa\'edda o valor apontado por floatPtr. do tipo float*. \line h) Use uma fun\'e7\'e3o membro de stream para definir o caractere de preenchimento como \lquote *\lquote  para imprimir em campos com largura maior que os valores sendo mostrados. Escreva um comando separado para fazer isto com um manipulador de stream. \line i) Envie para a sa\'edda os caracteres \lquote 0\rquote  e K em um s\'f3 comando, usando a fun\'e7\'e3o put de ostream. \line j) Obtenha o valor do pr\'f3ximo caractere no stream de entrada sem extra\'ed-lo do stream. \line k) Forne\'e7a como entrada um caractere \'fanico para a vari\'e1vel e de tipo char. usando a fun\'e7\'e3o membro get de istream de dois modos diferentes. \line 1) Receba como entrada e descarte os pr\'f3ximos seis caracteres do stream de entrada. \line m) Use a fun\'e7\'e3o membro read de istream para ler 50 caracteres para o array linha do tipo char. \line n) Leia 10 caracteres para o array de caracteres nome. Pare de ler caracteres se o delimitador . for encontrado. N\'e3o remova o delimitador do stream de entrada. Escreva outro comando que executa esta tarefa e remove o delimitador da entrada. \line o) Use a fun\'e7\'e3o membro gcount de istream para determinar o n\'famero de caracteres fornecidos como entrada para o array de caracteres linha pela \'faltima chamada \'e0 fun\'e7\'e3o membro read de istream e envie para a sa\'edda essa quantidade de caracteres usando a fun\'e7\'e3o membro write de ostream. \line p) Escreva comandos separados para esvaziar a sa\'edda do stream usando uma fun\'e7\'e3o membro e um manipulador de r stream. \line q) Envie para a sa\'edda os seguintes valores: 124, 18.376, \lquote Z\rquote , 1000000 e \ldblquote String\rdblquote . \line r) Imprima a defini\'e7\'e3o da precis\'e3o atual usando uma fun\'e7\'e3o membro. \line s) Receba como entrada um valor inteiro para a vari\'e1vel int meses e um valor em ponto flutuante para a vari\'e1vel float percentual. \line t) Imprima 1. 92, 1 . 925 e 1 . 9258 com 3 d\'edgitos de precis\'e3o usando um manipulador. \line u) Imprima o inteiro 100 em octal, hexadecimal e decimal usando manipuladores de stream. \line v) Imprima o inteiro 100 em decimal, octal e hexadecimal usando um manipulador de stream \'fanico para mudar a base. \line w) Imprima 1234 alinhado \'e0 direita em um campo de 10 d\'edgitos. \line x) Leia caracteres para o array de caracteres linha at\'e9 o caractere \lquote z ser encontrado, at\'e9 um m\'e1ximo de 20 caracteres (incluindo o caractere nulo terminal). N\'e3o extraia o caractere delimitador do stream. \line y) Use as vari\'e1veis inteiras x e y para especificar a largura do campo e a precis\'e3o usada para exibir o valor double 87.4573 e exiba o valor. \line 11.4 Identifique o erro em cada um dos comandos seguintes e explique como corrigi-lo. \line a) cout\'ab \ldblquote Valor de x <= y \'e9: \ldblquote  \'ab x < y; \line b) O comando seguinte deveria imprimir o valor inteiro de \lquote e \line cout \'ab \lquote c\rquote ; \line e) cout \'ab \ldblquote Um string entre aspas\rdblquote ; \line 11.5 Para cada um dos seguintes itens, mostre a sa\'edda. \line a) eout \'ab \ldblquote 12345\rdblquote  \'ab endi; \line cout.width( 5 ); \line cout.fill( \lquote *\lquote  \line cout \'ab 123 \'ab endi \'ab 123; \line b) cout \'ab setw( 10 ) \'ab setfill( \lquote $\lquote  ) \'ab 10000; \line e) cout \'ab setw( 8 ) \'ab setprecision( 3 ) \'ab 1024.987654; \line d) cout \'ab setiosflags( ios: :showbase ) \'ab oct \'ab 99 \line\'ab endi \'ab hex \'ab 99; \line e) cout \'ab 100000 \'ab endi \line\'ab setiosflags( ios::showpos ) \'ab 100000; \line f) cout \'ab setw( 10 ) \'ab setprecision( 2 ) \'ab \line\'ab setiosflags( ios::scientifie ) \'ab 444.93738; \par
CAP\'cdTULO 11 - ENTRADA/SA\'cdDA COM STREAMS EM C++ 675 \line Respostas aos exerc\'edcios de auto-revis\'e3o \line 11.1 a) friend b) ios: :left, ios: :right e ios: :internal. c) streams. \line d) setiosflags, resetiosflags. e) iostream. f) setf, unsetf. \line g) strstreain. h) iomanip. i) fstream. j) endi. k) stdiostream. \line 1) write. m) istream. fl) cerr ou clog. O) ostream. p) \'ab. \line q) cm, cout, cerr e clog. r) \'bb. s) oct, hex. dec. t) seis d\'edgitos de precis\'e3o. \line u) ios: :showpos. \line 11.2 a) Verdadeiro. \line b) Falso. Os operadores de inser\'e7\'e3o em stream e extra\'e7\'e3o de stream n\'e3o s\'e3o sobrecarregados para todos os tipos definidos pelo usu\'e1rio. O programador de uma classe deve fornecer especificamente as fun\'e7\'f5es de operador sobrecarregadas \line para sobrecarregar os operadores de streams a serem usados com cada tipo definido pelo usu\'e1rio. \line c) Falso. A fun\'e7\'e3o membro de stream flags () sem argumentos simplesmente retoma o valor atual da vari\'e1vel de estado de flags. \line d) Verdadeiro. \line e) Verdadeiro. \line f) Falso. Para sobrecarregar o operador de inser\'e7\'e3o em stream \'ab, a fun\'e7\'e3o de operador sobrecarregada deve receber uma refer\'eancia a ostream e uma refer\'eancia a um tipo definido pelo usu\'e1rio como argumentos e retornar uma \line refer\'eancia para ostream. \line g) Verdadeiro. A menos que ios: : skipws esteja \ldblquote desligado\rdblquote . \line h) Falso. Os recursos de EIS de C++ s\'e3o fornecidos como parte da Biblioteca Padr\'e3o C++. A linguagem C++ n\'e3o cont\'e9m recursos para entrada, sa\'edda ou processamento de arquivos. \line i) Verdadeiro. \line j) Verdadeiro. \line k) Verdadeiro. \line 1) Falso. O stream cm \'e9 conectado \'e0 entrada padr\'e3o do computador, que \'e9 normalmente o teclado. \line m) Verdadeiro. \line n) Verdadeiro. \line o) Verdadeiro. \line p) Falso. A fun\'e7\'e3o membro put de ostream coloca na sa\'edda o caractere recebido como seu \'fanico argumento. \line q) Falso. Os manipuladores de streams dec. oct e hex inicializam o estado do formato de sa\'edda para inteiros para a base especificada at\'e9 a base ser novamente mudada ou o programa terminar. \line r) Falso. Os endere\'e7os de mem\'f3ria s\'e3o exibidos no formato hexadecimal por default. Para exibir endere\'e7os como inteiros long, o endere\'e7o deve sofrer uma coer\'e7\'e3o para um valor long. \line 11.3 a) cout \'ab \ldblquote Digite seu nome: \line b) cout.setf(ios: :uppercase); \line c) cout \'ab (void *) string; \line d) cout. setf (ios: : scientific, ios: : floatfield); \line e) cout \'ab integerPtr; \line f) cout \'ab setiosflags(ios: :showbase); \line g) cout \'ab *f].oatptr; \line h) cout.fill( \lquote *\lquote  ); \line cout \'ab setfill ( *\lquote  \line i) cout.put( \lquote O\rquote  ).put( \lquote K\rquote  ); \line j) cin.peek \line k) c = cin.get \line cin.get( c ); \line 1) cin.ignore( 6 ); \line m)cin.read( linha, 50 ); \line n) cin.get( nome, 10, \lquote .\lquote  \line cin.getline( nome, 10, .\lquote  ); \line o) cout.write( linha, cin.gcount() ); \line p) cout.flush() \line cout \'ab flush; \line q) cout \'ab 124 \'ab 18.376 \'ab 1000000 \'ab Z \'ab \ldblquote String\rdblquote ; \line r) cout \'ab cout.precisionQ; \line s) cm \'bb meses \'bb percentual; \line t) cout \'ab setprecision( 3 ) \'ab 1.92 \'ab \lquote\\t\rquote  \line\'ab 1.925 \'ab \lquote\\t \'ab 1.9258; \line u) cout \'ab oct \'ab 100 \'ab hex \'ab 100 \'ab dec \'ab 100; \par
676 C++ COMO PROGRAMAR \line v) cout \'ab 100 \'ab setbase( 8 ) \'ab 100 \'ab setbase( 16 ) \'ab 100; \line w)cout \'ab setw( 10 ) \'ab 1234; \line x) cin.get( linha, 20, \lquote z\rquote  \line y) cout \'ab setw( x ) \'ab setprecision( y ) \'ab 87.4573; \line 11.4 a) Erro: a preced\'eancia do operador \'ab\'e9 mais alta que a preced\'eancia de <=. o que faz com que o comando seja avaliado impropriamente e provoca um erro de compila\'e7\'e3o. \line Corre\'e7\'e3o: para corrigir o comando, adicione par\'eanteses em tomo da express\'e3o x <= y. \line Este problema acontecer\'e1 com qualquer express\'e3o que usa operadores de preced\'eancia mais baixa que o operador \'ab se a express\'e3o n\'e3o for colocada entre par\'eanteses. \line b) Erro: em C++, caracteres n\'e3o s\'e3o tratados como inteiros pequenos como s\'e3o em C. \line Corre\'e7\'e3o: para imprimir o valor num\'e9rico para um caractere no conjunto de caracteres do computador, o caractere deve sofrer uma coer\'e7\'e3o para um valor inteiro, como segue: \line cout \'ab int( \lquote c\rquote  ); \line e) Erro: os caracteres aspas n\'e3o podem ser impressos em um string a menos que uma seq\'fc\'eancia de escape seja usada. Corre\'e7\'e3o: imprima o string em um dos modos seguintes: \line cout \'ab \lquote\ldblquote\lquote  \'ab \ldblquote Um string entre aspas\rdblquote  \'ab \line cout \'ab \ldblquote\\\ldblquote Um string entre aspas\\\rdblquote ; \line 11.5 a) 12345 \line **123 \line 123 \line b) $$$$$10000 \line c) 1024.988 \line d) 0143 \line 0x63 \line e) 100000 \line +100000 \line f) 4.45e+02 \line Exerc\'edcios \line 11.6 Escreva um comando para cada um dos seguintes itens: \line a) Imprima o inteiro 40000 alinhado \'e0 esquerda em um campo de 15 d\'edgitos. \line b) Leia um string para a vari\'e1vel array de caracteres estado. \line c) Imprima 200 com e sem sinal. \line d) Imprima o valor decimal 100 no formato hexadecimal, precedido por Ox. \line e) Leia caracteres para o array s at\'e9 o caractere \lquote p\rquote  ser encontrado e at\'e9 um m\'e1ximo de 10 caracteres (incluindo o caractere nulo terminal). Extraia o delimitador do stream de entrada e descarte-o. \line f) Imprima 1 .234 em um campo de 9 d\'edgitos com zeros \'e0 esquerda. \line g) Leia um string da forma \ldblquote caracteres\rdblquote  da entrada padr\'e3o. Armazene o string no array de caracteres s. El\'efmine as aspas do stream de entrada. Leia um m\'e1ximo de 50 caracteres (incluindo o caractere nulo terminal). \line 11.7 Escre a um programa para testar a entrada de alores inteiros no formato decimal, octal e hexadecimal. Envie para a sa\'edda \line 4 cada inteiro lido pelo programa em todos os tr\'eas formatos. Teste o programa com os seguintes dados de entrada: 10,010, 0x lO. \line 1 1.11 Escreva um programa que imprime valores de ponteiros usando coer\'e7\'f5es para todos os tipos de dados inteiros. Quais imprimem valores estranhos? Quais causam erros? \line 11.9 Escreva um programa para testar os resultados de imprimir o valor inteiro 12345 e o valor de ponto flutuante 1 .2345 \line em v\'e1rios tamanhos de campo. O que ocorre quando os valores s\'e3o impressos em campos que cont\'eam menos d\'edgitos que O \line valores? \line 11.10 Escreva um programa que imprime o valor 100. 453627 arredondado para o mais pr\'f3ximo d\'edgito, d\'e9cimo, cent\'e9simo, mil\'e9simo e d\'e9cimo-mil\'e9simo. \line 11.11 Escreva um programa que recebe um string pelo teclado e determina o comprimento do string. Imprima o string usando duas vezes o seu comprimento como a largura do campo. \line 11.12 Escreva um programa que converte temperaturas Fahrenheit inteiras de O at\'e9 212 graus para temperaturas Celsius em ponto flutuante com 3 d\'edgitos de precis\'e3o. Use a f\'f3rmula \line celsius = 5.0 / 9.0 * ( fahrenheit - 32 ) \par
678 C\'f7+ COMO PROGRAMAR \line caractere \'e9 um caractere de espa\'e7o em branco. Cada caractere deve ser lido usando a fun\'e7\'e3o membro get de istream. Quando \'e9 encontrado um caractere que n\'e3o \'e9 um espa\'e7o em branco, o manipulador skipwhite termina seu trabalho colocando o caractere de volta no stream de entrada e retornando uma refer\'eancia para istream. \line Teste o manipulador criando uma fun\'e7\'e3o main em que o indicador ios: : skipws n\'e3o \'e9 inicializado, de forma que o operador de extra\'e7\'e3o de strearn n\'e3o ignora automaticamente espa\'e7os em branco. Ent\'e3o, teste o manipulador com um stream de entrada que tem um caractere precedido por espa\'e7os em branco. Imprima o caractere que foi inserido para confirmar que n\'e3o foi lido um caractere de espa\'e7o em branco. \par
\pard\lang1033\f1\fs20\par
}
 